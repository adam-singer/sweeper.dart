// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DateImplementation = {"":
 ["millisecondsSinceEpoch?", "isUtc"],
 "super": "Object",
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  var t1 = this.millisecondsSinceEpoch;
  var t2 = other.get$millisecondsSinceEpoch();
  return t1 == null ? t2 == null : t1 === t2;
},
 operator$lt$1: function(other) {
  $.propertyTypeCheck(other, 'is$Date');
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$le$1: function(other) {
  $.propertyTypeCheck(other, 'is$Date');
  return $.le(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  $.propertyTypeCheck(other, 'is$Date');
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  $.propertyTypeCheck(other, 'is$Date');
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 hashCode$0: function() {
  return this.millisecondsSinceEpoch;
},
 toString$0: function() {
  var t1 = new $.DateImplementation_toString_fourDigits();
  var t2 = new $.DateImplementation_toString_threeDigits();
  var t3 = new $.DateImplementation_toString_twoDigits();
  var y = $.stringTypeCheck(t1.call$1(this.get$year()), 'is$String');
  var m = $.stringTypeCheck(t3.call$1(this.get$month()), 'is$String');
  var d = $.stringTypeCheck(t3.call$1(this.get$day()), 'is$String');
  var h = $.stringTypeCheck(t3.call$1(this.get$hour()), 'is$String');
  var min = $.stringTypeCheck(t3.call$1(this.get$minute()), 'is$String');
  var sec = $.stringTypeCheck(t3.call$1(this.get$second()), 'is$String');
  var ms = $.stringTypeCheck(t2.call$1(this.get$millisecond()), 'is$String');
  if ($.boolConversionCheck(this.isUtc, 'is$bool'))
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms) + 'Z';
  else
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms);
},
 add$1: function(duration) {
  $.propertyTypeCheck(duration, 'is$Duration');
  return $.DateImplementation$fromMillisecondsSinceEpoch($.add($.intTypeCheck(this.millisecondsSinceEpoch, 'is$$int'), duration.get$inMilliseconds()), this.isUtc);
},
 difference$1: function(other) {
  $.propertyTypeCheck(other, 'is$Date');
  return $.DurationImplementation$(0, 0, 0, 0, $.sub($.intTypeCheck(this.millisecondsSinceEpoch, 'is$$int'), $.intTypeCheck(other.get$millisecondsSinceEpoch(), 'is$$int')));
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 DateImplementation$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.boolConversionCheck($.gt($.abs(t1), 8640000000000000), 'is$bool'))
    throw $.$$throw($.IllegalArgumentException$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.IllegalArgumentException$(t1));
},
 DateImplementation$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 is$Date: true,
 is$Object: function() { return true; }
};

$$.DurationImplementation = {"":
 ["inMilliseconds?"],
 "super": "Object",
 get$inHours: function() {
  return $.tdiv(this.inMilliseconds, 3600000);
},
 get$inMinutes: function() {
  return $.tdiv(this.inMilliseconds, 60000);
},
 get$inSeconds: function() {
  return $.tdiv(this.inMilliseconds, 1000);
},
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Duration))
    return false;
  var t1 = this.inMilliseconds;
  var t2 = other.get$inMilliseconds();
  return t1 == null ? t2 == null : t1 === t2;
},
 hashCode$0: function() {
  return $.hashCode(this.inMilliseconds);
},
 toString$0: function() {
  var t1 = new $.DurationImplementation_toString_threeDigits();
  var t2 = new $.DurationImplementation_toString_twoDigits();
  var t3 = this.inMilliseconds;
  if ($.boolConversionCheck($.lt(t3, 0), 'is$bool'))
    return '-' + $.S($.propertyTypeCheck($.DurationImplementation$(0, 0, 0, 0, $.neg(t3)), 'is$Duration'));
  var twoDigitMinutes = $.stringTypeCheck(t2.call$1($.remainder(this.get$inMinutes(), 60)), 'is$String');
  var twoDigitSeconds = $.stringTypeCheck(t2.call$1($.remainder(this.get$inSeconds(), 60)), 'is$String');
  var threeDigitMs = $.stringTypeCheck(t1.call$1($.remainder(t3, 1000)), 'is$String');
  return $.S(this.get$inHours()) + ':' + $.S(twoDigitMinutes) + ':' + $.S(twoDigitSeconds) + '.' + $.S(threeDigitMs);
},
 is$Duration: true,
 is$Object: function() { return true; }
};

$$.ExceptionImplementation = {"":
 ["_msg"],
 "super": "Object",
 toString$0: function() {
  var t1 = this._msg;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.FutureImpl = {"":
 ["_isComplete", "_lib0_value?", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (!$.boolConversionCheck(this.get$isComplete(), 'is$bool'))
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw(t1);
  return this._lib0_value;
},
 get$stackTrace: function() {
  if (!$.boolConversionCheck(this.get$isComplete(), 'is$bool'))
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return $.boolConversionCheck(this.get$isComplete(), 'is$bool') && this._exception == null;
},
 then$1: function(onSuccess) {
  $.functionTypeCheck(onSuccess, 'is$Function');
  if ($.boolConversionCheck(this.get$hasValue(), 'is$bool'))
    onSuccess.call$1(this.get$value());
  else {
    var t1 = $.boolConversionCheck(this.get$isComplete(), 'is$bool');
    if (typeof t1 !== 'boolean')
      return this.then$1$bailout(1, onSuccess, t1);
    if (!t1)
      this._successListeners.push(onSuccess);
    else {
      t1 = $.boolConversionCheck(this._exceptionHandled, 'is$bool');
      if (typeof t1 !== 'boolean')
        return this.then$1$bailout(2, t1, 0);
      if (!t1)
        throw $.$$throw(this._exception);
    }
  }
},
 then$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      var onSuccess = env0;
      t1 = env1;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state) {
    case 0:
      $.functionTypeCheck(onSuccess, 'is$Function');
    default:
      if (state === 0 && $.boolConversionCheck(this.get$hasValue(), 'is$bool'))
        onSuccess.call$1(this.get$value());
      else
        switch (state) {
          case 0:
            var t1 = $.boolConversionCheck(this.get$isComplete(), 'is$bool');
          case 1:
            state = 0;
          case 2:
            if (state === 0 && !t1)
              this._successListeners.push(onSuccess);
            else
              switch (state) {
                case 0:
                  t1 = $.boolConversionCheck(this._exceptionHandled, 'is$bool');
                case 2:
                  state = 0;
                  if (!t1)
                    throw $.$$throw(this._exception);
              }
        }
  }
},
 handleException$1: function(onException) {
  $.functionTypeCheck(onException, 'is$Function');
  if ($.boolConversionCheck(this._exceptionHandled, 'is$bool'))
    return;
  if ($.boolConversionCheck(this._isComplete, 'is$bool')) {
    var t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = $.boolTypeCheck(onException.call$1(t1), 'is$bool');
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function() {
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (var t1 = $.iterator(this._exceptionHandlers); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
        var handler = t1.next$0();
        if ($.boolConversionCheck($.eq(handler.call$1(this._exception), true), 'is$bool')) {
          this._exceptionHandled = true;
          break;
        }
      }
    if ($.boolConversionCheck(this.get$hasValue(), 'is$bool'))
      for (t1 = $.iterator(this._successListeners); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
        var listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if ($.boolConversionCheck(!$.boolConversionCheck(this._exceptionHandled, 'is$bool') && $.boolConversionCheck($.gt($.get$length(this._successListeners), 0), 'is$bool'), 'is$bool'))
      throw $.$$throw(this._exception);
  } finally {
    for (t1 = $.iterator(this._completionListeners); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
      var listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if ($.boolConversionCheck(this._isComplete, 'is$bool'))
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._lib0_value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.IllegalArgumentException$(null));
  if ($.boolConversionCheck(this._isComplete, 'is$bool'))
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
},
 is$FutureImpl: true,
 is$Future: true,
 is$Object: function() { return true; }
};

$$.CompleterImpl = {"":
 ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 get$complete: function() { return new $.BoundClosure(this, 'complete$1'); },
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
},
 is$Completer: true,
 is$Object: function() { return true; }
};

$$.HashMapImplementation = {"":
 ["_keys?", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1 = $.hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1, 0, 0, 0);
  var t3 = $.get$length(this._keys);
  if (t3 !== (t3 | 0))
    return this._probeForAdding$1$bailout(2, key, t3, t1, 0, 0);
  var hash = (t1 & t3 - 1) >>> 0;
  for (var numberOfProbes = 1, insertionIndex = -1; true;) {
    var existingKey = $.index(this._keys, hash);
    if (existingKey == null) {
      if ($.boolConversionCheck($.lt(insertionIndex, 0), 'is$bool'))
        return hash;
      return insertionIndex;
    } else if ($.boolConversionCheck($.eq(existingKey, key), 'is$bool'))
      return hash;
    else if ($.boolConversionCheck($.lt(insertionIndex, 0), 'is$bool') && $.CTC0 === existingKey)
      insertionIndex = hash;
    var numberOfProbes0 = $.intTypeCheck($.add(numberOfProbes, 1), 'is$$int');
    if (numberOfProbes0 !== (numberOfProbes0 | 0))
      return this._probeForAdding$1$bailout(3, key, numberOfProbes0, insertionIndex, hash, numberOfProbes);
    hash = $.intTypeCheck($.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys)), 'is$$int');
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForAdding$1$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var key = env0;
      t1 = env1;
      break;
    case 2:
      key = env0;
      t3 = env1;
      t1 = env2;
      break;
    case 3:
      key = env0;
      numberOfProbes0 = env1;
      insertionIndex = env2;
      hash = env3;
      numberOfProbes = env4;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.hashCode(key);
    case 1:
      state = 0;
      var t3 = $.get$length(this._keys);
    case 2:
      state = 0;
      $.intTypeCheck(t1, 'is$$int');
      $.intTypeCheck(t3, 'is$$int');
      var hash = $.intTypeCheck($.and(t1, $.sub(t3, 1)), 'is$$int');
      var numberOfProbes = 1;
      var insertionIndex = -1;
    case 3:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!true)
                break L0;
              var existingKey = $.index(this._keys, hash);
              if (existingKey == null) {
                if ($.boolConversionCheck($.lt(insertionIndex, 0), 'is$bool'))
                  return hash;
                return insertionIndex;
              } else if ($.boolConversionCheck($.eq(existingKey, key), 'is$bool'))
                return hash;
              else if ($.boolConversionCheck($.lt(insertionIndex, 0), 'is$bool') && $.CTC0 === existingKey)
                insertionIndex = hash;
              var numberOfProbes0 = $.intTypeCheck($.add(numberOfProbes, 1), 'is$$int');
            case 3:
              state = 0;
              hash = $.intTypeCheck($.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys)), 'is$$int');
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var t1 = $.hashCode(key);
  var t2 = $.get$length(this._keys);
  $.intTypeCheck(t1, 'is$$int');
  $.intTypeCheck(t2, 'is$$int');
  var hash = $.intTypeCheck($.and(t1, $.sub(t2, 1)), 'is$$int');
  for (var numberOfProbes = 1; true;) {
    var existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.boolConversionCheck($.eq(existingKey, key), 'is$bool'))
      return hash;
    var numberOfProbes0 = $.intTypeCheck($.add(numberOfProbes, 1), 'is$$int');
    hash = $.intTypeCheck($.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys)), 'is$$int');
    numberOfProbes = numberOfProbes0;
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries = $.intTypeCheck($.add(this._numberOfEntries, 1), 'is$$int');
  if ($.boolConversionCheck($.ge(newNumberOfEntries, this._loadLimit), 'is$bool')) {
    this._grow$1($.mul($.get$length(this._keys), 2));
    return;
  }
  var numberOfFree = $.intTypeCheck($.sub($.intTypeCheck($.sub($.intTypeCheck($.get$length(this._keys), 'is$$int'), newNumberOfEntries), 'is$$int'), this._numberOfDeleted), 'is$$int');
  if ($.boolConversionCheck($.gt(this._numberOfDeleted, numberOfFree), 'is$bool'))
    this._grow$1($.get$length(this._keys));
},
 _grow$1: function(newCapacity) {
  $.intTypeCheck(newCapacity, 'is$$int');
  $.assert($.eq($.and(newCapacity, $.sub(newCapacity, 1)), 0));
  var capacity = $.intTypeCheck($.get$length(this._keys), 'is$$int');
  if (capacity !== (capacity | 0))
    return this._grow$1$bailout(1, capacity, newCapacity);
  this._loadLimit = $.intTypeCheck($.tdiv($.mul(newCapacity, 3), 4), 'is$$int');
  var oldKeys = $.listTypeCheck(this._keys, 'is$List');
  var oldValues = $.listTypeCheck(this._values, 'is$List');
  this._keys = $.ListImplementation_List(newCapacity);
  var t2 = $.ListImplementation_List(newCapacity, $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(t2, { 'E': $.getRuntimeTypeInfo(this).V });
  this._values = t2;
  for (var i = 0; $.boolConversionCheck($.lt(i, capacity), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var key = $.index(oldKeys, i);
    if (key == null || key === $.CTC0)
      continue;
    var value = $.index(oldValues, i);
    var newIndex = $.intTypeCheck(this._probeForAdding$1(key), 'is$$int');
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 _grow$1$bailout: function(state, capacity, newCapacity) {
  this._loadLimit = $.intTypeCheck($.tdiv($.mul(newCapacity, 3), 4), 'is$$int');
  var oldKeys = $.listTypeCheck(this._keys, 'is$List');
  var oldValues = $.listTypeCheck(this._values, 'is$List');
  this._keys = $.ListImplementation_List(newCapacity);
  var t2 = $.ListImplementation_List(newCapacity, $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(t2, { 'E': $.getRuntimeTypeInfo(this).V });
  this._values = t2;
  for (var i = 0; $.boolConversionCheck($.lt(i, capacity), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var key = $.index(oldKeys, i);
    if (key == null || key === $.CTC0)
      continue;
    var value = $.index(oldValues, i);
    var newIndex = $.intTypeCheck(this._probeForAdding$1(key), 'is$$int');
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  var length$ = $.intTypeCheck($.get$length(this._keys), 'is$$int');
  if (length$ !== (length$ | 0))
    return this.clear$0$bailout(1, length$);
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 clear$0$bailout: function(state, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 operator$indexSet$2: function(key, value) {
  this._ensureCapacity$0();
  var index = $.intTypeCheck(this._probeForAdding$1(key), 'is$$int');
  if ($.index(this._keys, index) == null || $.index(this._keys, index) === $.CTC0) {
    var t1 = this._numberOfEntries;
    if (typeof t1 !== 'number')
      return this.operator$indexSet$2$bailout(1, index, value, key, t1);
    this._numberOfEntries = $.intTypeCheck(t1 + 1, 'is$$int');
  }
  $.indexSet(this._keys, index, key);
  $.indexSet(this._values, index, value);
},
 operator$indexSet$2$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      index = env0;
      var value = env1;
      var key = env2;
      t1 = env3;
      break;
  }
  switch (state) {
    case 0:
      this._ensureCapacity$0();
      var index = $.intTypeCheck(this._probeForAdding$1(key), 'is$$int');
    case 1:
      if (state === 1 || state === 0 && ($.index(this._keys, index) == null || $.index(this._keys, index) === $.CTC0))
        switch (state) {
          case 0:
            var t1 = this._numberOfEntries;
          case 1:
            state = 0;
            this._numberOfEntries = $.intTypeCheck($.add(t1, 1), 'is$$int');
        }
      $.indexSet(this._keys, index, key);
      $.indexSet(this._values, index, value);
  }
},
 operator$index$1: function(key) {
  var index = $.intTypeCheck(this._probeForLookup$1(key), 'is$$int');
  if ($.boolConversionCheck($.lt(index, 0), 'is$bool'))
    return;
  return $.index(this._values, index);
},
 putIfAbsent$2: function(key, ifAbsent) {
  $.functionTypeCheck(ifAbsent, 'is$Function');
  var index = $.intTypeCheck(this._probeForLookup$1(key), 'is$$int');
  if ($.boolConversionCheck($.ge(index, 0), 'is$bool'))
    return $.index(this._values, index);
  var value = ifAbsent.call$0();
  this.operator$indexSet$2(key, value);
  return value;
},
 remove$1: function(key) {
  var index = $.intTypeCheck(this._probeForLookup$1(key), 'is$$int');
  if ($.boolConversionCheck($.ge(index, 0), 'is$bool')) {
    this._numberOfEntries = $.intTypeCheck($.sub(this._numberOfEntries, 1), 'is$$int');
    var value = $.index(this._values, index);
    $.indexSet(this._values, index, null);
    $.indexSet(this._keys, index, $.CTC0);
    this._numberOfDeleted = $.intTypeCheck($.add(this._numberOfDeleted, 1), 'is$$int');
    return value;
  }
  return;
},
 isEmpty$0: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  var length$ = $.intTypeCheck($.get$length(this._keys), 'is$$int');
  if (length$ !== (length$ | 0))
    return this.forEach$1$bailout(1, f, length$);
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC0))
      f.call$2(key, $.index(this._values, i));
  }
},
 forEach$1$bailout: function(state, f, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC0))
      f.call$2(key, $.index(this._values, i));
  }
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).K);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).K });
  t1.i_1 = 0;
  this.forEach$1(new $.HashMapImplementation_getKeys__(list, t1));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).V });
  t1.i_10 = 0;
  this.forEach$1(new $.HashMapImplementation_getValues__(list, t1));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 containsValue$1: function(value) {
  var length$ = $.intTypeCheck($.get$length(this._values), 'is$$int');
  if (length$ !== (length$ | 0))
    return this.containsValue$1$bailout(1, value, length$);
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC0))
      if ($.boolConversionCheck($.eq($.index(this._values, i), value), 'is$bool'))
        return true;
  }
  return false;
},
 containsValue$1$bailout: function(state, value, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC0))
      if ($.boolConversionCheck($.eq($.index(this._values, i), value), 'is$bool'))
        return true;
  }
  return false;
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 HashMapImplementation$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $.HashMapImplementation__computeLoadLimit(8);
  this._keys = $.ListImplementation_List(8);
  var t1 = $.ListImplementation_List(8, $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(t1, { 'E': $.getRuntimeTypeInfo(this).V });
  this._values = t1;
},
 is$HashMapImplementation: true,
 is$HashMap: true,
 is$Map: function() { return true; },
 is$Object: function() { return true; }
};

$$.HashSetImplementation = {"":
 ["_backingMap?"],
 "super": "Object",
 clear$0: function() {
  $.clear(this._backingMap);
},
 add$1: function(value) {
  $.indexSet(this._backingMap, value, value);
},
 contains$1: function(value) {
  return this._backingMap.containsKey$1(value);
},
 remove$1: function(value) {
  var t1 = this._backingMap;
  if (!$.boolConversionCheck(t1.containsKey$1(value), 'is$bool'))
    return false;
  t1.remove$1(value);
  return true;
},
 addAll$1: function(collection) {
  $.forEach($.listSuperNativeTypeCheck(collection, 'is$Collection'), new $.HashSetImplementation_addAll__(this));
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  $.forEach(this._backingMap, new $.HashSetImplementation_forEach__(f));
},
 some$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $.some($.listSuperNativeTypeCheck(this._backingMap.getKeys$0(), 'is$Collection'), f);
},
 isEmpty$0: function() {
  return $.isEmpty(this._backingMap);
},
 get$length: function() {
  return $.get$length(this._backingMap);
},
 iterator$0: function() {
  return $.HashSetIterator$(this, $.getRuntimeTypeInfo(this).E);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 HashSetImplementation$0: function() {
  this._backingMap = $.propertyTypeCheck($.HashMapImplementation$($.getRuntimeTypeInfo(this).E, $.getRuntimeTypeInfo(this).E), 'is$HashMapImplementation');
},
 is$HashSetImplementation: true,
 is$Set: true,
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$.HashSetIterator = {"":
 ["_entries", "_nextValidIndex"],
 "super": "Object",
 hasNext$0: function() {
  var t1 = this._nextValidIndex;
  var t2 = this._entries;
  if ($.boolConversionCheck($.ge(t1, $.get$length(t2)), 'is$bool'))
    return false;
  if ($.index(t2, this._nextValidIndex) === $.CTC0)
    this._advance$0();
  return $.lt(this._nextValidIndex, $.get$length(t2));
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC4);
  t1 = this._entries;
  if (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior())
    return this.next$0$bailout(2, t1);
  var t3 = this._nextValidIndex;
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  var res = t1[t3];
  this._advance$0();
  return res;
},
 next$0$bailout: function(state, env0) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
    case 1:
      state = 0;
      if (!t1)
        throw $.$$throw($.CTC4);
      t1 = this._entries;
    case 2:
      state = 0;
      var res = $.index(t1, this._nextValidIndex);
      this._advance$0();
      return res;
  }
},
 _advance$0: function() {
  var t1 = this._entries;
  var length$ = $.intTypeCheck($.get$length(t1), 'is$$int');
  if (length$ !== (length$ | 0))
    return this._advance$0$bailout(1, t1, length$);
  var entry = null;
  do {
    var t2 = $.add(this._nextValidIndex, 1);
    this._nextValidIndex = $.intTypeCheck(t2, 'is$$int');
    if ($.boolConversionCheck($.ge(t2, length$), 'is$bool'))
      break;
    entry = $.index(t1, this._nextValidIndex);
  } while (entry == null || entry === $.CTC0);
},
 _advance$0$bailout: function(state, t1, length$) {
  var entry = null;
  do {
    var t2 = $.add(this._nextValidIndex, 1);
    this._nextValidIndex = $.intTypeCheck(t2, 'is$$int');
    if ($.boolConversionCheck($.ge(t2, length$), 'is$bool'))
      break;
    entry = $.index(t1, this._nextValidIndex);
  } while (entry == null || entry === $.CTC0);
},
 HashSetIterator$1: function(set_) {
  $.propertyTypeCheck(set_, 'is$HashSetImplementation');
  this._advance$0();
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$._DeletedKeySentinel = {"":
 [],
 "super": "Object",
 is$_DeletedKeySentinel: true
};

$$.KeyValuePair = {"":
 ["key?", "value="],
 "super": "Object",
 is$KeyValuePair: true
};

$$.LinkedHashMapImplementation = {"":
 ["_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  var t1 = this._map;
  if ($.boolConversionCheck(t1.containsKey$1(key), 'is$bool'))
    $.index(t1, key).get$element().set$value(value);
  else {
    var t2 = this._list;
    $.addLast(t2, $.KeyValuePair$(key, value, $.getRuntimeTypeInfo(this).K, $.getRuntimeTypeInfo(this).V));
    $.indexSet(t1, key, t2.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.propertyTypeCheck($.index(this._map, key), 'is$DoubleLinkedQueueEntry');
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = $.propertyTypeCheck(this._map.remove$1(key), 'is$DoubleLinkedQueueEntry');
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 putIfAbsent$2: function(key, ifAbsent) {
  $.functionTypeCheck(ifAbsent, 'is$Function');
  var value = this.operator$index$1(key);
  if (this.operator$index$1(key) == null && !$.boolConversionCheck(this.containsKey$1(key), 'is$bool')) {
    value = ifAbsent.call$0();
    this.operator$indexSet$2(key, value);
  }
  return value;
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).K);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).K });
  t1.index_1 = 0;
  $.forEach(this._list, new $.LinkedHashMapImplementation_getKeys__(list, t1));
  $.assert($.eq(t1.index_1, $.get$length(this)));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).V });
  t1.index_10 = 0;
  $.forEach(this._list, new $.LinkedHashMapImplementation_getValues__(list, t1));
  $.assert($.eq(t1.index_10, $.get$length(this)));
  return list;
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  $.forEach(this._list, new $.LinkedHashMapImplementation_forEach__(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 containsValue$1: function(value) {
  return $.some(this._list, new $.LinkedHashMapImplementation_containsValue__(value));
},
 get$length: function() {
  return $.get$length(this._map);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 clear$0: function() {
  $.clear(this._map);
  $.clear(this._list);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 LinkedHashMapImplementation$0: function() {
  this._map = $.propertyTypeCheck($.HashMapImplementation$($.getRuntimeTypeInfo(this).K, 'DoubleLinkedQueueEntry<KeyValuePair<K, V>>'), 'is$HashMap');
  this._list = $.propertyTypeCheck($.DoubleLinkedQueue$('KeyValuePair<K, V>'), 'is$DoubleLinkedQueue');
},
 is$HashMap: true,
 is$Map: function() { return true; },
 is$Object: function() { return true; }
};

$$.DoubleLinkedQueueEntry = {"":
 ["_previous?", "_next?", "_element?"],
 "super": "Object",
 set$_previous: function(v) { this._previous = $.propertyTypeCheck(v, 'is$DoubleLinkedQueueEntry'); },
 set$_next: function(v) { this._next = $.propertyTypeCheck(v, 'is$DoubleLinkedQueueEntry'); },
 _link$2: function(p, n) {
  $.propertyTypeCheck(p, 'is$DoubleLinkedQueueEntry');
  $.propertyTypeCheck(n, 'is$DoubleLinkedQueueEntry');
  this._next = $.propertyTypeCheck(n, 'is$DoubleLinkedQueueEntry');
  this._previous = $.propertyTypeCheck(p, 'is$DoubleLinkedQueueEntry');
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e, $.getRuntimeTypeInfo(this).E)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = $.propertyTypeCheck(null, 'is$DoubleLinkedQueueEntry');
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
},
 is$DoubleLinkedQueueEntry: true
};

$$._DoubleLinkedQueueEntrySentinel = {"":
 ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.CTC14);
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.CTC14);
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
},
 is$_DoubleLinkedQueueEntrySentinel: true
};

$$.DoubleLinkedQueue = {"":
 ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this.addLast$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(collection, 'is$Collection')); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    this.add$1(t1.next$0());
},
 removeLast$0: function() {
  return this._sentinel.get$_previous().remove$0();
},
 removeFirst$0: function() {
  return this._sentinel.get$_next().remove$0();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length__(t1));
  return t1.counter_1;
},
 isEmpty$0: function() {
  var t1 = this._sentinel;
  var t2 = t1.get$_next();
  return t2 == null ? t1 == null : t2 === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1.set$_next(t1);
  t1.set$_previous(t1);
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  var t1 = this._sentinel;
  var entry = $.propertyTypeCheck(t1.get$_next(), 'is$DoubleLinkedQueueEntry');
  for (; !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = $.propertyTypeCheck(entry.get$_next(), 'is$DoubleLinkedQueueEntry');
    f.call$1(entry.get$_element());
    $.propertyTypeCheck(nextEntry, 'is$DoubleLinkedQueueEntry');
    entry = nextEntry;
  }
},
 some$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  var t1 = this._sentinel;
  var entry = $.propertyTypeCheck(t1.get$_next(), 'is$DoubleLinkedQueueEntry');
  for (; !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = $.propertyTypeCheck(entry.get$_next(), 'is$DoubleLinkedQueueEntry');
    if ($.boolConversionCheck(f.call$1(entry.get$_element()), 'is$bool'))
      return true;
    $.propertyTypeCheck(nextEntry, 'is$DoubleLinkedQueueEntry');
    entry = nextEntry;
  }
  return false;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel, $.getRuntimeTypeInfo(this).E);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $.propertyTypeCheck($._DoubleLinkedQueueEntrySentinel$($.getRuntimeTypeInfo(this).E), 'is$_DoubleLinkedQueueEntrySentinel');
},
 is$DoubleLinkedQueue: true,
 is$Queue: true,
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"":
 ["_sentinel", "_currentEntry"],
 "super": "Object",
 hasNext$0: function() {
  var t1 = this._currentEntry.get$_next();
  var t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC4);
  this._currentEntry = $.propertyTypeCheck(this._currentEntry.get$_next(), 'is$DoubleLinkedQueueEntry');
  return this._currentEntry.get$element();
},
 next$0$bailout: function(state, t1) {
  if (!t1)
    throw $.$$throw($.CTC4);
  this._currentEntry = $.propertyTypeCheck(this._currentEntry.get$_next(), 'is$DoubleLinkedQueueEntry');
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  $.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel');
  this._currentEntry = $.propertyTypeCheck(this._sentinel, 'is$DoubleLinkedQueueEntry');
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$.JSSyntaxRegExp = {"":
 ["_ignoreCase", "_multiLine", "_lib0_pattern"],
 "super": "Object",
 firstMatch$1: function(str) {
  $.stringTypeCheck(str, 'is$String');
  var m = $.listTypeCheck($.regExpExec(this, $.checkString(str)), 'is$List');
  if (m == null)
    return;
  var matchStart = $.regExpMatchStart(m);
  var t1 = $.get$length($.index(m, 0));
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  var matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 allMatches$1: function(str) {
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString($.stringTypeCheck(str, 'is$String')));
},
 get$pattern: function() {
  return this._lib0_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true,
 is$Object: function() { return true; }
};

$$.StringBufferImpl = {"":
 ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 isEmpty$0: function() {
  return this._length === 0;
},
 add$1: function(obj) {
  var str = $.stringTypeCheck($.toString(obj), 'is$String');
  if ($.boolConversionCheck(str == null || $.boolConversionCheck($.isEmpty(str), 'is$bool'), 'is$bool'))
    return this;
  $.add$1(this._buffer, str);
  var t1 = this._length;
  if (t1 !== (t1 | 0))
    return this.add$1$bailout(1, t1, str);
  var t3 = $.get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t1, t3);
  this._length = $.intTypeCheck(t1 + t3, 'is$$int');
  return this;
},
 add$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      str = env1;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      var str = $.stringTypeCheck($.toString(obj), 'is$String');
      if ($.boolConversionCheck(str == null || $.boolConversionCheck($.isEmpty(str), 'is$bool'), 'is$bool'))
        return this;
      $.add$1(this._buffer, str);
      var t1 = this._length;
    case 1:
      state = 0;
      var t3 = $.get$length(str);
    case 2:
      state = 0;
      this._length = $.intTypeCheck($.add(t1, t3), 'is$$int');
      return this;
  }
},
 addAll$1: function(objects) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(objects, 'is$Collection')); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  var t1 = $.ListImplementation_List(null, 'String');
  $.setRuntimeTypeInfo(t1, { 'E': 'String' });
  this._buffer = t1;
  this._length = 0;
  return this;
},
 toString$0: function() {
  if ($.get$length(this._buffer) === 0)
    return '';
  if ($.get$length(this._buffer) === 1)
    return $.index(this._buffer, 0);
  var t1 = this._buffer;
  $.listTypeCheck(t1, 'is$List');
  var result = $.stringJoinUnchecked($.StringImplementation__toJsStringArray(t1), '');
  $.clear(this._buffer);
  $.add$1(this._buffer, result);
  return result;
},
 StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
},
 is$StringBuffer: true,
 is$Object: function() { return true; }
};

$$._MatchImplementation = {"":
 ["pattern", "str", "_lib0_start", "_end", "_groups"],
 "super": "Object",
 group$1: function(index) {
  return $.index(this._groups, index);
},
 operator$index$1: function(index) {
  return this.group$1($.intTypeCheck(index, 'is$$int'));
},
 groupCount$0: function() {
  return $.sub($.get$length(this._groups), 1);
},
 is$Match: true,
 is$Object: function() { return true; }
};

$$._AllMatchesIterable = {"":
 ["_re", "_str"],
 "super": "Object",
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
},
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._AllMatchesIterator = {"":
 ["_re", "_str", "_next?", "_done"],
 "super": "Object",
 set$_next: function(v) { this._next = $.propertyTypeCheck(v, 'is$Match'); },
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC4);
  var next = this._next;
  this._next = null;
  return next;
},
 next$0$bailout: function(state, t1) {
  if (!t1)
    throw $.$$throw($.CTC4);
  var next = this._next;
  this._next = null;
  return next;
},
 hasNext$0: function() {
  if ($.boolConversionCheck(this._done, 'is$bool'))
    return false;
  else if (!(this._next == null))
    return true;
  this._next = $.propertyTypeCheck(this._re.firstMatch$1(this._str), 'is$Match');
  if (this._next == null) {
    this._done = true;
    return false;
  } else
    return true;
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$.AssertionError = {"":
 [],
 "super": "Object",
 is$Object: function() { return true; }
};

$$.NoSuchMethodError = {"":
 ["_receiver", "_functionName", "_arguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var sb = $.propertyTypeCheck($.StringBufferImpl$(''), 'is$StringBuffer');
  for (var t1 = this._arguments, i = 0; $.boolConversionCheck($.lt(i, t1.length), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if ($.boolConversionCheck($.gt(i, 0), 'is$bool'))
      sb.add$1(', ');
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    sb.add$1(t1[i]);
  }
  t1 = this._existingArgumentNames;
  if (t1 == null)
    return 'NoSuchMethodError : method not found: \'' + $.S(this._functionName) + '\'\n' + 'Receiver: ' + this._receiver + '\n' + 'Arguments: [' + $.S(sb) + ']';
  else {
    var actualParameters = $.stringTypeCheck(sb.toString$0(), 'is$String');
    sb = $.propertyTypeCheck($.StringBufferImpl$(''), 'is$StringBuffer');
    for (i = 0; $.boolConversionCheck($.lt(i, $.get$length(t1)), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      if ($.boolConversionCheck($.gt(i, 0), 'is$bool'))
        sb.add$1(', ');
      sb.add$1($.index(t1, i));
    }
    var formalParameters = $.stringTypeCheck(sb.toString$0(), 'is$String');
    t1 = this._functionName;
    return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\nReceiver: ' + this._receiver + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
  }
},
 is$Object: function() { return true; }
};

$$.IndexOutOfRangeException = {"":
 ["_value?"],
 "super": "Object",
 toString$0: function() {
  return 'IndexOutOfRangeException: ' + $.S(this._value);
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.IllegalAccessException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Attempt to modify an immutable object';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.ObjectNotClosureException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Object is not closure';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.IllegalArgumentException = {"":
 ["_arg"],
 "super": "Object",
 toString$0: function() {
  return 'Illegal argument(s): ' + $.S(this._arg);
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.StackOverflowException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.FormatException = {"":
 ["message"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + $.S(this.message);
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.NullPointerException = {"":
 ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.NoMoreElementsException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'NoMoreElementsException';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.EmptyQueueException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'EmptyQueueException';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.UnsupportedOperationException = {"":
 ["_message"],
 "super": "Object",
 toString$0: function() {
  return 'UnsupportedOperationException: ' + this._message;
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.NotImplementedException = {"":
 ["_message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this._message;
  return !(t1 == null) ? 'NotImplementedException: ' + $.S(t1) : 'NotImplementedException';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.IllegalJSRegExpException = {"":
 ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.RuntimeError = {"":
 ["message"],
 "super": "Object",
 toString$0: function() {
  return 'RuntimeError: ' + this.message;
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.FutureNotCompleteException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.FutureAlreadyCompleteException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.Object = {"":
 [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
},
 is$Object: function() { return true; }
};

$$.ListIterator = {"":
 ["i", "list"],
 "super": "Object",
 hasNext$0: function() {
  return $.lt(this.i, this.list.length);
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1, 0);
  if (!t1)
    throw $.$$throw($.NoMoreElementsException$());
  var value = this.list[this.i];
  t1 = this.i;
  if (t1 !== (t1 | 0))
    return this.next$0$bailout(2, value, t1);
  this.i = t1 + 1;
  return value;
},
 next$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      value = env0;
      t1 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
    case 1:
      state = 0;
      if (!t1)
        throw $.$$throw($.NoMoreElementsException$());
      var value = this.list[this.i];
      t1 = this.i;
    case 2:
      state = 0;
      this.i = $.intTypeCheck($.add(t1, 1), 'is$$int');
      return value;
  }
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$.StackTrace = {"":
 ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
},
 is$Function: true,
 is$Object: function() { return true; }
};

$$.TypeErrorImplementation = {"":
 ["msg"],
 "super": "Object",
 toString$0: function() {
  return this.msg;
},
 is$Object: function() { return true; }
};

$$.CastExceptionImplementation = {"":
 ["actualType", "expectedType"],
 "super": "Object",
 toString$0: function() {
  return 'CastException: Casting value of type ' + $.S(this.actualType) + ' to' + ' incompatible type ' + $.S(this.expectedType);
},
 is$Object: function() { return true; }
};

$$.ConstantMap = {"":
 ["length?", "_jsObject", "_lib4_keys?"],
 "super": "Object",
 containsValue$1: function(needle) {
  return $.some(this.getValues$0(), new $.ConstantMap_containsValue_anon(needle));
},
 containsKey$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  if (key === '__proto__')
    return false;
  return $.jsHasOwnProperty(this._jsObject, key);
},
 operator$index$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  if (!$.boolConversionCheck(this.containsKey$1(key), 'is$bool'))
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  $.forEach(this._lib4_keys, new $.ConstantMap_forEach_anon(this, f));
},
 getKeys$0: function() {
  return this._lib4_keys;
},
 getValues$0: function() {
  var result = [];
  $.forEach(this._lib4_keys, new $.ConstantMap_getValues_anon(this, result));
  return result;
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwImmutable$0: function() {
  throw $.$$throw($.CTC25);
},
 operator$indexSet$2: function(key, val) {
  $.stringTypeCheck(key, 'is$String');
  return this._throwImmutable$0();
},
 putIfAbsent$2: function(key, ifAbsent) {
  $.stringTypeCheck(key, 'is$String');
  $.functionTypeCheck(ifAbsent, 'is$Function');
  return this._throwImmutable$0();
},
 remove$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  return this._throwImmutable$0();
},
 clear$0: function() {
  return this._throwImmutable$0();
},
 is$Map: function() { return true; },
 is$Object: function() { return true; }
};

$$.MetaInfo = {"":
 ["_tag?", "_tags", "_lib4_set?"],
 "super": "Object",
 _lib4_set$2: function(arg0, arg1) { return this._lib4_set.call$2(arg0, arg1); },
 is$MetaInfo: true
};

$$.StringMatch = {"":
 ["_lib4_start", "str", "pattern"],
 "super": "Object",
 operator$index$1: function(g) {
  return this.group$1($.intTypeCheck(g, 'is$$int'));
},
 groupCount$0: function() {
  return 0;
},
 group$1: function(group_) {
  if (!(group_ === 0))
    throw $.$$throw($.IndexOutOfRangeException$(group_));
  return this.pattern;
},
 is$Match: true,
 is$Object: function() { return true; }
};

$$._AbstractWorkerEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._AudioContextEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); },
 is$Events: true,
 is$Object: function() { return true; }
};

$$._BatteryManagerEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._BodyElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 is$Events: true,
 is$Object: function() { return true; }
};

$$._DOMApplicationCacheEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$progress: function() {
  return this.operator$index$1('progress');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._DedicatedWorkerContextEventsImpl = {"":
 ["_ptr"],
 "super": "_WorkerContextEventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._DocumentEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 get$select: function() {
  return this.operator$index$1('select');
},
 select$1: function(arg0) { return this.get$select().call$1(arg0); },
 get$touchMove: function() {
  return this.operator$index$1('touchmove');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._ElementAttributeMap = {"":
 ["_lib_element?"],
 "super": "Object",
 containsValue$1: function(value) {
  $.stringTypeCheck(value, 'is$String');
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.containsValue$1$bailout(1, value, attributes, 0);
  var len = attributes.length;
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= attributes.length)
      throw $.ioore(i);
    var t1 = attributes[i].get$value();
    if (value == null ? t1 == null : value === t1)
      return true;
  }
  return false;
},
 containsValue$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var value = env0;
      attributes = env1;
      break;
    case 2:
      len = env0;
      value = env1;
      attributes = env2;
      break;
  }
  switch (state) {
    case 0:
      $.stringTypeCheck(value, 'is$String');
      var attributes = this._lib_element.get$$$dom_attributes();
    case 1:
      state = 0;
      var len = $.intTypeCheck($.get$length(attributes), 'is$$int');
    case 2:
      state = 0;
      var i = 0;
      for (; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
        var t1 = $.index(attributes, i).get$value();
        if (value == null ? t1 == null : value === t1)
          return true;
      }
      return false;
  }
},
 containsKey$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  return this._lib_element.$dom_hasAttribute$1(key);
},
 operator$index$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  return this._lib_element.$dom_getAttribute$1(key);
},
 operator$indexSet$2: function(key, value) {
  $.stringTypeCheck(key, 'is$String');
  this._lib_element.$dom_setAttribute$2(key, $.S(value));
},
 putIfAbsent$2: function(key, ifAbsent) {
  $.stringTypeCheck(key, 'is$String');
  $.functionTypeCheck(ifAbsent, 'is$Function');
  if (!$.boolConversionCheck(this.containsKey$1(key), 'is$bool'))
    this.operator$indexSet$2(key, ifAbsent.call$0());
  return this.operator$index$1(key);
},
 remove$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  var t1 = this._lib_element;
  var value = $.stringTypeCheck(t1.$dom_getAttribute$1(key), 'is$String');
  t1.$dom_removeAttribute$1(key);
  return value;
},
 clear$0: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.clear$0$bailout(1, attributes, 0);
  var i = attributes.length - 1;
  for (; $.boolConversionCheck($.ge(i, 0), 'is$bool'); i = $.intTypeCheck($.sub(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= attributes.length)
      throw $.ioore(i);
    this.remove$1(attributes[i].get$name());
  }
},
 clear$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      attributes = env0;
      break;
    case 2:
      i = env0;
      attributes = env1;
      break;
  }
  switch (state) {
    case 0:
      var attributes = this._lib_element.get$$$dom_attributes();
    case 1:
      state = 0;
      var i = $.intTypeCheck($.sub($.get$length(attributes), 1), 'is$$int');
    case 2:
      state = 0;
      for (; $.boolConversionCheck($.ge(i, 0), 'is$bool'); i = $.intTypeCheck($.sub(i, 1), 'is$$int'))
        this.remove$1($.index(attributes, i).get$name());
  }
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.forEach$1$bailout(1, f, attributes, 0);
  var len = attributes.length;
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= attributes.length)
      throw $.ioore(i);
    var item = attributes[i];
    f.call$2(item.get$name(), item.get$value());
  }
},
 forEach$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var f = env0;
      attributes = env1;
      break;
    case 2:
      len = env0;
      f = env1;
      attributes = env2;
      break;
  }
  switch (state) {
    case 0:
      $.functionTypeCheck(f, 'is$Function');
      var attributes = this._lib_element.get$$$dom_attributes();
    case 1:
      state = 0;
      var len = $.intTypeCheck($.get$length(attributes), 'is$$int');
    case 2:
      state = 0;
      var i = 0;
      for (; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
        var item = $.index(attributes, i);
        f.call$2(item.get$name(), item.get$value());
      }
  }
},
 getKeys$0: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.getKeys$0$bailout(1, attributes, 0, 0);
  var keys = $.ListImplementation_List(attributes.length, 'String');
  $.setRuntimeTypeInfo(keys, { 'E': 'String' });
  var len = attributes.length;
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= attributes.length)
      throw $.ioore(i);
    var t1 = attributes[i].get$name();
    if (i < 0 || i >= keys.length)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 getKeys$0$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      attributes = env0;
      break;
    case 2:
      keys = env0;
      len = env1;
      attributes = env2;
      break;
  }
  switch (state) {
    case 0:
      var attributes = this._lib_element.get$$$dom_attributes();
    case 1:
      state = 0;
      var keys = $.ListImplementation_List($.get$length(attributes), 'String');
      $.setRuntimeTypeInfo(keys, { 'E': 'String' });
      var len = $.intTypeCheck($.get$length(attributes), 'is$$int');
    case 2:
      state = 0;
      var i = 0;
      for (; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
        var t1 = $.index(attributes, i).get$name();
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= keys.length)
          throw $.ioore(i);
        keys[i] = t1;
      }
      return keys;
  }
},
 getValues$0: function() {
  var attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.getValues$0$bailout(1, attributes, 0, 0);
  var values = $.ListImplementation_List(attributes.length, 'String');
  $.setRuntimeTypeInfo(values, { 'E': 'String' });
  var len = attributes.length;
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= attributes.length)
      throw $.ioore(i);
    var t1 = attributes[i].get$value();
    if (i < 0 || i >= values.length)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 getValues$0$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      attributes = env0;
      break;
    case 2:
      values = env0;
      len = env1;
      attributes = env2;
      break;
  }
  switch (state) {
    case 0:
      var attributes = this._lib_element.get$$$dom_attributes();
    case 1:
      state = 0;
      var values = $.ListImplementation_List($.get$length(attributes), 'String');
      $.setRuntimeTypeInfo(values, { 'E': 'String' });
      var len = $.intTypeCheck($.get$length(attributes), 'is$$int');
    case 2:
      state = 0;
      var i = 0;
      for (; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
        var t1 = $.index(attributes, i).get$value();
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= values.length)
          throw $.ioore(i);
        values[i] = t1;
      }
      return values;
  }
},
 get$length: function() {
  return $.get$length(this._lib_element.get$$$dom_attributes());
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 is$Map: function() { return true; },
 is$Object: function() { return true; }
};

$$._ElementEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 get$select: function() {
  return this.operator$index$1('select');
},
 select$1: function(arg0) { return this.get$select().call$1(arg0); },
 get$touchMove: function() {
  return this.operator$index$1('touchmove');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._EventSourceEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._EventsImpl = {"":
 ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  $.stringTypeCheck(type, 'is$String');
  return $._EventListenerListImpl$(this._ptr, type);
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._EventListenerListImpl = {"":
 ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._add$2($.functionTypeCheck(listener, 'is$EventListener'), useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._lib_remove$2($.functionTypeCheck(listener, 'is$EventListener'), useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
},
 _add$2: function(listener, useCapture) {
  this._ptr.$dom_addEventListener$3(this._type, listener, useCapture);
},
 _lib_remove$2: function(listener, useCapture) {
  this._ptr.$dom_removeEventListener$3(this._type, listener, useCapture);
},
 is$Object: function() { return true; }
};

$$._FileReaderEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$progress: function() {
  return this.operator$index$1('progress');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._FileWriterEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$progress: function() {
  return this.operator$index$1('progress');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._FrameSetElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 is$Events: true,
 is$Object: function() { return true; }
};

$$._HttpRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$progress: function() {
  return this.operator$index$1('progress');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._HttpRequestUploadEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$progress: function() {
  return this.operator$index$1('progress');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._IDBDatabaseEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._IDBOpenDBRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_IDBRequestEventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._IDBRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._IDBTransactionEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); },
 get$error: function() {
  return this.operator$index$1('error');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._IDBVersionChangeRequestEventsImpl = {"":
 ["_ptr"],
 "super": "_IDBRequestEventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._InputElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._JavaScriptAudioNodeEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._MediaElementEventsImpl = {"":
 ["_ptr"],
 "super": "_ElementEventsImpl",
 get$progress: function() {
  return this.operator$index$1('progress');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._MediaStreamEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._MediaStreamTrackEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._MediaStreamTrackListEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._MessagePortEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._ListWrapper = {"":
 [],
 "super": "Object",
 iterator$0: function() {
  return $.iterator(this._lib_list);
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $.forEach(this._lib_list, f);
},
 some$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $.some(this._lib_list, f);
},
 isEmpty$0: function() {
  return $.isEmpty(this._lib_list);
},
 get$length: function() {
  return $.get$length(this._lib_list);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  return $.index(this._lib_list, index);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.indexSet(this._lib_list, index, value);
},
 set$length: function(newLength) {
  $.intTypeCheck(newLength, 'is$$int');
  $.set$length(this._lib_list, newLength);
},
 add$1: function(value) {
  return $.add$1(this._lib_list, value);
},
 addLast$1: function(value) {
  return $.addLast(this._lib_list, value);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  return $.addAll(this._lib_list, collection);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._lib_list, element, start);
},
 clear$0: function() {
  return $.clear(this._lib_list);
},
 removeLast$0: function() {
  return $.removeLast(this._lib_list);
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this._lib_list, start, rangeLength);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  return $.removeRange(this._lib_list, start, rangeLength);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  return $.insertRange$3(this._lib_list, start, rangeLength, initialValue);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._NodeListWrapper = {"":
 ["_lib_list"],
 "super": "_ListWrapper",
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($.getRange(this._lib_list, start, rangeLength));
},
 is$NodeList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._NotificationEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._PeerConnection00EventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._RTCPeerConnectionEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._SVGElementInstanceEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 get$select: function() {
  return this.operator$index$1('select');
},
 select$1: function(arg0) { return this.get$select().call$1(arg0); },
 is$Events: true,
 is$Object: function() { return true; }
};

$$._SharedWorkerContextEventsImpl = {"":
 ["_ptr"],
 "super": "_WorkerContextEventsImpl",
 get$connect: function() {
  return this.operator$index$1('connect');
},
 connect$2: function(arg0, arg1) { return this.get$connect().call$2(arg0, arg1); },
 is$Events: true,
 is$Object: function() { return true; }
};

$$._SpeechRecognitionEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._TextTrackEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._TextTrackCueEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._TextTrackListEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._WebSocketEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._WindowEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 load$0: function() { return this.get$load().call$0(); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$progress: function() {
  return this.operator$index$1('progress');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 get$select: function() {
  return this.operator$index$1('select');
},
 select$1: function(arg0) { return this.get$select().call$1(arg0); },
 get$touchMove: function() {
  return this.operator$index$1('touchmove');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._WorkerEventsImpl = {"":
 ["_ptr"],
 "super": "_AbstractWorkerEventsImpl",
 is$Events: true,
 is$Object: function() { return true; }
};

$$._WorkerContextEventsImpl = {"":
 ["_ptr"],
 "super": "_EventsImpl",
 get$error: function() {
  return this.operator$index$1('error');
},
 is$Events: true,
 is$Object: function() { return true; }
};

$$._DOMWindowCrossFrameImpl = {"":
 ["_window"],
 "super": "Object",
 get$top: function() {
  return $._DOMWindowCrossFrameImpl__createSafe($._DOMWindowCrossFrameImpl__top(this._window));
},
 close$0: function() {
  return $._DOMWindowCrossFrameImpl__close(this._window);
},
 is$Window: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
};

$$._FixedSizeListIterator = {"":
 ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 hasNext$0: function() {
  return $.gt(this._lib_length, this._pos);
}
};

$$._VariableSizeListIterator = {"":
 [],
 "super": "Object",
 hasNext$0: function() {
  var t1 = $.get$length(this._array);
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1, 0);
  var t3 = this._pos;
  if (t3 !== (t3 | 0))
    return this.hasNext$0$bailout(2, t3, t1);
  return t1 > t3;
},
 hasNext$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env0;
      t1 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.get$length(this._array);
    case 1:
      state = 0;
      var t3 = this._pos;
    case 2:
      state = 0;
      return $.gt(t1, t3);
  }
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1, 0);
  if (!t1)
    throw $.$$throw($.CTC4);
  t1 = this._array;
  if (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior())
    return this.next$0$bailout(2, t1, 0);
  var t3 = this._pos;
  if (t3 !== (t3 | 0))
    return this.next$0$bailout(3, t1, t3);
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
    case 3:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
    case 1:
      state = 0;
      if (!t1)
        throw $.$$throw($.CTC4);
      t1 = this._array;
    case 2:
      state = 0;
      var t3 = this._pos;
    case 3:
      state = 0;
      this._pos = $.intTypeCheck($.add(t3, 1), 'is$$int');
      return $.index(t1, t3);
  }
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$._Manager = {"":
 ["nextIsolateId?", "currentManagerId?", "nextManagerId", "currentContext?", "rootContext?", "topEventLoop?", "fromCommandLine?", "isWorker?", "supportsWorkers", "isolates?", "mainManager?", "managers?"],
 "super": "Object",
 set$nextIsolateId: function(v) { this.nextIsolateId = $.intTypeCheck(v, 'is$$int'); },
 set$currentContext: function(v) { this.currentContext = $.propertyTypeCheck(v, 'is$_IsolateContext'); },
 set$rootContext: function(v) { this.rootContext = $.propertyTypeCheck(v, 'is$_IsolateContext'); },
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
    this.isWorker = $isWorker;
    this.supportsWorkers = $supportsWorkers;
    this.fromCommandLine = typeof(window) == 'undefined';
  
},
 _nativeInitWorkerMessageHandler$0: function() {
    $globalThis.onmessage = function (e) {
      _IsolateNatives._processWorkerMessage(this.mainManager, e);
    }
  
},
 maybeCloseWorker$0: function() {
  if ($.boolConversionCheck($.isEmpty(this.isolates), 'is$bool'))
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.callTypeCheck($.HashMapImplementation$('int', '_IsolateContext'), 'is$Map');
  this.managers = $.callTypeCheck($.HashMapImplementation$('int', '_ManagerStub'), 'is$Map');
  if ($.boolConversionCheck(this.isWorker, 'is$bool')) {
    this.mainManager = $.callTypeCheck($._MainManagerStub$(), 'is$_ManagerStub');
    this._nativeInitWorkerMessageHandler$0();
  }
},
 is$_Manager: true
};

$$._IsolateContext = {"":
 ["id?", "ports?", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
$initGlobals(this);
},
 eval$1: function(code) {
  $.functionTypeCheck(code, 'is$Function');
  var old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  var result = null;
  try {
    result = code.call$0();
  } finally {
    var t1 = old;
    $._globalState().set$currentContext(t1);
    t1 = old;
    if (!(t1 == null))
      t1._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
$setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  $.intTypeCheck(portId, 'is$$int');
  $.propertyTypeCheck(port, 'is$ReceivePort');
  var t1 = this.ports;
  if ($.boolConversionCheck(t1.containsKey$1(portId), 'is$bool'))
    throw $.$$throw($.ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(t1, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  $.intTypeCheck(portId, 'is$$int');
  var t1 = this.ports;
  t1.remove$1(portId);
  if ($.boolConversionCheck($.isEmpty(t1), 'is$bool'))
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1 = $._globalState();
  var t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = $.intTypeCheck(t2, 'is$$int');
  this.ports = $.callTypeCheck($.HashMapImplementation$('int', 'ReceivePort'), 'is$Map');
  this.initGlobals$0();
},
 is$_IsolateContext: true
};

$$._EventLoop = {"":
 ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.boolConversionCheck($.isEmpty(t1), 'is$bool'))
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($.boolConversionCheck($._globalState().get$isWorker(), 'is$bool'))
      $._globalState().maybeCloseWorker$0();
    else {
      if (!($._globalState().get$rootContext() == null)) {
        if ($.boolConversionCheck($._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()), 'is$bool'))
          var t1 = $.boolConversionCheck($.boolConversionCheck($._globalState().get$fromCommandLine(), 'is$bool') && $.boolConversionCheck($.isEmpty($._globalState().get$rootContext().get$ports()), 'is$bool'), 'is$bool');
        else
          t1 = false;
        $.boolConversionCheck(t1, 'is$bool');
      } else
        t1 = false;
      if ($.boolConversionCheck(t1, 'is$bool'))
        throw $.$$throw($.ExceptionImplementation$('Program exited with open ReceivePorts.'));
    }
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; $.boolConversionCheck(this.runIteration$0(), 'is$bool');)
      ;
},
 run$0: function() {
  if (!$.boolConversionCheck($._globalState().get$isWorker(), 'is$bool'))
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      var t1 = $.unwrapException(exception);
      var e = t1;
      var trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

},
 is$_EventLoop: true
};

$$._IsolateEvent = {"":
 ["isolate", "fn", "message"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"":
 [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
$globalThis.postMessage(msg);
},
 is$_ManagerStub: function() { return true; },
 is$Object: function() { return true; }
};

$$._BaseSendPort = {"":
 ["_isolateId?"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  if (!(replyTo == null))
    var t1 = $.boolConversionCheck(!(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort), 'is$bool');
  else
    t1 = false;
  if ($.boolConversionCheck(t1, 'is$bool'))
    throw $.$$throw($.ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer = $.CompleterImpl$();
  var port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(port, completer));
  return completer.get$future();
},
 is$SendPort: true,
 is$Object: function() { return true; }
};

$$._NativeJsSendPort = {"":
 ["_receivePort?", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.boolConversionCheck($.eq(this._receivePort, other._receivePort), 'is$bool');
},
 hashCode$0: function() {
  return this._receivePort.get$_lib6_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true,
 is$Object: function() { return true; }
};

$$._WorkerSendPort = {"":
 ["_workerId?", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort) {
    var t1 = this._workerId;
    var t2 = other._workerId;
    if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
      t1 = this._isolateId;
      t2 = other._isolateId;
      if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
        t1 = this._receivePortId;
        t2 = other._receivePortId;
        t2 = $.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool');
        t1 = t2;
      } else
        t1 = false;
      $.boolConversionCheck(t1, 'is$bool');
    } else
      t1 = false;
    $.boolConversionCheck(t1, 'is$bool');
  } else
    t1 = false;
  return t1;
},
 hashCode$0: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true,
 is$Object: function() { return true; }
};

$$._ReceivePortImpl = {"":
 ["_lib6_id?", "_callback?"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = $.functionTypeCheck($.functionTypeCheck(onMessage, 'is$Function'), 'is$Function');
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._lib6_id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._lib6_id, this);
},
 is$_ReceivePortImpl: true,
 is$ReceivePort: true,
 is$Object: function() { return true; }
};

$$._PendingSendPortFinder = {"":
 ["ports?", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  $.listTypeCheck(list, 'is$List');
  var t1 = this._visited;
  if (!($.index(t1, list) == null))
    return;
  $.indexSet(t1, list, true);
  $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  $.callTypeCheck(map, 'is$Map');
  var t1 = this._visited;
  if (!($.index(t1, map) == null))
    return;
  $.indexSet(t1, map, true);
  $.forEach(map.getValues$0(), new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._visited = $.propertyTypeCheck($._JsVisitedMap$(), 'is$_MessageTraverserVisitedMap');
}
};

$$._JsSerializer = {"":
 ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  $.propertyTypeCheck(x, 'is$SendPort');
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_lib6_id()];
},
 visitWorkerSendPort$1: function(port) {
  return ['sendport', port._workerId, port._isolateId, port._receivePortId];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $.propertyTypeCheck($._JsVisitedMap$(), 'is$_MessageTraverserVisitedMap');
}
};

$$._JsCopier = {"":
 ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  $.propertyTypeCheck(x, 'is$SendPort');
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $.propertyTypeCheck($._JsVisitedMap$(), 'is$_MessageTraverserVisitedMap');
}
};

$$._JsDeserializer = {"":
 ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  $.listTypeCheck(x, 'is$List');
  var managerId = $.intTypeCheck($.index(x, 1), 'is$$int');
  var isolateId = $.intTypeCheck($.index(x, 2), 'is$$int');
  var receivePortId = $.intTypeCheck($.index(x, 3), 'is$$int');
  var t1 = $._globalState().get$currentManagerId();
  if (managerId == null ? t1 == null : managerId === t1) {
    var isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"":
 ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return this._getAttachedInfo$1(object);
},
 operator$indexSet$2: function(object, info) {
  $.add$1(this.tagged, object);
  this._setAttachedInfo$2(object, info);
},
 reset$0: function() {
  $.assert(this.tagged == null);
  this.tagged = $.ListImplementation_List(null);
},
 cleanup$0: function() {
  var length$ = $.intTypeCheck($.get$length(this.tagged), 'is$$int');
  if (length$ !== (length$ | 0))
    return this.cleanup$0$bailout(1, length$);
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 cleanup$0$bailout: function(state, length$) {
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 _clearAttachedInfo$1: function(o) {
o['__MessageTraverser__attached_info__'] = (void 0);
},
 _setAttachedInfo$2: function(o, info) {
o['__MessageTraverser__attached_info__'] = info;
},
 _getAttachedInfo$1: function(o) {
return o['__MessageTraverser__attached_info__'];
},
 is$_MessageTraverserVisitedMap: true,
 is$Object: function() { return true; }
};

$$._MessageTraverserVisitedMap = {"":
 [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
},
 is$_MessageTraverserVisitedMap: true
};

$$._MessageTraverser = {"":
 [],
 "super": "Object",
 traverse$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  var t1 = this._visited;
  t1.reset$0();
  var result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    t1.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"":
 [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  $.listTypeCheck(list, 'is$List');
  var t1 = this._visited;
  var copy = $.listTypeCheck(t1.operator$index$1(list), 'is$List');
  if (!(copy == null))
    return copy;
  var len = $.intTypeCheck($.get$length(list), 'is$$int');
  if (len !== (len | 0))
    return this.visitList$1$bailout(1, len, list, t1);
  copy = $.ListImplementation_List(len);
  t1.operator$indexSet$2(list, copy);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitList$1$bailout: function(state, len, list, t1) {
  var copy = $.ListImplementation_List(len);
  $.indexSet(t1, list, copy);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1 = {};
  $.callTypeCheck(map, 'is$Map');
  var t2 = this._visited;
  t1.copy_10 = $.callTypeCheck($.index(t2, map), 'is$Map');
  var t3 = t1.copy_10;
  if (!(t3 == null))
    return t3;
  t1.copy_10 = $.callTypeCheck($.HashMapImplementation$(), 'is$Map');
  $.indexSet(t2, map, t1.copy_10);
  $.forEach(map, new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"":
 [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  $.listTypeCheck(list, 'is$List');
  var t1 = this._visited;
  var copyId = $.intTypeCheck($.index(t1, list), 'is$$int');
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = $.intTypeCheck($.add(id, 1), 'is$$int');
  $.intTypeCheck(id, 'is$$int');
  $.indexSet(t1, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  $.callTypeCheck(map, 'is$Map');
  var t1 = this._visited;
  var copyId = $.intTypeCheck($.index(t1, map), 'is$$int');
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = $.intTypeCheck($.add(id, 1), 'is$$int');
  $.intTypeCheck(id, 'is$$int');
  $.indexSet(t1, map, id);
  return ['map', id, this._serializeList$1(map.getKeys$0()), this._serializeList$1(map.getValues$0())];
},
 _serializeList$1: function(list) {
  $.listTypeCheck(list, 'is$List');
  var len = $.intTypeCheck($.get$length(list), 'is$$int');
  if (len !== (len | 0))
    return this._serializeList$1$bailout(1, list, len);
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
},
 _serializeList$1$bailout: function(state, list, len) {
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"":
 [],
 "super": "Object",
 deserialize$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  this._deserialized = $.callTypeCheck($.HashMapImplementation$(), 'is$Map');
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  $.assert(typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()));
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.intTypeCheck($.index($.listTypeCheck(x, 'is$List'), 1), 'is$$int');
  var result = $.index(this._deserialized, id);
  $.assert(!(result == null));
  return result;
},
 _deserializeList$1: function(x) {
  $.listTypeCheck(x, 'is$List');
  var id = $.intTypeCheck($.index(x, 1), 'is$$int');
  var dartList = $.listTypeCheck($.index(x, 2), 'is$List');
  $.indexSet(this._deserialized, id, dartList);
  var len = $.intTypeCheck($.get$length(dartList), 'is$$int');
  if (len !== (len | 0))
    return this._deserializeList$1$bailout(1, len, dartList);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeList$1$bailout: function(state, len, dartList) {
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  $.listTypeCheck(x, 'is$List');
  var result = $.callTypeCheck($.HashMapImplementation$(), 'is$Map');
  var id = $.intTypeCheck($.index(x, 1), 'is$$int');
  $.indexSet(this._deserialized, id, result);
  var keys = $.listTypeCheck($.index(x, 2), 'is$List');
  var values = $.listTypeCheck($.index(x, 3), 'is$List');
  var len = $.intTypeCheck($.get$length(keys), 'is$$int');
  if (len !== (len | 0))
    return this._deserializeMap$1$bailout(1, len, keys, values, result);
  $.assert(len === $.get$length(values));
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
  return result;
},
 _deserializeMap$1$bailout: function(state, len, keys, values, result) {
  var t2 = $.get$length(values);
  $.assert(len == null ? t2 == null : len === t2);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
  return result;
},
 deserializeObject$1: function(x) {
  $.listTypeCheck(x, 'is$List');
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"":
 ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  $.intTypeCheck(milliSeconds, 'is$$int');
  $.functionTypeCheck(callback, 'is$Function');
  this._handle = $.intTypeCheck($._window().setInterval$2(new $.anon2(this, callback), milliSeconds), 'is$$int');
},
 _Timer$2: function(milliSeconds, callback) {
  $.intTypeCheck(milliSeconds, 'is$$int');
  $.functionTypeCheck(callback, 'is$Function');
  this._handle = $.intTypeCheck($._window().setTimeout$2(new $.anon1(this, callback), milliSeconds), 'is$$int');
},
 is$Object: function() { return true; }
};

$$._Random = {"":
 [],
 "super": "Object",
 nextInt$1: function(max) {
  if (max < 0)
    throw $.$$throw($.IllegalArgumentException$('negative max: ' + $.S(max)));
  if (max > 4294967295)
    max = 4294967295;
  return (Math.random() * max) >>> 0;
},
 is$Random: true,
 is$Object: function() { return true; }
};

$$.DisposableImpl = {"":
 [],
 "super": "Object",
 get$isDisposed: function() {
  return this._disposed;
},
 is$Object: function() { return true; }
};

$$.GlobalId = {"":
 ["id?", "_hashCode"],
 "super": "Object",
 hashCode$0: function() {
  return this._hashCode;
},
 operator$eq$1: function(other) {
  $.propertyTypeCheck(other, 'is$GlobalId');
  return !(other == null) && $.boolConversionCheck($.eq(other.get$id(), this.id), 'is$bool');
},
 is$GlobalId: true,
 is$Object: function() { return true; }
};

$$.Tuple = {"":
 ["Item1?", "Item2?"],
 "super": "Object",
 operator$eq$1: function(other) {
  $.propertyTypeCheck(other, 'is$Tuple');
  if (!(other == null))
    var t1 = $.boolConversionCheck($.boolConversionCheck($.eq(this.Item1, other.get$Item1()), 'is$bool') && $.boolConversionCheck($.eq(this.Item2, other.get$Item2()), 'is$bool'), 'is$bool');
  else
    t1 = false;
  return t1;
},
 toString$0: function() {
  return 'Tuple: Item1: ' + $.S(this.Item1) + ', Item2: ' + $.S(this.Item2);
},
 is$Tuple: true
};

$$.NullArgumentException = {"":
 ["theArg", "_arg"],
 "super": "IllegalArgumentException",
 toString$0: function() {
  return 'Null argument(s): ' + this.theArg;
}
};

$$.InvalidOperationException = {"":
 ["message"],
 "super": "Object",
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.DetailedIllegalArgumentException = {"":
 ["argument", "message", "_arg"],
 "super": "IllegalArgumentException",
 toString$0: function() {
  var t1 = this.message;
  var t2 = $.boolConversionCheck(t1 == null || $.boolConversionCheck($.eq($.get$length(t1), 0), 'is$bool'), 'is$bool');
  var t3 = this.argument;
  if (t2)
    return 'Illegal argument: ' + t3;
  else
    return 'Illegal argument: ' + t3 + ' -- ' + $.S(t1);
}
};

$$.Enumerable = {"":
 [],
 "super": "Object",
 contains$1: function(item) {
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    if ($.boolConversionCheck($.eq(t1.next$0(), item), 'is$bool'))
      return true;
  return false;
},
 some$1: function(f) {
  $.functionTypeCheck(f, 'is$Func1');
  $.requireArgumentNotNull(f, 'f');
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    if ($.boolConversionCheck(f.call$1(t1.next$0()), 'is$bool'))
      return true;
  return false;
},
 join$1: function(separator) {
  var sb = $.propertyTypeCheck($.StringBufferImpl$(''), 'is$StringBuffer');
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    if ($.boolConversionCheck($.gt($.get$length(sb), 0), 'is$bool'))
      sb.add$1(separator);
    sb.add$1(t2);
  }
  return sb.toString$0();
},
 join$0: function() {
  return this.join$1(', ')
},
 select$1: function(f) {
  $.functionTypeCheck(f, 'is$Func1');
  $.requireArgumentNotNull(f, 'f');
  return $._FuncEnumerable$(this, new $.Enumerable_select_anon(this, f));
},
 where$1: function(f) {
  $.functionTypeCheck(f, 'is$Func1');
  $.requireArgumentNotNull(f, 'f');
  return $._FuncEnumerable$(this, new $.Enumerable_where_anon(this, f));
},
 firstOrDefault$2: function(f, defaultValue) {
  $.functionTypeCheck(f, 'is$Func1');
  if (f == null)
    f = $.functionTypeCheck(new $.Enumerable_firstOrDefault_anon(), 'is$Func1');
  var iter = $._WhereIterator$(this.iterator$0(), f, $.getRuntimeTypeInfo(this).T);
  if (!$.boolConversionCheck(iter.hasNext$0(), 'is$bool'))
    return defaultValue;
  return iter.next$0();
},
 firstOrDefault$1: function(f) {
  return this.firstOrDefault$2(f,null)
},
 single$1: function(f) {
  if (f == null)
    f = $.functionTypeCheck(new $.Enumerable_single_anon(), 'is$Func1');
  var iter = $._WhereIterator$(this.iterator$0(), f, $.getRuntimeTypeInfo(this).T);
  if (!$.boolConversionCheck(iter.hasNext$0(), 'is$bool'))
    throw $.$$throw($.CTC16);
  var value = iter.next$0();
  if ($.boolConversionCheck(iter.hasNext$0(), 'is$bool'))
    throw $.$$throw($.CTC17);
  return value;
},
 single$0: function() {
  return this.single$1(null)
},
 toReadOnlyCollection$0: function() {
  return $.ReadOnlyCollection$(this, $.getRuntimeTypeInfo(this).T);
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Action1');
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    f.call$1(t1.next$0());
},
 toList$0: function() {
  var t1 = $.ListImplementation_List$from(this, $.getRuntimeTypeInfo(this).T);
  $.setRuntimeTypeInfo(t1, { 'E': $.getRuntimeTypeInfo(this).T });
  return t1;
},
 toString$0: function() {
  return '[' + $.S(this.join$0()) + ']';
},
 is$Enumerable: true,
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._SimpleEnumerable = {"":
 ["_source"],
 "super": "Enumerable",
 iterator$0: function() {
  return $.iterator(this._source);
}
};

$$._FuncEnumerable = {"":
 ["_source", "_func"],
 "super": "Enumerable",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 iterator$0: function() {
  return this._func$1($.iterator(this._source));
}
};

$$._SelectIterator = {"":
 ["_source", "_func"],
 "super": "Object",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 hasNext$0: function() {
  return this._source.hasNext$0();
},
 next$0: function() {
  return this._func$1(this._source.next$0());
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$._WhereIterator = {"":
 ["_source", "_func", "_lib1_next?", "_current"],
 "super": "Object",
 set$_lib1_next: function(v) { this._lib1_next = $.boolTypeCheck(v, 'is$bool'); },
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 hasNext$0: function() {
  if (this._lib1_next == null) {
    this._lib1_next = false;
    for (var t1 = this._source; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
      this._current = t1.next$0();
      if ($.boolConversionCheck(this._func$1(this._current), 'is$bool')) {
        this._lib1_next = true;
        break;
      }
    }
  }
  return this._lib1_next;
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC4);
  $.assert(this._func$1(this._current));
  this._lib1_next = null;
  return this._current;
},
 next$0$bailout: function(state, t1) {
  if (!t1)
    throw $.$$throw($.CTC4);
  $.assert(this._func$1(this._current));
  this._lib1_next = null;
  return this._current;
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$.NumberEnumerable = {"":
 [],
 "super": "Enumerable"
};

$$._RangeIterable = {"":
 ["_start", "_count"],
 "super": "NumberEnumerable",
 iterator$0: function() {
  return $._RangeIterator$(this._start, this._count);
}
};

$$._RangeIterator = {"":
 ["_start", "_count", "_current"],
 "super": "Object",
 hasNext$0: function() {
  return $.lt(this._current, this._count);
},
 next$0: function() {
  $.assert(this.hasNext$0());
  var t1 = this._start;
  if (t1 !== (t1 | 0))
    return this.next$0$bailout(1, t1, 0);
  var t3 = this._current;
  if (t3 !== (t3 | 0))
    return this.next$0$bailout(2, t1, t3);
  var val = t1 + t3;
  this._current = t3 + 1;
  return val;
},
 next$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
    case 3:
      val = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      $.assert(this.hasNext$0());
      var t1 = this._start;
    case 1:
      state = 0;
      var t3 = this._current;
    case 2:
      state = 0;
      var val = $.add(t1, t3);
      t3 = this._current;
    case 3:
      state = 0;
      this._current = $.intTypeCheck($.add(t3, 1), 'is$$int');
      return val;
  }
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$.IndexIterator = {"":
 ["_indexer", "_lib1_length", "_lib1_pos"],
 "super": "Object",
 hasNext$0: function() {
  return $.gt(this._lib1_length, this._lib1_pos);
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC4);
  t1 = this._lib1_pos;
  if (t1 !== (t1 | 0))
    return this.next$0$bailout(2, t1);
  this._lib1_pos = t1 + 1;
  return this._indexer$1(t1);
},
 next$0$bailout: function(state, env0) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
    case 1:
      state = 0;
      if (!t1)
        throw $.$$throw($.CTC4);
      t1 = this._lib1_pos;
    case 2:
      state = 0;
      this._lib1_pos = $.intTypeCheck($.add(t1, 1), 'is$$int');
      return this._indexer$1(t1);
  }
},
 _indexer$1: function(arg0) { return this._indexer.call$1(arg0); },
 IndexIterator$2: function(length$, indexer) {
  $.intTypeCheck(length$, 'is$$int');
  $.functionTypeCheck(indexer, 'is$Func1');
  $.requireArgumentNotNull(this._indexer, '_indexer');
  $.assert($.ge(this._lib1_length, 0));
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$.ListBase = {"":
 [],
 "super": "Enumerable",
 iterator$0: function() {
  return $.IndexIterator$($.get$length(this), new $.ListBase_iterator_anon(this), $.getRuntimeTypeInfo(this).T);
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  for (var i = 0; $.lt(i, $.get$length(this)); ++i)
    f.call$1(this.operator$index$1(i));
},
 some$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  for (var i = 0; $.lt(i, $.get$length(this)); ++i)
    if ($.boolConversionCheck(f.call$1(this.operator$index$1(i)), 'is$bool'))
      return true;
  return false;
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 get$length: function() {
  throw $.$$throw($.CTC18);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  throw $.$$throw($.CTC18);
},
 indexOf$2: function(element, start) {
  if (start !== (start | 0))
    return this.indexOf$2$bailout(1, element, start);
  for (var i = start; $.lt(i, $.get$length(this)); ++i)
    if ($.boolConversionCheck($.eq(this.operator$index$1(i), element), 'is$bool'))
      return i;
  return -1;
},
 indexOf$2$bailout: function(state, element, start) {
  for (var i = start; $.boolConversionCheck($.lt(i, $.get$length(this)), 'is$bool'); i = $.add(i, 1))
    if ($.boolConversionCheck($.eq(this.operator$index$1(i), element), 'is$bool'))
      return i;
  return -1;
},
 getRange$2: function(start, itemCount) {
  $.requireArgument(itemCount >= 0, 'count', null);
  var lastIndex = start + itemCount - 1;
  if (itemCount > 0)
    if (start < 0)
      throw $.$$throw($.IndexOutOfRangeException$(start));
    else if ($.ge(lastIndex, $.get$length(this)))
      throw $.$$throw($.IndexOutOfRangeException$(lastIndex));
  var list = $.ListImplementation_List(null, $.getRuntimeTypeInfo(this).T);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).T });
  for (var i = start; i <= lastIndex; ++i)
    list.push(this.operator$index$1(i));
  return list;
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  throw $.$$throw($.CTC19);
},
 add$1: function(value) {
  throw $.$$throw($.CTC19);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC19);
},
 addAll$1: function(value) {
  $.listSuperNativeTypeCheck(value, 'is$Collection');
  throw $.$$throw($.CTC19);
},
 clear$0: function() {
  throw $.$$throw($.CTC19);
},
 removeLast$0: function() {
  throw $.$$throw($.CTC19);
},
 removeRange$2: function(start, length$) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC19);
},
 insertRange$3: function(start, length$, initialValue) {
  $.intTypeCheck(length$, 'is$$int');
  throw $.$$throw($.CTC19);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$.ReadOnlyCollection = {"":
 ["_items"],
 "super": "ListBase",
 get$length: function() {
  return this._items.length;
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  var t1 = this._items;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 is$ReadOnlyCollection: true
};

$$.Array2d = {"":
 ["width?", "height?", "_source"],
 "super": "ListBase",
 get$length: function() {
  return $.get$length(this._source);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  return $.index(this._source, index);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.indexSet(this._source, index, value);
},
 get$2: function(x, y) {
  return this.operator$index$1(this._getIndex$2(x, y));
},
 set$3: function(x, y, value) {
  this.operator$indexSet$2(this._getIndex$2(x, y), value);
},
 getAdjacentIndices$2: function(x, y) {
  if (x !== (x | 0))
    return this.getAdjacentIndices$2$bailout(1, x, y);
  if (y !== (y | 0))
    return this.getAdjacentIndices$2$bailout(1, x, y);
  var adj = $.ListImplementation_List(null, 'int');
  $.setRuntimeTypeInfo(adj, { 'E': 'int' });
  for (var k = $.intTypeCheck($.max(0, y - 1), 'is$$int'), t1 = this.height, t2 = this.width, t3 = y + 2, t4 = x - 1, t5 = x + 2; $.boolConversionCheck($.lt(k, $.min(t1, t3)), 'is$bool'); k = $.intTypeCheck($.add(k, 1), 'is$$int'))
    for (var j = $.intTypeCheck($.max(0, t4), 'is$$int'), t6 = !(k === y); $.boolConversionCheck($.lt(j, $.min(t2, t5)), 'is$bool'); j = $.intTypeCheck($.add(j, 1), 'is$$int'))
      if (!(j === x) || t6)
        adj.push(this._getIndex$2(j, k));
  return adj;
},
 getAdjacentIndices$2$bailout: function(state, x, y) {
  var adj = $.ListImplementation_List(null, 'int');
  $.setRuntimeTypeInfo(adj, { 'E': 'int' });
  for (var k = $.intTypeCheck($.max(0, $.sub(y, 1)), 'is$$int'), t1 = this.height, t2 = this.width; $.boolConversionCheck($.lt(k, $.min(t1, $.add(y, 2))), 'is$bool'); k = $.intTypeCheck($.add(k, 1), 'is$$int'))
    for (var j = $.intTypeCheck($.max(0, $.sub(x, 1)), 'is$$int'), t3 = !(k == null ? y == null : k === y); $.boolConversionCheck($.lt(j, $.min(t2, $.add(x, 2))), 'is$bool'); j = $.intTypeCheck($.add(j, 1), 'is$$int'))
      if (!(j == null ? x == null : j === x) || t3)
        adj.push(this._getIndex$2(j, k));
  return adj;
},
 getCoordinate$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  if (index !== (index | 0))
    return this.getCoordinate$1$bailout(1, index, 0, 0, 0);
  var t2 = this.width;
  if (t2 !== (t2 | 0))
    return this.getCoordinate$1$bailout(2, index, t2, 0, 0);
  var x = $.mod(index, t2);
  var y = $.tdiv(index, t2);
  t2 = this._getIndex$2(x, y);
  if (typeof t2 !== 'number')
    return this.getCoordinate$1$bailout(3, y, t2, index, x);
  $.assert(t2 === index);
  return $.Tuple$(x, y, 'int', 'int');
},
 getCoordinate$1$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var index = env0;
      break;
    case 2:
      index = env0;
      t2 = env1;
      break;
    case 3:
      y = env0;
      t2 = env1;
      index = env2;
      x = env3;
      break;
  }
  switch (state) {
    case 0:
      $.intTypeCheck(index, 'is$$int');
    case 1:
      state = 0;
      var t2 = this.width;
    case 2:
      state = 0;
      var x = $.mod(index, t2);
      var y = $.tdiv(index, t2);
      t2 = this._getIndex$2(x, y);
    case 3:
      state = 0;
      $.assert($.eq(t2, index));
      return $.Tuple$(x, y, 'int', 'int');
  }
},
 _getIndex$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  if (x !== (x | 0))
    return this._getIndex$2$bailout(1, y, x, 0);
  $.intTypeCheck(y, 'is$$int');
  if (y !== (y | 0))
    return this._getIndex$2$bailout(2, x, y, 0);
  if (x >= 0) {
    var t1 = this.width;
    if (t1 !== (t1 | 0))
      return this._getIndex$2$bailout(3, t1, x, y);
    t1 = x < t1;
  } else
    t1 = false;
  $.assert(t1);
  if (y >= 0) {
    t1 = this.height;
    if (t1 !== (t1 | 0))
      return this._getIndex$2$bailout(4, x, y, t1);
    t1 = y < t1;
  } else
    t1 = false;
  $.assert(t1);
  t1 = this.width;
  if (t1 !== (t1 | 0))
    return this._getIndex$2$bailout(5, x, y, t1);
  return x + y * t1;
},
 _getIndex$2$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var y = env0;
      var x = env1;
      break;
    case 2:
      x = env0;
      y = env1;
      break;
    case 3:
      t1 = env0;
      x = env1;
      y = env2;
      break;
    case 4:
      x = env0;
      y = env1;
      t1 = env2;
      break;
    case 5:
      x = env0;
      y = env1;
      t1 = env2;
      break;
  }
  switch (state) {
    case 0:
      $.intTypeCheck(x, 'is$$int');
    case 1:
      state = 0;
      $.intTypeCheck(y, 'is$$int');
    case 2:
      state = 0;
    case 3:
      if (state === 3 || state === 0 && $.boolConversionCheck($.ge(x, 0), 'is$bool'))
        switch (state) {
          case 0:
            var t1 = this.width;
          case 3:
            state = 0;
            t1 = $.boolConversionCheck($.lt(x, t1), 'is$bool');
        }
      else
        t1 = false;
      $.assert(t1);
    case 4:
      if (state === 4 || state === 0 && $.boolConversionCheck($.ge(y, 0), 'is$bool'))
        switch (state) {
          case 0:
            t1 = this.height;
          case 4:
            state = 0;
            t1 = $.boolConversionCheck($.lt(y, t1), 'is$bool');
        }
      else
        t1 = false;
      $.assert(t1);
      t1 = this.width;
    case 5:
      state = 0;
      return $.add(x, $.mul(y, t1));
  }
},
 Array2d$wrap$2: function(width, source) {
  $.intTypeCheck(width, 'is$$int');
  $.listTypeCheck(source, 'is$List');
  $.requireArgumentNotNull(width, 'width');
  $.requireArgumentNotNull(source, 'source');
  $.requireArgument($.ge(width, 0), 'width', 'width must be non-zero');
  var t1 = width === 0;
  var t2 = this._source;
  if (t1)
    $.requireArgument($.eq($.get$length(t2), 0), 'width', 'width must be greater than zero if the source is non-empty');
  else {
    $.requireArgument($.gt($.get$length(t2), 0), 'source', 'if width is non-zero, source must be non-empty');
    $.requireArgument($.eq($.mod($.get$length(t2), width), 0), 'width', 'width must evenly divide the source');
  }
},
 is$Array2d: true
};

$$.EventHandle = {"":
 ["_handlers", "_disposed"],
 "super": "DisposableImpl",
 fireEvent$1: function(args) {
  $.assert(!$.boolConversionCheck(this.get$isDisposed(), 'is$bool'));
  var t1 = this._handlers;
  if (!(t1 == null))
    $.forEach(t1, new $.EventHandle_fireEvent_anon(args));
},
 add$1: function(handler) {
  $.functionTypeCheck(handler, 'is$Action1');
  $.assert(!$.boolConversionCheck(this.get$isDisposed(), 'is$bool'));
  var id = $.GlobalId_GlobalId();
  if (this._handlers == null)
    this._handlers = $.propertyTypeCheck($.HashMapImplementation$('GlobalId', 'Action1<T>'), 'is$HashMap');
  $.indexSet(this._handlers, id, handler);
  return id;
},
 remove$1: function(id) {
  $.propertyTypeCheck(id, 'is$GlobalId');
  var t1 = this._handlers;
  if (!(t1 == null))
    return !(t1.remove$1(id) == null);
  else
    return false;
},
 is$EventHandle: true,
 is$Object: function() { return true; }
};

$$.EventArgs = {"":
 [],
 "super": "Object",
 is$EventArgs: true
};

$$.Size = {"":
 ["width?", "height?"],
 "super": "Object",
 operator$eq$1: function(other) {
  $.propertyTypeCheck(other, 'is$Size');
  if (!(other == null)) {
    var t1 = this.width;
    var t2 = other.get$width();
    if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
      t1 = this.height;
      t2 = other.get$height();
      t2 = $.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool');
      t1 = t2;
    } else
      t1 = false;
    $.boolConversionCheck(t1, 'is$bool');
  } else
    t1 = false;
  return t1;
},
 get$area: function() {
  return $.mul(this.width, this.height);
},
 fitsInside$1: function(target) {
  $.propertyTypeCheck(target, 'is$Size');
  return $.boolConversionCheck($.le(this.width, target.get$width()), 'is$bool') && $.boolConversionCheck($.le(this.height, target.get$height()), 'is$bool');
},
 isEmpty$0: function() {
  return $.eq(this.get$area(), 0);
},
 get$isValid: function() {
  var t1 = this.width;
  if ($.isValidNumber(t1)) {
    var t2 = this.height;
    if ($.isValidNumber(t2))
      t1 = $.boolConversionCheck($.boolConversionCheck($.ge(t1, 0), 'is$bool') && $.boolConversionCheck($.ge(t2, 0), 'is$bool'), 'is$bool');
    else
      t1 = false;
    $.boolConversionCheck(t1, 'is$bool');
  } else
    t1 = false;
  return t1;
},
 scale$1: function(magnitude) {
  return $.Size$($.mul(this.width, magnitude), $.mul(this.height, magnitude));
},
 operator$mul$1: function(magnitude) {
  return this.scale$1($.numTypeCheck(magnitude, 'is$num'));
},
 toVector$0: function() {
  return $.Vector$(this.width, this.height);
},
 toString$0: function() {
  return '(' + $.S(this.width) + ' x ' + $.S(this.height) + ')';
},
 is$Size: true
};

$$.Coordinate = {"":
 ["x?", "y?"],
 "super": "Object",
 get$isValid: function() {
  return $.isValidNumber(this.x) && $.isValidNumber(this.y);
},
 operator$sub$1: function(other) {
  return $.Coordinate_difference(this, $.propertyTypeCheck(other, 'is$Coordinate'));
},
 operator$add$1: function(other) {
  $.propertyTypeCheck(other, 'is$Vector');
  return $.Coordinate$($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 toVector$0: function() {
  return $.Vector$(this.x, this.y);
},
 toSize$0: function() {
  return $.Size$(this.x, this.y);
},
 operator$eq$1: function(other) {
  $.propertyTypeCheck(other, 'is$Coordinate');
  if (!(other == null)) {
    var t1 = this.x;
    var t2 = other.get$x();
    if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
      t1 = this.y;
      t2 = other.get$y();
      t2 = $.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool');
      t1 = t2;
    } else
      t1 = false;
    $.boolConversionCheck(t1, 'is$bool');
  } else
    t1 = false;
  return t1;
},
 toString$0: function() {
  return '{x:' + $.S(this.x) + ', y:' + $.S(this.y) + '}';
},
 is$Coordinate: true
};

$$.Vector = {"":
 ["x", "y"],
 "super": "Coordinate",
 get$length: function() {
  var t1 = this.x;
  t1 = $.mul(t1, t1);
  var t2 = this.y;
  return $.sqrt($.add(t1, $.mul(t2, t2)));
},
 operator$add$1: function(other) {
  $.propertyTypeCheck(other, 'is$Coordinate');
  var t1 = this.x;
  if (typeof t1 !== 'number')
    return this.operator$add$1$bailout(1, t1, other, 0);
  var t3 = other.get$x();
  if (typeof t3 !== 'number')
    return this.operator$add$1$bailout(2, t1, other, t3);
  t3 = t1 + t3;
  t1 = this.y;
  if (typeof t1 !== 'number')
    return this.operator$add$1$bailout(3, t3, t1, other);
  var t6 = other.get$y();
  if (typeof t6 !== 'number')
    return this.operator$add$1$bailout(4, t3, t1, t6);
  return $.Vector$(t3, t1 + t6);
},
 operator$add$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      t1 = env0;
      var other = env1;
      break;
    case 2:
      t1 = env0;
      other = env1;
      t3 = env2;
      break;
    case 3:
      t3 = env0;
      t1 = env1;
      other = env2;
      break;
    case 4:
      t3 = env0;
      t1 = env1;
      t6 = env2;
      break;
  }
  switch (state) {
    case 0:
      $.propertyTypeCheck(other, 'is$Coordinate');
      var t1 = this.x;
    case 1:
      state = 0;
      var t3 = other.get$x();
    case 2:
      state = 0;
      t3 = $.add(t1, t3);
      t1 = this.y;
    case 3:
      state = 0;
      var t6 = other.get$y();
    case 4:
      state = 0;
      return $.Vector$(t3, $.add(t1, t6));
  }
},
 operator$mul$1: function(magnitude) {
  return this.scale$1($.numTypeCheck(magnitude, 'is$num'));
},
 scale$1: function(magnitude) {
  $.numTypeCheck(magnitude, 'is$num');
  return $.Vector$($.mul(this.x, magnitude), $.mul(this.y, magnitude));
},
 is$Vector: true
};

$$.Box = {"":
 ["left?", "top?", "width?", "height?"],
 "super": "Object",
 get$topLeft: function() {
  return $.Coordinate$(this.left, this.top);
},
 get$size: function() {
  return $.Size$(this.width, this.height);
},
 get$isValid: function() {
  return $.boolConversionCheck(this.get$topLeft().get$isValid(), 'is$bool') && $.boolConversionCheck(this.get$size().get$isValid(), 'is$bool');
},
 contains$1: function(point) {
  $.propertyTypeCheck(point, 'is$Coordinate');
  var t1 = point.get$x();
  var t2 = this.left;
  if ($.boolConversionCheck($.ge(t1, t2), 'is$bool')) {
    if ($.boolConversionCheck($.le(point.get$x(), $.add(t2, this.width)), 'is$bool')) {
      t1 = point.get$y();
      t2 = this.top;
      t1 = $.boolConversionCheck($.boolConversionCheck($.ge(t1, t2), 'is$bool') && $.boolConversionCheck($.le(point.get$y(), $.add(t2, this.height)), 'is$bool'), 'is$bool');
    } else
      t1 = false;
    $.boolConversionCheck(t1, 'is$bool');
  } else
    t1 = false;
  return t1;
},
 operator$eq$1: function(other) {
  $.propertyTypeCheck(other, 'is$Box');
  if (!(other == null)) {
    if ($.boolConversionCheck($.eq(other.get$left(), this.left), 'is$bool')) {
      if ($.boolConversionCheck($.eq(other.get$top(), this.top), 'is$bool'))
        var t1 = $.boolConversionCheck($.boolConversionCheck($.eq(other.get$width(), this.width), 'is$bool') && $.boolConversionCheck($.eq(other.get$height(), this.height), 'is$bool'), 'is$bool');
      else
        t1 = false;
      $.boolConversionCheck(t1, 'is$bool');
    } else
      t1 = false;
    $.boolConversionCheck(t1, 'is$bool');
  } else
    t1 = false;
  return t1;
},
 toString$0: function() {
  return 'Location: ' + $.S(this.get$topLeft()) + ', Size: ' + $.S(this.get$size());
},
 hashCode$0: function() {
  return $.Util_getHashCode([this.left, this.top, this.width, this.height]);
},
 is$Box: true,
 is$Object: function() { return true; }
};

$$.AffineTransform = {"":
 ["_m00?", "_m10?", "_m01?", "_m11?", "_m02?", "_m12?"],
 "super": "Object",
 get$scaleX: function() {
  return this._m00;
},
 get$scaleY: function() {
  return this._m11;
},
 get$translateX: function() {
  return this._m02;
},
 get$translateY: function() {
  return this._m12;
},
 get$shearX: function() {
  return this._m01;
},
 get$shearY: function() {
  return this._m10;
},
 get$determinant: function() {
  return $.sub($.mul(this._m00, this._m11), $.mul(this._m01, this._m10));
},
 concatenate$1: function(tx) {
  var m0 = this._m00;
  var m1 = this._m01;
  this._m00 = $.numTypeCheck($.add($.mul(tx.get$_m00(), m0), $.mul(tx.get$_m10(), m1)), 'is$num');
  this._m01 = $.numTypeCheck($.add($.mul(tx.get$_m01(), m0), $.mul(tx.get$_m11(), m1)), 'is$num');
  this._m02 = $.numTypeCheck($.add(this._m02, $.add($.mul(tx.get$_m02(), m0), $.mul(tx.get$_m12(), m1))), 'is$num');
  var m00 = this._m10;
  var m10 = this._m11;
  this._m10 = $.numTypeCheck($.add($.mul(tx.get$_m00(), m00), $.mul(tx.get$_m10(), m10)), 'is$num');
  this._m11 = $.numTypeCheck($.add($.mul(tx.get$_m01(), m00), $.mul(tx.get$_m11(), m10)), 'is$num');
  this._m12 = $.numTypeCheck($.add(this._m12, $.add($.mul(tx.get$_m02(), m00), $.mul(tx.get$_m12(), m10))), 'is$num');
  return this;
},
 get$concatenate: function() { return new $.BoundClosure(this, 'concatenate$1'); },
 rotate$3: function(theta, x, y) {
  return this.concatenate$1($.AffineTransform_AffineTransform$fromRotate(theta, x, y));
},
 translate$2: function(dx, dy) {
  $.numTypeCheck(dx, 'is$num');
  $.numTypeCheck(dy, 'is$num');
  this._m02 = $.numTypeCheck($.add(this._m02, $.add($.mul(dx, this._m00), $.mul(dy, this._m01))), 'is$num');
  this._m12 = $.numTypeCheck($.add(this._m12, $.add($.mul(dx, this._m10), $.mul(dy, this._m11))), 'is$num');
  return this;
},
 setToScale$2: function(sx, sy) {
  return this.setTransform$6(sx, 0, 0, sy, 0, 0);
},
 setToRotation$3: function(theta, x, y) {
  var cos = $.cos(theta);
  var sin = $.sin(theta);
  return this.setTransform$6(cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos);
},
 setToTranslation$2: function(dx, dy) {
  return this.setTransform$6(1, 0, 0, 1, $.numTypeCheck(dx, 'is$num'), $.numTypeCheck(dy, 'is$num'));
},
 setTransform$6: function(m00, m10, m01, m11, m02, m12) {
  $.numTypeCheck(m00, 'is$num');
  $.numTypeCheck(m01, 'is$num');
  $.numTypeCheck(m11, 'is$num');
  this._m00 = m00;
  this._m10 = m10;
  this._m01 = m01;
  this._m11 = m11;
  this._m02 = m02;
  this._m12 = m12;
  return this;
},
 transformCoordinate$1: function(point) {
  return $.Coordinate$($.numTypeCheck($.add($.add($.mul(point.get$x(), this._m00), $.mul(point.get$y(), this._m01)), this._m02), 'is$num'), $.numTypeCheck($.add($.add($.mul(point.get$x(), this._m10), $.mul(point.get$y(), this._m11)), this._m12), 'is$num'));
},
 createInverse$0: function() {
  var det = $.numTypeCheck(this.get$determinant(), 'is$num');
  return $.AffineTransform$($.div(this._m11, det), $.div($.neg(this._m10), det), $.div($.neg(this._m01), det), $.div(this._m00, det), $.div($.sub($.mul(this._m01, this._m12), $.mul(this._m11, this._m02)), det), $.div($.sub($.mul(this._m10, this._m02), $.mul(this._m00, this._m12)), det));
},
 operator$eq$1: function(other) {
  $.propertyTypeCheck(other, 'is$AffineTransform');
  if (!(other == null)) {
    var t1 = this._m00;
    var t2 = other.get$_m00();
    if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
      t1 = this._m01;
      t2 = other.get$_m01();
      if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
        t1 = this._m02;
        t2 = other.get$_m02();
        if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
          t1 = this._m10;
          t2 = other.get$_m10();
          if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
            t1 = this._m11;
            t2 = other.get$_m11();
            if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
              t1 = this._m12;
              t2 = other.get$_m12();
              t2 = $.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool');
              t1 = t2;
            } else
              t1 = false;
            $.boolConversionCheck(t1, 'is$bool');
          } else
            t1 = false;
          $.boolConversionCheck(t1, 'is$bool');
        } else
          t1 = false;
        $.boolConversionCheck(t1, 'is$bool');
      } else
        t1 = false;
      $.boolConversionCheck(t1, 'is$bool');
    } else
      t1 = false;
    $.boolConversionCheck(t1, 'is$bool');
  } else
    t1 = false;
  return t1;
},
 toString$0: function() {
  return $.Strings_join($.$$([this.get$translateX(), this.get$translateY(), this.get$scaleX(), this.get$scaleY(), this.get$shearX(), this.get$shearY()]).select$1(new $.AffineTransform_toString_anon()).toList$0(), ', ');
},
 is$AffineTransform: true,
 is$Object: function() { return true; }
};

$$.Attachable = {"":
 ["name?", "_id?"],
 "super": "Object",
 hashCode$0: function() {
  return $.hashCode(this._id);
},
 is$Attachable: true,
 is$Object: function() { return true; }
};

$$.AttachableObject = {"":
 [],
 "super": "DisposableImpl",
 _addHandler$2: function(property, watcher) {
  $.propertyTypeCheck(property, 'is$Attachable');
  $.functionTypeCheck(watcher, 'is$Action1');
  return $.add$1(this._eventHandlers.putIfAbsent$2(property, new $.AttachableObject__addHandler_anon()), watcher);
},
 _fireEvent$2: function(attachable, args) {
  $.propertyTypeCheck(attachable, 'is$Attachable');
  var handle = $.index(this._eventHandlers, attachable);
  if (!(handle == null))
    handle.fireEvent$1(args);
},
 _set$2: function(key, value) {
  $.propertyTypeCheck(key, 'is$Property');
  $.assert(!(value === $.CTC20));
  $.indexSet(this._propertyValues, key, value);
  this._fireChange$1(key);
},
 get$_set: function() { return new $.BoundClosure1(this, '_set$2'); },
 _isSet$1: function(key) {
  $.propertyTypeCheck(key, 'is$Property');
  return this._propertyValues.containsKey$1(key);
},
 _remove$1: function(key) {
  $.propertyTypeCheck(key, 'is$Property');
  if ($.boolConversionCheck(this._isSet$1(key), 'is$bool')) {
    this._propertyValues.remove$1(key);
    this._fireChange$1(key);
  }
},
 _getValueOrUndefined$3: function(key, obj, ifAbsent) {
  $.propertyTypeCheck(key, 'is$Property');
  $.functionTypeCheck(ifAbsent, 'is$Func1');
  if ($.boolConversionCheck(this._isSet$1(key), 'is$bool'))
    return $.index(this._propertyValues, key);
  else if (!(ifAbsent == null)) {
    var value = ifAbsent.call$1(obj);
    this._set$2(key, value);
    return value;
  } else
    return $.CTC20;
},
 _fireChange$1: function(key) {
  $.propertyTypeCheck(key, 'is$Property');
  var handle = $.index(this._eventHandlers, key);
  if (!(handle == null))
    handle.fireEvent$1(key);
},
 is$AttachableObject: true
};

$$.Property = {"":
 ["defaultValue", "name", "_id"],
 "super": "Attachable",
 get$2: function(obj, ifAbsent) {
  var coreValue = this.getCore$2($.propertyTypeCheck(obj, 'is$AttachableObject'), $.functionTypeCheck(ifAbsent, 'is$Func1'));
  if (!(coreValue === $.CTC20))
    return coreValue;
  else
    return this.defaultValue;
},
 get$1: function(obj) {
  return this.get$2(obj,null)
},
 getCore$2: function(obj, ifAbsent) {
  return obj._getValueOrUndefined$3(this, obj, $.functionTypeCheck(ifAbsent, 'is$Func1'));
},
 set$2: function(obj, value) {
  $.propertyTypeCheck(obj, 'is$AttachableObject');
  $.assert(true);
  obj._set$2(this, value);
},
 clear$1: function(obj) {
  $.propertyTypeCheck(obj, 'is$AttachableObject')._remove$1(this);
},
 isSet$1: function(obj) {
  return $.propertyTypeCheck(obj, 'is$AttachableObject')._isSet$1(this);
},
 addHandler$2: function(obj, handler) {
  return $.propertyTypeCheck(obj, 'is$AttachableObject')._addHandler$2(this, $.functionTypeCheck(handler, 'is$Action1'));
},
 toString$0: function() {
  return 'Property \'' + $.S(this.name) + '\'';
},
 is$Property: true
};

$$._UndefinedValue = {"":
 [],
 "super": "Object"
};

$$.AttachedEvent = {"":
 ["name", "_id"],
 "super": "Attachable",
 addHandler$2: function(obj, handler) {
  return $.propertyTypeCheck(obj, 'is$AttachableObject')._addHandler$2(this, $.functionTypeCheck(handler, 'is$Action1'));
},
 fireEvent$2: function(obj, args) {
  $.propertyTypeCheck(obj, 'is$AttachableObject')._fireEvent$2(this, args);
},
 is$AttachedEvent: true
};

$$.Field = {"":
 ["mineCount?", "_adjacents", "width", "height", "_source"],
 "super": "Array2d",
 getAdjacentCount$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  if ($.boolConversionCheck(this.get$2(x, y), 'is$bool'))
    return;
  var t1 = this._adjacents;
  var val = $.intTypeCheck(t1.get$2(x, y), 'is$$int');
  if (val == null) {
    for (var t2 = $.iterator(this.getAdjacentIndices$2(x, y)), val = 0; $.boolConversionCheck(t2.hasNext$0(), 'is$bool');)
      if ($.boolConversionCheck(this.operator$index$1(t2.next$0()), 'is$bool'))
        val = $.intTypeCheck($.add(val, 1), 'is$$int');
    t1.set$3(x, y, val);
  }
  return val;
},
 Field$_internal$3: function(mineCount, cols, source) {
  $.intTypeCheck(cols, 'is$$int');
  $.propertyTypeCheck(source, 'is$ReadOnlyCollection');
  $.assert($.gt(this.width, 0));
  $.assert($.gt(this.height, 0));
  var t1 = this.mineCount;
  $.assert($.gt(t1, 0));
  $.assert($.lt(t1, $.get$length(this)));
  for (var t2 = $.iterator(this), count = 0; $.boolConversionCheck(t2.hasNext$0(), 'is$bool');)
    if ($.boolConversionCheck(t2.next$0(), 'is$bool'))
      count = $.intTypeCheck($.add(count, 1), 'is$$int');
  $.assert(count == null ? t1 == null : count === t1);
},
 is$Field: true
};

$$.Game = {"":
 ["field?", "_states", "_updatedEvent", "_gameStateEvent", "_state", "_minesLeft", "_revealsLeft", "_startTime", "_endTime"],
 "super": "Object",
 get$minesLeft: function() {
  return this._minesLeft;
},
 get$state: function() {
  return this._state;
},
 get$updated: function() {
  return this._updatedEvent;
},
 get$stateChanged: function() {
  return this._gameStateEvent;
},
 getSquareState$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  return this._states.get$2(x, y);
},
 get$gameEnded: function() {
  return $.boolConversionCheck($.eq(this._state, $.CTC34), 'is$bool') || $.boolConversionCheck($.eq(this._state, $.CTC35), 'is$bool');
},
 get$duration: function() {
  if (this._startTime == null) {
    $.assert($.eq(this.get$state(), $.CTC29));
    return;
  } else {
    $.assert($.eq($.eq(this.get$state(), $.CTC38), this._endTime == null));
    var end = this._endTime;
    if (end == null)
      end = $.DateImplementation$now();
    return end.difference$1(this._startTime);
  }
},
 setFlag$3: function(x, y, value) {
  this._ensureStarted$0();
  $.assert(true);
  var t1 = this._states;
  var currentSS = t1.get$2(x, y);
  if (value) {
    $.require($.eq(currentSS, $.CTC33), '');
    t1.set$3(x, y, $.CTC37);
    this._minesLeft = $.intTypeCheck($.sub(this._minesLeft, 1), 'is$$int');
  } else {
    $.require($.eq(currentSS, $.CTC37), '');
    t1.set$3(x, y, $.CTC33);
    this._minesLeft = $.intTypeCheck($.add(this._minesLeft, 1), 'is$$int');
  }
  this._update$0();
},
 canReveal$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  this._ensureStarted$0();
  if ($.boolConversionCheck($.eq(this._states.get$2(x, y), $.CTC33), 'is$bool'))
    return true;
  else if ($.boolConversionCheck(this._canChord$2(x, y), 'is$bool'))
    return true;
  return false;
},
 reveal$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  this._ensureStarted$0();
  $.require(this.canReveal$2(x, y), 'Item cannot be revealed.');
  if ($.boolConversionCheck($.eq(this._states.get$2(x, y), $.CTC33), 'is$bool'))
    if ($.boolConversionCheck(this.field.get$2(x, y), 'is$bool')) {
      this._setLost$0();
      var reveals = [];
    } else
      reveals = $.listTypeCheck(this._doReveal$2(x, y), 'is$List');
  else
    reveals = $.boolConversionCheck(this._canChord$2(x, y), 'is$bool') ? $.listTypeCheck(this._doChord$2(x, y), 'is$List') : null;
  this._update$0();
  if ($.boolConversionCheck($.eq(this._state, $.CTC35), 'is$bool'))
    return;
  else
    return reveals;
},
 _canChord$2: function(x, y) {
  if ($.boolConversionCheck($.eq(this._states.get$2(x, y), $.CTC36), 'is$bool')) {
    var adjCount = this.field.getAdjacentCount$2(x, y);
    if ($.boolConversionCheck($.gt(adjCount, 0), 'is$bool'))
      if ($.boolConversionCheck($.gt(this._getAdjacentCount$3(x, y, $.CTC33), 0), 'is$bool'))
        if ($.boolConversionCheck($.eq(this._getAdjacentCount$3(x, y, $.CTC37), adjCount), 'is$bool'))
          return true;
  }
  return false;
},
 _doChord$2: function(x, y) {
  var t1 = this._states;
  $.assert($.eq(t1.get$2(x, y), $.CTC36));
  var flagged = $.ListImplementation_List(null, 'int');
  $.setRuntimeTypeInfo(flagged, { 'E': 'int' });
  var hidden = $.ListImplementation_List(null, 'int');
  $.setRuntimeTypeInfo(hidden, { 'E': 'int' });
  var t2 = this.field;
  var adjCount = t2.getAdjacentCount$2(x, y);
  $.assert($.gt(adjCount, 0));
  for (var t3 = $.iterator(t2.getAdjacentIndices$2(x, y)), failed = false; $.boolConversionCheck(t3.hasNext$0(), 'is$bool');) {
    var t4 = t3.next$0();
    if ($.boolConversionCheck($.eq($.index(t1, t4), $.CTC33), 'is$bool')) {
      hidden.push(t4);
      if ($.boolConversionCheck($.index(t2, t4), 'is$bool'))
        failed = true;
    } else if ($.boolConversionCheck($.eq($.index(t1, t4), $.CTC37), 'is$bool'))
      flagged.push(t4);
  }
  $.assert(flagged.length === adjCount);
  var reveals = [];
  if (failed)
    this._setLost$0();
  else
    for (t1 = $.iterator(hidden); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
      var c = t2.getCoordinate$1(t1.next$0());
      if ($.boolConversionCheck(this.canReveal$2(c.get$Item1(), c.get$Item2()), 'is$bool'))
        $.addAll(reveals, this.reveal$2(c.get$Item1(), c.get$Item2()));
    }
  return reveals;
},
 _doReveal$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  var t1 = this._states;
  $.assert($.eq(t1.get$2(x, y), $.CTC33));
  t1.set$3(x, y, $.CTC36);
  var t2 = this._revealsLeft;
  if (t2 !== (t2 | 0))
    return this._doReveal$2$bailout(1, t2, x, y, t1, 0, 0);
  this._revealsLeft = t2 - 1;
  $.assert($.ge(this._revealsLeft, 0));
  var reveals = [$.Coordinate$(x, y)];
  t2 = this._revealsLeft;
  if (t2 !== (t2 | 0))
    return this._doReveal$2$bailout(2, reveals, x, t2, y, t1, 0);
  if (t2 === 0)
    this._setWon$0();
  else {
    t2 = this.field;
    var t3 = t2.getAdjacentCount$2(x, y);
    if (typeof t3 !== 'number')
      return this._doReveal$2$bailout(3, x, y, t2, t3, reveals, t1);
    if (t3 === 0)
      for (t3 = $.iterator(t2.getAdjacentIndices$2(x, y)); $.boolConversionCheck(t3.hasNext$0(), 'is$bool');) {
        var t4 = t3.next$0();
        if ($.boolConversionCheck($.eq(t1.operator$index$1(t4), $.CTC33), 'is$bool')) {
          var c = t2.getCoordinate$1(t4);
          $.addAll(reveals, this._doReveal$2(c.get$Item1(), c.get$Item2()));
          t4 = $.boolConversionCheck($.eq(this.get$state(), $.CTC38), 'is$bool');
          if (typeof t4 !== 'boolean')
            return this._doReveal$2$bailout(4, t3, t4, reveals, t2, t1, 0);
          $.assert(t4 || $.boolConversionCheck($.eq(this.get$state(), $.CTC34), 'is$bool'));
        }
      }
  }
  return reveals;
},
 _doReveal$2$bailout: function(state, env0, env1, env2, env3, env4, env5) {
  switch (state) {
    case 1:
      t2 = env0;
      var x = env1;
      var y = env2;
      t1 = env3;
      break;
    case 2:
      reveals = env0;
      x = env1;
      t2 = env2;
      y = env3;
      t1 = env4;
      break;
    case 3:
      x = env0;
      y = env1;
      t2 = env2;
      t3 = env3;
      reveals = env4;
      t1 = env5;
      break;
    case 4:
      t3 = env0;
      t4 = env1;
      reveals = env2;
      t2 = env3;
      t1 = env4;
      break;
  }
  switch (state) {
    case 0:
      $.intTypeCheck(x, 'is$$int');
      $.intTypeCheck(y, 'is$$int');
      var t1 = this._states;
      $.assert($.eq(t1.get$2(x, y), $.CTC33));
      t1.set$3(x, y, $.CTC36);
      var t2 = this._revealsLeft;
    case 1:
      state = 0;
      this._revealsLeft = $.intTypeCheck($.sub(t2, 1), 'is$$int');
      $.assert($.ge(this._revealsLeft, 0));
      var reveals = [$.Coordinate$(x, y)];
      t2 = this._revealsLeft;
    case 2:
      state = 0;
    default:
      if (state === 0 && $.boolConversionCheck(t2 === 0, 'is$bool'))
        this._setWon$0();
      else
        switch (state) {
          case 0:
            t2 = this.field;
            var t3 = t2.getAdjacentCount$2(x, y);
          case 3:
            state = 0;
          case 4:
            if (state === 4 || state === 0 && $.boolConversionCheck($.eq(t3, 0), 'is$bool'))
              switch (state) {
                case 0:
                  t3 = $.iterator(t2.getAdjacentIndices$2(x, y));
                case 4:
                  L0:
                    while (true)
                      switch (state) {
                        case 0:
                          if (!$.boolConversionCheck(t3.hasNext$0(), 'is$bool'))
                            break L0;
                          var t4 = t3.next$0();
                        case 4:
                          if (state === 4 || state === 0 && $.boolConversionCheck($.eq($.index(t1, t4), $.CTC33), 'is$bool'))
                            switch (state) {
                              case 0:
                                var c = t2.getCoordinate$1(t4);
                                $.addAll(reveals, this._doReveal$2(c.get$Item1(), c.get$Item2()));
                                t4 = $.boolConversionCheck($.eq(this.get$state(), $.CTC38), 'is$bool');
                              case 4:
                                state = 0;
                                $.assert(t4 || $.boolConversionCheck($.eq(this.get$state(), $.CTC34), 'is$bool'));
                            }
                      }
              }
        }
      return reveals;
  }
},
 _setWon$0: function() {
  $.assert($.eq(this.get$state(), $.CTC38));
  for (var t1 = this.field, t2 = this._states, i = 0; $.boolConversionCheck($.lt(i, $.get$length(t1)), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    if ($.boolConversionCheck($.index(t1, i), 'is$bool'))
      $.indexSet(t2, i, $.CTC43);
  this._setState$1($.CTC34);
},
 _setLost$0: function() {
  $.assert($.eq(this.get$state(), $.CTC38));
  for (var t1 = this.field, t2 = this._states, i = 0; $.boolConversionCheck($.lt(i, $.get$length(t1)), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    if ($.boolConversionCheck($.index(t1, i), 'is$bool'))
      $.indexSet(t2, i, $.CTC42);
  this._setState$1($.CTC35);
},
 _update$0: function() {
  return this._updatedEvent.fireEvent$1($.CTC23);
},
 _setState$1: function(value) {
  $.assert(true);
  $.assert(!(this._state === null));
  $.assert($.eq($.eq(this._state, $.CTC29), this._startTime == null));
  if (!$.eqB(this._state, value)) {
    this._state = value;
    if ($.boolConversionCheck($.eq(this._state, $.CTC38), 'is$bool'))
      this._startTime = $.propertyTypeCheck($.DateImplementation$now(), 'is$Date');
    else if ($.boolConversionCheck(this.get$gameEnded(), 'is$bool'))
      this._endTime = $.propertyTypeCheck($.DateImplementation$now(), 'is$Date');
    this._gameStateEvent.fireEvent$1(this._state);
  }
},
 _ensureStarted$0: function() {
  if ($.boolConversionCheck($.eq(this.get$state(), $.CTC29), 'is$bool')) {
    $.assert(this._startTime == null);
    this._setState$1($.CTC38);
  }
  $.assert($.eq(this.get$state(), $.CTC38));
  $.assert(!(this._startTime == null));
},
 _getAdjacentCount$3: function(x, y, state) {
  for (var t1 = $.iterator(this.field.getAdjacentIndices$2(x, y)), t2 = this._states, val = 0; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    if ($.boolConversionCheck($.eq($.index(t2, t1.next$0()), state), 'is$bool'))
      val = $.intTypeCheck($.add(val, 1), 'is$$int');
  return val;
},
 Game$1: function(field) {
  $.propertyTypeCheck(field, 'is$Field');
  $.assert(!(field == null));
  this._minesLeft = $.intTypeCheck(field.get$mineCount(), 'is$$int');
  this._revealsLeft = $.intTypeCheck($.sub($.get$length(field), field.get$mineCount()), 'is$$int');
},
 is$Game: true
};

$$.GameState = {"":
 ["name?"],
 "super": "Object",
 toString$0: function() {
  return 'GameState: ' + $.S(this.name);
},
 is$GameState: true
};

$$.SquareState = {"":
 ["name?"],
 "super": "Object",
 toString$0: function() {
  return 'SquareState: ' + $.S(this.name);
},
 is$SquareState: true
};

$$.GameRoot = {"":
 ["_lib3_stage", "_lib3_canvas?", "_gameElement", "_clickMan", "_gameElementTx", "_frameRequested", "_lib5_width", "_lib5_height", "_mineCount", "gameStorage", "game", "_updatedEventId", "_gameStateChangedId", "_setIntervalId"],
 "super": "GameManager",
 set$game: function(value) {
  $.propertyTypeCheck(value, 'is$Game');
  var t1 = $.game;
  this._gameElement.set$game(value);
  this.game = value;
},
 newGame$0: function() {
  $.GameManager.prototype.newGame$0.call(this);
  this._requestFrame$0();
},
 _requestFrame$0: function() {
  if (!$.boolConversionCheck(this._frameRequested, 'is$bool')) {
    this._frameRequested = true;
    $.window().requestAnimationFrame$1(this.get$_onFrame());
  }
},
 _onFrame$1: function(time) {
  $.intTypeCheck(time, 'is$$int');
  var t1 = this._lib3_stage;
  var t2 = t1.get$size().get$width();
  var t3 = this._gameElement;
  var prettyScale = $.pow(2, $.toInt($.floor($.log($.min($.div(t2, t3.get$width()), $.div(t1.get$size().get$height(), t3.get$height()))) / 0.6931471805599453)));
  var t4 = this._gameElementTx;
  t4.setToScale$2(prettyScale, prettyScale);
  var newDimensions = $.mul(t3.get$size(), prettyScale);
  $.assert(newDimensions.fitsInside$1(t1.get$size()));
  var delta = $.Vector$($.sub(t1.get$size().get$width(), newDimensions.get$width()), $.sub(t1.get$size().get$height(), newDimensions.get$height())).scale$1(0.5);
  t4.translate$2(delta.get$x(), delta.get$y());
  var updated = t1.draw$0();
  this._frameRequested = false;
  if ($.boolConversionCheck(updated, 'is$bool'))
    this._requestFrame$0();
},
 get$_onFrame: function() { return new $.BoundClosure(this, '_onFrame$1'); },
 updateClock$0: function() {
  this._requestFrame$0();
  $.GameManager.prototype.updateClock$0.call(this);
},
 gameUpdated$1: function(args) {
  this._requestFrame$0();
},
 get$gameUpdated: function() { return new $.BoundClosure(this, 'gameUpdated$1'); },
 _stageInvalidated$1: function(args) {
  this._requestFrame$0();
},
 get$_stageInvalidated: function() { return new $.BoundClosure(this, '_stageInvalidated$1'); },
 _mouseMoveHandler$1: function(elements) {
  $.listTypeCheck(elements, 'is$List');
  if (!$.boolConversionCheck(this.get$game().get$gameEnded(), 'is$bool'))
    if ($.boolConversionCheck($.gt($.get$length(elements), 0), 'is$bool')) {
      var t1 = $.index(elements, 0);
      t1 = typeof t1 === 'object' && t1 !== null && !!t1.is$SquareElement;
    } else
      t1 = false;
  else
    t1 = false;
  if ($.boolConversionCheck(t1, 'is$bool')) {
    var se = $.propertyTypeCheck($.index(elements, 0), 'is$SquareElement');
    this._updateCursor$1(this.get$game().canReveal$2(se.get$x(), se.get$y()));
  } else
    this._updateCursor$1(false);
},
 get$_mouseMoveHandler: function() { return new $.BoundClosure(this, '_mouseMoveHandler$1'); },
 _mouseOutHandler$1: function(args) {
  this._updateCursor$1(false);
},
 get$_mouseOutHandler: function() { return new $.BoundClosure(this, '_mouseOutHandler$1'); },
 _updateCursor$1: function(showFinger) {
  var t1 = $.boolTypeCheck(showFinger, 'is$bool') ? 'pointer' : 'inherit';
  this._lib3_canvas.get$style().set$cursor(t1);
},
 GameRoot$_internal$7: function(width, height, mineCount, _canvas, _stage, gameElement, _clickMan) {
  $.intTypeCheck(width, 'is$$int');
  $.intTypeCheck(height, 'is$$int');
  $.intTypeCheck(mineCount, 'is$$int');
  $.propertyTypeCheck(gameElement, 'is$GameElement');
  var t1 = this._lib3_stage;
  $.add$1(t1.get$invalidated(), this.get$_stageInvalidated());
  var t2 = this._gameElement;
  $.add$1(t2.get$newGameClick(), new $.anon(this));
  $.ClickManager_addMouseMoveHandler(t2, this.get$_mouseMoveHandler());
  $.ClickManager_addMouseOutHandler(t1, this.get$_mouseOutHandler());
}
};

$$.GameElement = {"":
 ["_lib3_canvas?", "_background", "_boardElement", "_scoreElement", "_newGameElement", "_popAnimationLayer", "_dartAnimationLayer", "_targetMode", "_targetChanged", "_scoreTx", "_newGameTx", "_targetX", "_targetY", "_scale?", "_scaledBoardOffset?", "_game?", "_transforms", "cacheEnabled", "_updatedEventHandle", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_lib2_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "ElementParentImpl",
 get$newGameClick: function() {
  return this._newGameElement.get$clicked();
},
 get$game: function() {
  return this._game;
},
 set$game: function(value) {
  $.propertyTypeCheck(value, 'is$Game');
  this._game = value;
  if (value == null)
    this.set$size($.CTC30);
  else
    this._updateSize$2(value.get$field().get$width(), value.get$field().get$height());
},
 get$visualChildCount: function() {
  return 1;
},
 getVisualChild$1: function(index) {
  $.assert($.intTypeCheck(index, 'is$$int') === 0);
  return this._lib3_canvas;
},
 update$0: function() {
  $.ElementParentImpl.prototype.update$0.call(this);
  var offset = this._scaledBoardOffset.operator$add$1($.CTC26);
  var t1 = this._lib3_canvas;
  t1.setTopLeft$2(this._boardElement, offset);
  t1.setTopLeft$2(this._popAnimationLayer, offset);
  t1.setTopLeft$2(this._dartAnimationLayer, offset);
  var t2 = this._scale;
  if (typeof t2 !== 'number')
    return this.update$0$bailout(1, t2, t1, 0, 0, 0, 0);
  var t4 = $.CTC27.width;
  if (typeof t4 !== 'number')
    return this.update$0$bailout(2, t2, t4, t1, 0, 0, 0);
  var t6 = $.CTC28.x;
  if (typeof t6 !== 'number')
    return this.update$0$bailout(3, t1, t2, t4, t6, 0, 0);
  t4 -= t6;
  var t8 = this._scoreElement;
  var t9 = t8.get$width();
  if (typeof t9 !== 'number')
    return this.update$0$bailout(4, t2, t6, t8, t9, t4, t1);
  t1.setTopLeft$2(t8, $.Vector$(t2 * (t4 - t9), 0));
  t8 = this._scoreTx;
  var t11 = this._scale;
  t8.setToScale$2(t11, t11);
  t11 = this._newGameElement;
  t8 = t11.get$width();
  if (typeof t8 !== 'number')
    return this.update$0$bailout(5, t6, t1, t8, t11, 0, 0);
  t6 += t8 * 0.2;
  var t13 = this._scale;
  if (typeof t13 !== 'number')
    return this.update$0$bailout(6, t11, t6, t13, t1, 0, 0);
  t1.setTopLeft$2(t11, $.Vector$(t6 * t13, 0));
  t11 = this._newGameTx;
  t1 = this._scale;
  t11.setToScale$2(t1, t1);
},
 update$0$bailout: function(state, env0, env1, env2, env3, env4, env5) {
  switch (state) {
    case 1:
      t2 = env0;
      t1 = env1;
      break;
    case 2:
      t2 = env0;
      t4 = env1;
      t1 = env2;
      break;
    case 3:
      t1 = env0;
      t2 = env1;
      t4 = env2;
      t6 = env3;
      break;
    case 4:
      t2 = env0;
      t6 = env1;
      t8 = env2;
      t9 = env3;
      t4 = env4;
      t1 = env5;
      break;
    case 5:
      t6 = env0;
      t1 = env1;
      t8 = env2;
      t11 = env3;
      break;
    case 6:
      t11 = env0;
      t6 = env1;
      t13 = env2;
      t1 = env3;
      break;
  }
  switch (state) {
    case 0:
      $.ElementParentImpl.prototype.update$0.call(this);
      var offset = $.add(this._scaledBoardOffset, $.CTC26);
      var t1 = this._lib3_canvas;
      t1.setTopLeft$2(this._boardElement, offset);
      t1.setTopLeft$2(this._popAnimationLayer, offset);
      t1.setTopLeft$2(this._dartAnimationLayer, offset);
      var t2 = this._scale;
    case 1:
      state = 0;
      var t4 = $.CTC27.width;
    case 2:
      state = 0;
      var t6 = $.CTC28.x;
    case 3:
      state = 0;
      t4 = $.sub(t4, t6);
      var t8 = this._scoreElement;
      var t9 = t8.get$width();
    case 4:
      state = 0;
      t1.setTopLeft$2(t8, $.Vector$($.mul(t2, $.sub(t4, t9)), 0));
      t8 = this._scoreTx;
      var t11 = this._scale;
      t8.setToScale$2(t11, t11);
      t11 = this._newGameElement;
      t8 = t11.get$width();
    case 5:
      state = 0;
      t6 = $.add(t6, $.mul(t8, 0.2));
      var t13 = this._scale;
    case 6:
      state = 0;
      t1.setTopLeft$2(t11, $.Vector$($.mul(t6, t13), 0));
      t11 = this._newGameTx;
      t1 = this._scale;
      t11.setToScale$2(t1, t1);
  }
},
 drawOverride$1: function(ctx) {
  $.ElementParentImpl.prototype.drawOverride$1.call(this, ctx);
  this._drawTarget$1(ctx);
},
 _drawTarget$1: function(ctx) {
  $.assert(this._targetX == null === (this._targetY == null));
  var t1 = this._targetX;
  if (!(t1 == null)) {
    var targetLoc = $.Vector$(t1, this._targetY).scale$1(80);
    ctx.set$fillStyle('rgba(255, 0, 0, 0.5)');
    $.CanvasUtil_centeredCircle(ctx, $.add(targetLoc.get$x(), 40), $.add(targetLoc.get$y(), 40), 40);
    ctx.fill$0();
  }
},
 _startPopAnimation$2: function(start, reveals) {
  $.listSuperNativeTypeCheck(reveals, 'is$Iterable');
  if (reveals == null) {
    $.assert($.eq(this.get$game().get$state(), $.CTC35));
    reveals = $.listSuperNativeTypeCheck($.NumberEnumerable_NumberEnumerable$fromRange(0, $.get$length(this.get$game().get$field())).select$1(new $.GameElement__startPopAnimation_anon(this)).where$1(new $.GameElement__startPopAnimation_anon0()).select$1(new $.GameElement__startPopAnimation_anon1()).toList$0(), 'is$Iterable');
  }
  for (var t1 = $.iterator(reveals), t2 = this._popAnimationLayer; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t3 = t1.next$0();
    var t4 = t3.get$x();
    if (typeof t4 !== 'number')
      throw $.iae(t4);
    t4 = 80 * t4;
    var t5 = t3.get$y();
    if (typeof t5 !== 'number')
      throw $.iae(t5);
    var squareOffset = $.CTC41.operator$add$1($.Vector$(t4, 80 * t5));
    var t6 = $.toInt($.mul($.get$length($.sub(t3, start)), 4));
    if (typeof t6 !== 'number')
      throw $.iae(t6);
    var delay = 12 + t6;
    t6 = $.rnd().nextInt$1(10);
    if (typeof t6 !== 'number')
      throw $.iae(t6);
    delay += t6;
    switch (this.get$game().getSquareState$2(t3.get$x(), t3.get$y())) {
      case $.CTC36:
      case $.CTC33:
        var frameCount = 29;
        var texturePrefix = 'balloon_pop';
        break;
      case $.CTC42:
        frameCount = 25;
        texturePrefix = 'balloon_explode';
        break;
      default:
        throw $.$$throw('not supported');
    }
    var request = $.TextAniRequest$(texturePrefix, frameCount, squareOffset, delay);
    $.add$1(request.get$started(), new $.GameElement__startPopAnimation_anon2(this));
    $.add$1(t2, request);
  }
},
 _startPopAnimation$1: function(start) {
  return this._startPopAnimation$2(start,null)
},
 _playPop$0: function() {
  $.playAudio('Pop' + $.S($.rnd().nextInt$1(8)));
},
 _startDartAnimation$1: function(points) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(points, 'is$Iterable')), t2 = this._dartAnimationLayer; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t3 = t1.next$0();
    var t4 = t3.get$x();
    if (typeof t4 !== 'number')
      throw $.iae(t4);
    t4 = 80 * t4;
    t3 = t3.get$y();
    if (typeof t3 !== 'number')
      throw $.iae(t3);
    var squareOffset = $.CTC44.operator$add$1($.Vector$(t4, 80 * t3));
    $.add$1(t2, $.TextAniRequest$('dart_fly_shadow', 56, squareOffset, 0));
    $.add$1(t2, $.TextAniRequest$('dart_fly', 56, squareOffset, 0));
  }
},
 _squareClicked$1: function(args) {
  $.propertyTypeCheck(args, 'is$ElementMouseEventArgs');
  if (!$.boolConversionCheck(this._game.get$gameEnded(), 'is$bool')) {
    var se = $.propertyTypeCheck(args.get$element(), 'is$SquareElement');
    var t1 = $.boolConversionCheck(this._targetMode, 'is$bool');
    var t2 = se.get$x();
    var t3 = se.get$y();
    if (t1)
      this._target$2(t2, t3);
    else
      this._click$3(t2, t3, args.get$shiftKey());
  }
},
 get$_squareClicked: function() { return new $.BoundClosure(this, '_squareClicked$1'); },
 _target$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  this._targetX = x;
  this._targetY = y;
  this._targetChanged.fireEvent$1(null);
  this.invalidateDraw$0();
},
 _toggleFlag$2: function(x, y) {
  $.assert(!$.boolConversionCheck(this.get$game().get$gameEnded(), 'is$bool'));
  var ss = this.get$game().getSquareState$2(x, y);
  if ($.boolConversionCheck($.eq(ss, $.CTC33), 'is$bool')) {
    this.get$game().setFlag$3(x, y, true);
    return true;
  } else if ($.boolConversionCheck($.eq(ss, $.CTC37), 'is$bool')) {
    this.get$game().setFlag$3(x, y, false);
    return true;
  }
  return false;
},
 _click$3: function(x, y, alt) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  $.boolTypeCheck(alt, 'is$bool');
  $.assert(!$.boolConversionCheck(this.get$game().get$gameEnded(), 'is$bool'));
  var ss = this.get$game().getSquareState$2(x, y);
  if (alt)
    if ($.boolConversionCheck($.boolConversionCheck($.eq(ss, $.CTC33), 'is$bool') || $.boolConversionCheck($.eq(ss, $.CTC37), 'is$bool'), 'is$bool')) {
      this._toggleFlag$2(x, y);
      var reveals = null;
    } else if ($.boolConversionCheck($.eq(ss, $.CTC36), 'is$bool'))
      if ($.boolConversionCheck(this.get$game().canReveal$2(x, y), 'is$bool')) {
        var adjHidden = $.$$(this.get$game().get$field().getAdjacentIndices$2(x, y)).select$1(new $.GameElement__click_anon(this)).where$1(new $.GameElement__click_anon0(this)).toList$0();
        $.assert($.gt($.get$length(adjHidden), 0));
        this._startDartAnimation$1(adjHidden);
        reveals = $.listTypeCheck(this.get$game().reveal$2(x, y), 'is$List');
      } else
        reveals = null;
    else
      reveals = null;
  else if ($.boolConversionCheck($.eq(ss, $.CTC33), 'is$bool')) {
    this._startDartAnimation$1([$.Coordinate$(x, y)]);
    reveals = $.listTypeCheck(this.get$game().reveal$2(x, y), 'is$List');
  } else
    reveals = null;
  if ($.boolConversionCheck(!(reveals == null) && $.boolConversionCheck($.gt($.get$length(reveals), 0), 'is$bool'), 'is$bool')) {
    $.assert(!$.eqB(this.get$game().get$state(), $.CTC35));
    if (!alt) {
      var first = $.index(reveals, 0);
      $.assert($.eq(first.get$x(), x));
      $.assert($.eq(first.get$y(), y));
    }
    this._startPopAnimation$2($.Coordinate$(x, y), reveals);
  } else if ($.boolConversionCheck($.eq(this.get$game().get$state(), $.CTC35), 'is$bool'))
    this._startPopAnimation$1($.Coordinate$(x, y));
},
 _updateSize$2: function(w, h) {
  $.intTypeCheck(w, 'is$$int');
  $.intTypeCheck(h, 'is$$int');
  var t1 = $.CTC27.width;
  var sizeX = $.GameElement__getScale(w, t1, 1344);
  var t2 = $.Size$(sizeX, $.GameElement__getScale(h, $.CTC27.height, 1344));
  this.set$size(t2);
  this._lib3_canvas.set$size(t2);
  this._scale = $.doubleTypeCheck($.div(sizeX, t1), 'is$$double');
  this._scaledBoardOffset = $.propertyTypeCheck($.CTC28.scale$1(this._scale), 'is$Vector');
},
 GameElement$1: function(_targetMode) {
  var t1 = this._lib3_canvas;
  t1.registerParent$1(this);
  t1.addElement$1(this._background);
  t1.addElement$1(this._boardElement);
  var t2 = this._newGameElement;
  t1.addElement$1(t2);
  var t3 = this._scoreElement;
  t1.addElement$1(t3);
  t1.addElement$1(this._popAnimationLayer);
  t1.addElement$1(this._dartAnimationLayer);
  this._scoreTx = $.propertyTypeCheck(t3.addTransform$0(), 'is$AffineTransform');
  this._newGameTx = $.propertyTypeCheck(t2.addTransform$0(), 'is$AffineTransform');
},
 is$GameElement: true
};

$$.BoardElement = {"":
 ["_elements", "_transforms", "cacheEnabled", "_updatedEventHandle", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_lib2_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "ElementParentImpl",
 get$visualChildCount: function() {
  var t1 = this._elements;
  if (t1 == null)
    return 0;
  else
    return $.get$length(t1);
},
 getVisualChild$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  return $.index(this._elements, index);
},
 update$0: function() {
  if (this.get$_game() == null)
    this._elements = null;
  else if ($.boolConversionCheck(this.get$_elementsNeedUpdate(), 'is$bool')) {
    this._elements = $.propertyTypeCheck($.Array2d_Array2d(this.get$_game().get$field().get$width(), this.get$_game().get$field().get$height(), null, 'SquareElement'), 'is$Array2d');
    var i = 0;
    while (true) {
      var t1 = $.get$length(this._elements);
      if (typeof t1 !== 'number')
        return this.update$0$bailout(1, i, t1, 0, 0, 0);
      if (!(i < t1))
        break;
      var coords = this._elements.getCoordinate$1(i);
      var se = $.SquareElement$(coords.get$Item1(), coords.get$Item2());
      se.registerParent$1(this);
      $.ClickManager_addHandler(se, this.get$_lib3_parent().get$_squareClicked());
      var etx = se.addTransform$0();
      t1 = coords.get$Item1();
      if (typeof t1 !== 'number')
        return this.update$0$bailout(2, coords, etx, t1, i, se);
      t1 *= 80;
      var t3 = coords.get$Item2();
      if (typeof t3 !== 'number')
        return this.update$0$bailout(3, etx, i, se, t1, t3);
      etx.setToTranslation$2(t1, t3 * 80);
      this._elements.operator$indexSet$2(i, se);
      ++i;
    }
    t1 = this.get$_game().get$field().get$width();
    if (typeof t1 !== 'number')
      return this.update$0$bailout(5, t1, 0, 0, 0, 0);
    t1 *= 80;
    t3 = this.get$_game().get$field().get$height();
    if (typeof t3 !== 'number')
      return this.update$0$bailout(6, t1, t3, 0, 0, 0);
    this.set$size($.Size$(t1, t3 * 80));
  }
  $.ElementParentImpl.prototype.update$0.call(this);
},
 update$0$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      i = env0;
      t1 = env1;
      break;
    case 2:
      coords = env0;
      etx = env1;
      t1 = env2;
      i = env3;
      se = env4;
      break;
    case 3:
      etx = env0;
      i = env1;
      se = env2;
      t1 = env3;
      t3 = env4;
      break;
    case 4:
      i = env0;
      break;
    case 5:
      t1 = env0;
      break;
    case 6:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
    default:
      if (state === 0 && this.get$_game() == null)
        this._elements = null;
      else
        switch (state) {
          case 0:
          default:
            if (state === 6 || state === 5 || state === 4 || state === 3 || state === 2 || state === 1 || state === 0 && $.boolConversionCheck(this.get$_elementsNeedUpdate(), 'is$bool'))
              switch (state) {
                case 0:
                  this._elements = $.propertyTypeCheck($.Array2d_Array2d(this.get$_game().get$field().get$width(), this.get$_game().get$field().get$height(), null, 'SquareElement'), 'is$Array2d');
                  var i = 0;
                default:
                  L0:
                    while (true)
                      switch (state) {
                        case 0:
                          var t1 = $.get$length(this._elements);
                        case 1:
                          state = 0;
                          if (!$.boolConversionCheck($.lt(i, t1), 'is$bool'))
                            break L0;
                          var coords = this._elements.getCoordinate$1(i);
                          var se = $.SquareElement$(coords.get$Item1(), coords.get$Item2());
                          se.registerParent$1(this);
                          $.ClickManager_addHandler(se, this.get$_lib3_parent().get$_squareClicked());
                          var etx = se.addTransform$0();
                          t1 = coords.get$Item1();
                        case 2:
                          state = 0;
                          t1 = $.mul(t1, 80);
                          var t3 = coords.get$Item2();
                        case 3:
                          state = 0;
                          etx.setToTranslation$2(t1, $.mul(t3, 80));
                          $.indexSet(this._elements, i, se);
                          i = $.intTypeCheck($.add(i, 1), 'is$$int');
                        case 4:
                          state = 0;
                      }
                  t1 = this.get$_game().get$field().get$width();
                case 5:
                  state = 0;
                  t1 = $.mul(t1, 80);
                  t3 = this.get$_game().get$field().get$height();
                case 6:
                  state = 0;
                  this.set$size($.Size$(t1, $.mul(t3, 80)));
              }
        }
      $.ElementParentImpl.prototype.update$0.call(this);
  }
},
 get$_lib3_parent: function() {
  return $.propertyTypeCast(this.get$parent(), 'is$PCanvas').get$parent();
},
 get$_game: function() {
  return this.get$_lib3_parent().get$_game();
},
 get$_elementsNeedUpdate: function() {
  $.assert(!(this.get$_game() == null));
  var t1 = this._elements;
  return t1 == null || !$.eqB(t1.get$width(), this.get$_game().get$field().get$width()) || !$.eqB(this._elements.get$height(), this.get$_game().get$field().get$height());
},
 is$BoardElement: true
};

$$.GameBackgroundElement = {"":
 ["_transforms", "cacheEnabled", "_updatedEventHandle", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_lib2_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "PElement",
 update$0: function() {
  if (!$.eqB(this.get$size(), this.get$_lib3_parent().get$size()))
    this.set$size(this.get$_lib3_parent().get$size());
},
 drawOverride$1: function(ctx) {
  var t1 = this.get$_lib3_parent().get$_game().get$field().get$width();
  if (typeof t1 !== 'number')
    return this.drawOverride$1$bailout(1, ctx, t1, 0, 0, 0);
  var rightBgLoc = 80 * (t1 - 1) + 32;
  var t3 = this.get$_lib3_parent().get$_game().get$field().get$height();
  if (typeof t3 !== 'number')
    return this.drawOverride$1$bailout(2, ctx, rightBgLoc, t3, 0, 0);
  var bottomBgLoc = 80 * (t3 - 1) + 32;
  ctx.save$0();
  ctx.translate$2(this.get$_lib3_parent().get$_scaledBoardOffset().get$x(), this.get$_lib3_parent().get$_scaledBoardOffset().get$y());
  $.drawTextureKeyAt(ctx, 'game_board_corner_top_left.png', $.CTC40);
  $.drawTextureKeyAt(ctx, 'game_board_corner_top_right.png', $.Coordinate$(rightBgLoc, 0));
  $.drawTextureKeyAt(ctx, 'game_board_corner_bottom_left.png', $.Coordinate$(0, bottomBgLoc));
  $.drawTextureKeyAt(ctx, 'game_board_corner_bottom_right.png', $.Coordinate$(rightBgLoc, bottomBgLoc));
  var i = 1;
  while (true) {
    t1 = this.get$_lib3_parent().get$_game().get$field().get$width();
    if (typeof t1 !== 'number')
      return this.drawOverride$1$bailout(3, ctx, rightBgLoc, t1, bottomBgLoc, i);
    if (!(i < t1 - 1))
      break;
    var xLoc = 80 * i + 32;
    $.drawTextureKeyAt(ctx, 'game_board_side_top.png', $.Coordinate$(xLoc, 0));
    $.drawTextureKeyAt(ctx, 'game_board_side_bottom.png', $.Coordinate$(xLoc, bottomBgLoc));
    ++i;
  }
  i = 1;
  while (true) {
    t1 = this.get$_lib3_parent().get$_game().get$field().get$height();
    if (typeof t1 !== 'number')
      return this.drawOverride$1$bailout(4, ctx, rightBgLoc, t1, i, 0);
    if (!(i < t1 - 1))
      break;
    var yLoc = 80 * i + 32;
    $.drawTextureKeyAt(ctx, 'game_board_side_left.png', $.Coordinate$(0, yLoc));
    $.drawTextureKeyAt(ctx, 'game_board_side_right.png', $.Coordinate$(rightBgLoc, yLoc));
    ++i;
  }
  ctx.restore$0();
  ctx.save$0();
  ctx.transform$6(this.get$_lib3_parent().get$_scale(), 0, 0, this.get$_lib3_parent().get$_scale(), 0, 0);
  this._drawCorner$1(ctx);
  ctx.save$0();
  ctx.transform$6(-1, 0, 0, 1, $.CTC27.width, 0);
  this._drawCorner$1(ctx);
  t1 = $.CTC27.height;
  ctx.transform$6(1, 0, 0, -1, 0, t1);
  this._drawCorner$1(ctx);
  ctx.restore$0();
  ctx.transform$6(1, 0, 0, -1, 0, t1);
  this._drawCorner$1(ctx);
  ctx.restore$0();
},
 drawOverride$1$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var ctx = env0;
      t1 = env1;
      break;
    case 2:
      ctx = env0;
      rightBgLoc = env1;
      t3 = env2;
      break;
    case 3:
      ctx = env0;
      rightBgLoc = env1;
      t1 = env2;
      bottomBgLoc = env3;
      i = env4;
      break;
    case 4:
      ctx = env0;
      rightBgLoc = env1;
      t1 = env2;
      i = env3;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this.get$_lib3_parent().get$_game().get$field().get$width();
    case 1:
      state = 0;
      t1 = $.sub(t1, 1);
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      var rightBgLoc = 80 * t1 + 32;
      var t3 = this.get$_lib3_parent().get$_game().get$field().get$height();
    case 2:
      state = 0;
      t3 = $.sub(t3, 1);
      if (typeof t3 !== 'number')
        throw $.iae(t3);
      var bottomBgLoc = 80 * t3 + 32;
      ctx.save$0();
      ctx.translate$2(this.get$_lib3_parent().get$_scaledBoardOffset().get$x(), this.get$_lib3_parent().get$_scaledBoardOffset().get$y());
      $.drawTextureKeyAt(ctx, 'game_board_corner_top_left.png', $.CTC40);
      $.drawTextureKeyAt(ctx, 'game_board_corner_top_right.png', $.Coordinate$(rightBgLoc, 0));
      $.drawTextureKeyAt(ctx, 'game_board_corner_bottom_left.png', $.Coordinate$(0, bottomBgLoc));
      $.drawTextureKeyAt(ctx, 'game_board_corner_bottom_right.png', $.Coordinate$(rightBgLoc, bottomBgLoc));
      var i = 1;
    case 3:
      L0:
        while (true)
          switch (state) {
            case 0:
              t1 = this.get$_lib3_parent().get$_game().get$field().get$width();
            case 3:
              state = 0;
              if (!$.lt(i, $.sub(t1, 1)))
                break L0;
              var xLoc = 80 * i + 32;
              $.drawTextureKeyAt(ctx, 'game_board_side_top.png', $.Coordinate$(xLoc, 0));
              $.drawTextureKeyAt(ctx, 'game_board_side_bottom.png', $.Coordinate$(xLoc, bottomBgLoc));
              ++i;
          }
      i = 1;
    case 4:
      L1:
        while (true)
          switch (state) {
            case 0:
              t1 = this.get$_lib3_parent().get$_game().get$field().get$height();
            case 4:
              state = 0;
              if (!$.lt(i, $.sub(t1, 1)))
                break L1;
              var yLoc = 80 * i + 32;
              $.drawTextureKeyAt(ctx, 'game_board_side_left.png', $.Coordinate$(0, yLoc));
              $.drawTextureKeyAt(ctx, 'game_board_side_right.png', $.Coordinate$(rightBgLoc, yLoc));
              ++i;
          }
      ctx.restore$0();
      ctx.save$0();
      ctx.transform$6(this.get$_lib3_parent().get$_scale(), 0, 0, this.get$_lib3_parent().get$_scale(), 0, 0);
      this._drawCorner$1(ctx);
      ctx.save$0();
      ctx.transform$6(-1, 0, 0, 1, $.CTC27.width, 0);
      this._drawCorner$1(ctx);
      t1 = $.CTC27.height;
      ctx.transform$6(1, 0, 0, -1, 0, t1);
      this._drawCorner$1(ctx);
      ctx.restore$0();
      ctx.transform$6(1, 0, 0, -1, 0, t1);
      this._drawCorner$1(ctx);
      ctx.restore$0();
  }
},
 _drawCorner$1: function(ctx) {
  $.drawTextureKeyAt(ctx, 'background_top_left.png', $.CTC40);
  $.drawTextureKeyAt(ctx, 'background_side_left.png', $.Coordinate$(0, $.CTC28.y));
},
 get$_lib3_parent: function() {
  return $.propertyTypeCast(this.get$parent(), 'is$PCanvas').get$parent();
},
 is$GameBackgroundElement: true
};

$$.SquareElement = {"":
 ["x?", "y?", "_lastDrawingState", "_transforms", "cacheEnabled", "_updatedEventHandle", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_lib2_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "PElement",
 update$0: function() {
  if (!$.eqB(this._lastDrawingState, this.get$_squareState())) {
    this._lastDrawingState = $.propertyTypeCheck(this.get$_squareState(), 'is$SquareState');
    this.invalidateDraw$0();
  }
},
 drawOverride$1: function(ctx) {
  var textureName = null;
  switch (this._lastDrawingState) {
    case $.CTC33:
      textureName = this._getHiddenTexture$0();
      break;
    case $.CTC37:
      textureName = 'balloon_tagged_frozen.png';
      break;
    case $.CTC36:
      var t1 = this.get$_adjacentCount();
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= 9)
        throw $.ioore(t1);
      textureName = $.S($.CTC45[t1]) + '.png';
      break;
    case $.CTC42:
      textureName = 'balloon_tagged_bomb.png';
      break;
  }
  if (textureName == null) {
    ctx.set$fillStyle(this.get$_fillStyle());
    ctx.fillRect$4(0, 0, this.get$width(), this.get$height());
  } else
    $.drawTextureKeyAt(ctx, textureName, $.CTC40);
},
 toString$0: function() {
  return 'Square at [' + $.S(this.x) + ', ' + $.S(this.y) + ']';
},
 _getHiddenTexture$0: function() {
  $.assert($.eq(this._lastDrawingState, $.CTC33));
  if ($.boolConversionCheck($.eq(this.get$_game().get$state(), $.CTC35), 'is$bool')) {
    var index = $.mod($.add(this.x, this.y), 4);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= 4)
      throw $.ioore(index);
    return $.CTC46[index];
  } else
    return 'balloon.png';
},
 get$_squareState: function() {
  return this.get$_game().getSquareState$2(this.x, this.y);
},
 get$_adjacentCount: function() {
  return this.get$_game().get$field().getAdjacentCount$2(this.x, this.y);
},
 get$_game: function() {
  return $.propertyTypeCheck(this.get$parent(), 'is$BoardElement').get$_game();
},
 get$_fillStyle: function() {
  var t1 = this._lastDrawingState;
  switch (t1) {
    case $.CTC43:
      return 'green';
    default:
      throw $.$$throw('not supported - ' + $.S(t1));
  }
},
 SquareElement$2: function(x, y) {
  $.ClickManager_setClickable(this, true);
},
 is$SquareElement: true
};

$$.ResourceLoader = {"":
 ["_resources?"],
 "super": "Object",
 get$state: function() {
  return this._lib3_state;
},
 get$loaded: function() {
  return this._loadedEvent;
},
 get$progress: function() {
  return this._progressEvent;
},
 getResource$1: function(url) {
  return $.index(this._resources, url);
},
 load$0: function() {
  $.assert(this._lib3_state === 'unloaded');
  this._lib3_state = 'loading';
  for (var t1 = $.iterator(this._urlList); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    this._doLoad$1(t1.next$0());
},
 get$load: function() { return new $.BoundClosure0(this, 'load$0'); },
 _onLoaded$1: function(uri) {
  $.assert(this._lib3_state === 'loading');
  $.assert(this._resources.containsKey$1(uri));
  var t1 = this._completed;
  $.assert(!$.boolConversionCheck($.contains$1(t1, uri), 'is$bool'));
  $.add$1(t1, uri);
  if ($.boolConversionCheck($.eq($.get$length(t1), $.get$length(this._urlList)), 'is$bool')) {
    this._lib3_state = 'loaded';
    this._loadedEvent.fireEvent$1($.CTC23);
  } else
    this._progressEvent.fireEvent$1($.CTC23);
}
};

$$.ImageLoader = {"":
 ["_loaded", "_urlList", "_loadedEvent", "_progressEvent", "_resources", "_completed", "_lib3_state"],
 "super": "ResourceLoader",
 _doLoad$1: function(url) {
  $.stringTypeCheck(url, 'is$String');
  $.assert(!(url == null));
  var t1 = this._resources;
  var t2 = $.boolConversionCheck(t1.containsKey$1(url), 'is$bool');
  if (typeof t2 !== 'boolean')
    return this._doLoad$1$bailout(1, url, t1, t2);
  $.assert(!t2);
  var img = $._Elements_ImageElement(url, null, null);
  t1.operator$indexSet$2(url, img);
  if ($.boolConversionCheck(img.get$complete(), 'is$bool'))
    this._loadHandler$2(url, img);
  else
    $.add$1(img.get$on().get$load(), new $.ImageLoader__doLoad_anon(this, url));
},
 _doLoad$1$bailout: function(state, url, t1, t2) {
  $.assert(!t2);
  var img = $._Elements_ImageElement(url, null, null);
  $.indexSet(t1, url, img);
  if ($.boolConversionCheck(img.get$complete(), 'is$bool'))
    this._loadHandler$2(url, img);
  else
    $.add$1(img.get$on().get$load(), new $.ImageLoader__doLoad_anon(this, url));
},
 _loadHandler$2: function(originalUrl, img) {
  $.stringTypeCheck(originalUrl, 'is$String');
  $.callTypeCheck(img, 'is$ImageElement');
  var t1 = this._loaded;
  $.assert(!$.boolConversionCheck($.contains$1(t1, originalUrl), 'is$bool'));
  $.add$1(t1, originalUrl);
  this._onLoaded$1(originalUrl);
}
};

$$.AudioLoader = {"":
 ["context?", "_urlList", "_loadedEvent", "_progressEvent", "_resources", "_completed", "_lib3_state"],
 "super": "ResourceLoader",
 _doLoad$1: function(url) {
  $.stringTypeCheck(url, 'is$String');
  var request = $.callTypeCheck($._HttpRequestFactoryProvider_HttpRequest(), 'is$HttpRequest');
  request.open$3('GET', url, true);
  request.set$responseType('arraybuffer');
  $.add$1(request.get$on().get$load(), new $.AudioLoader__doLoad_anon(request, url, this));
  $.add$1(request.get$on().get$error(), new $.AudioLoader__doLoad_anon0());
  request.send$0();
},
 _saveBuffer$2: function(url, buffer) {
  $.stringTypeCheck(url, 'is$String');
  $.callTypeCheck(buffer, 'is$AudioBuffer');
  if (buffer == null) {
    $.print('error decoding file data: ' + $.S(url));
    return;
  }
  $.indexSet(this._resources, url, buffer);
  this._onLoaded$1(url);
}
};

$$.TextureAnimationElement = {"":
 ["_requests", "_transforms", "cacheEnabled", "_updatedEventHandle", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_lib2_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "PElement",
 add$1: function(request) {
  $.propertyTypeCheck(request, 'is$TextAniRequest');
  $.assert(!(request == null));
  $.assert(request.get$fresh());
  this._requests.push(request);
  this.invalidateDraw$0();
},
 update$0: function() {
  var toRemove = $.ListImplementation_List(null, 'TextAniRequest');
  $.setRuntimeTypeInfo(toRemove, { 'E': 'TextAniRequest' });
  for (var t1 = this._requests, t2 = $.iterator(t1); $.boolConversionCheck(t2.hasNext$0(), 'is$bool');) {
    var t3 = t2.next$0();
    t3.update$0();
    var t4 = $.boolConversionCheck(t3.get$fresh(), 'is$bool');
    if (typeof t4 !== 'boolean')
      return this.update$0$bailout(1, t1, toRemove, t3, t4, t2);
    $.assert(!t4);
    if ($.boolConversionCheck(t3.get$done(), 'is$bool'))
      toRemove.push(t3);
  }
  for (t2 = $.iterator(toRemove); $.boolConversionCheck(t2.hasNext$0(), 'is$bool');) {
    var i = $.indexOf$2(t1, t2.next$0(), 0);
    if (typeof i !== 'number')
      return this.update$0$bailout(2, t1, t2, i, 0, 0);
    $.assert(i >= 0);
    $.removeRange(t1, i, 1);
  }
  if (t1.length > 0)
    this.invalidateDraw$0();
},
 update$0$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      t1 = env0;
      toRemove = env1;
      t3 = env2;
      t4 = env3;
      t2 = env4;
      break;
    case 2:
      t1 = env0;
      t2 = env1;
      i = env2;
      break;
  }
  switch (state) {
    case 0:
      var toRemove = $.ListImplementation_List(null, 'TextAniRequest');
      $.setRuntimeTypeInfo(toRemove, { 'E': 'TextAniRequest' });
      var t1 = this._requests;
      var t2 = $.iterator(t1);
    case 1:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!$.boolConversionCheck(t2.hasNext$0(), 'is$bool'))
                break L0;
              var t3 = t2.next$0();
              t3.update$0();
              var t4 = $.boolConversionCheck(t3.get$fresh(), 'is$bool');
            case 1:
              state = 0;
              $.assert(!t4);
              if ($.boolConversionCheck(t3.get$done(), 'is$bool'))
                toRemove.push(t3);
          }
      t2 = $.iterator(toRemove);
    case 2:
      L1:
        while (true)
          switch (state) {
            case 0:
              if (!$.boolConversionCheck(t2.hasNext$0(), 'is$bool'))
                break L1;
              var i = $.indexOf$2(t1, t2.next$0(), 0);
            case 2:
              state = 0;
              $.assert($.ge(i, 0));
              $.removeRange(t1, i, 1);
          }
      if ($.boolConversionCheck(t1.length > 0, 'is$bool'))
        this.invalidateDraw$0();
  }
},
 drawOverride$1: function(ctx) {
  for (var t1 = $.iterator(this._requests); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    t1.next$0().drawOverride$1(ctx);
},
 is$TextureAnimationElement: true
};

$$.TextAniRequest = {"":
 ["_texturePrefix", "_frameCount", "_offset", "_delay", "_startEventHandle", "_lib3_done", "_frame"],
 "super": "Object",
 get$fresh: function() {
  return this._frame == null;
},
 get$done: function() {
  return this._lib3_done;
},
 get$started: function() {
  return this._startEventHandle;
},
 update$0: function() {
  var t1 = this._frame;
  if (t1 == null) {
    t1 = this._delay;
    if (t1 !== (t1 | 0))
      return this.update$0$bailout(1, t1, 0);
    this._frame = -t1;
  } else {
    var t2 = this._frameCount;
    if ($.boolConversionCheck($.lt(t1, t2 - 1), 'is$bool')) {
      t1 = this._frame;
      if (t1 !== (t1 | 0))
        return this.update$0$bailout(2, t2, t1);
      this._frame = t1 + 1;
      $.assert($.lt(this._frame, t2));
    } else
      this._lib3_done = true;
  }
  t1 = this._frame;
  if (t1 !== (t1 | 0))
    return this.update$0$bailout(3, t1, 0);
  if (t1 === 0) {
    t1 = this._lib3_done;
    t1 = !t1;
  } else
    t1 = false;
  if (t1)
    this._startEventHandle.fireEvent$1($.CTC23);
},
 update$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t2 = env0;
      t1 = env1;
      break;
    case 3:
      t1 = env0;
      break;
    case 4:
      t1 = env0;
      break;
  }
  switch (state) {
    case 0:
      var t1 = this._frame;
    default:
      if (state === 1 || state === 0 && t1 == null)
        switch (state) {
          case 0:
            t1 = this._delay;
          case 1:
            state = 0;
            this._frame = $.intTypeCheck($.neg(t1), 'is$$int');
        }
      else
        switch (state) {
          case 0:
            var t2 = this._frameCount;
          case 2:
            if (state === 2 || state === 0 && $.boolConversionCheck($.lt(t1, t2 - 1), 'is$bool'))
              switch (state) {
                case 0:
                  t1 = this._frame;
                case 2:
                  state = 0;
                  this._frame = $.intTypeCheck($.add(t1, 1), 'is$$int');
                  $.assert($.lt(this._frame, t2));
              }
            else
              this._lib3_done = true;
        }
      t1 = this._frame;
    case 3:
      state = 0;
    case 4:
      if (state === 4 || state === 0 && $.boolConversionCheck(t1 === 0, 'is$bool'))
        switch (state) {
          case 0:
            t1 = $.boolConversionCheck(this._lib3_done, 'is$bool');
          case 4:
            state = 0;
            t1 = !t1;
        }
      else
        t1 = false;
      if (t1)
        this._startEventHandle.fireEvent$1($.CTC23);
  }
},
 drawOverride$1: function(ctx) {
  var frame = $.boolConversionCheck($.lt(this._frame, 0), 'is$bool') ? 0 : this._frame;
  var frameString = $.toString($.toInt(frame));
  if (typeof frameString !== 'string')
    return this.drawOverride$1$bailout(1, ctx, frameString);
  for (; frameString.length < 4;)
    frameString = '0' + frameString;
  var frameName = this._texturePrefix + '_' + frameString + '.png';
  ctx.save$0();
  var t1 = this._offset;
  ctx.translate$2(t1.get$x(), t1.get$y());
  $.drawTextureKeyAt(ctx, frameName, $.CTC40);
  ctx.restore$0();
},
 drawOverride$1$bailout: function(state, ctx, frameString) {
  for (; $.boolConversionCheck($.lt($.get$length(frameString), 4), 'is$bool');)
    frameString = '0' + $.S(frameString);
  var frameName = this._texturePrefix + '_' + $.S(frameString) + '.png';
  ctx.save$0();
  var t1 = this._offset;
  ctx.translate$2(t1.get$x(), t1.get$y());
  $.drawTextureKeyAt(ctx, frameName, $.CTC40);
  ctx.restore$0();
},
 TextAniRequest$4: function(_texturePrefix, _frameCount, _offset, delay) {
  $.intTypeCheck(delay, 'is$$int');
  $.assert($.ge(this._delay, 0));
  $.assert(!(this._texturePrefix === null));
  $.assert(this._frameCount > 0);
  $.assert(this._offset.get$isValid());
},
 is$TextAniRequest: true
};

$$.ScoreElement = {"":
 ["_clockStr", "_minesStr", "_textSize", "_transforms", "cacheEnabled", "_updatedEventHandle", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_lib2_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "PElement",
 update$0: function() {
  var newMineStr = $.toString(this.get$_game().get$minesLeft());
  if (!$.eqB(newMineStr, this._minesStr)) {
    this._minesStr = $.stringTypeCheck(newMineStr, 'is$String');
    this.invalidateDraw$0();
  }
  var newClockStr = !(this.get$_game().get$duration() == null) ? $.toString(this.get$_game().get$duration().get$inSeconds()) : '';
  if (!$.eqB(newClockStr, this._clockStr)) {
    this._clockStr = $.stringTypeCheck(newClockStr, 'is$String');
    this.invalidateDraw$0();
  }
  $.PElement.prototype.update$0.call(this);
},
 drawOverride$1: function(ctx) {
  var t1 = this.get$height();
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  var rowHeight = 0.5 * t1;
  ctx.set$font($.S($.toInt(rowHeight * 0.7)) + 'px Slackey');
  ctx.set$textBaseline('middle');
  var textSize = this._getTextSize$1(ctx);
  if (typeof textSize !== 'number')
    return this.drawOverride$1$bailout(1, ctx, textSize, rowHeight);
  ctx.set$fillStyle('black');
  ctx.set$textAlign('right');
  var t2 = 0.5 * rowHeight;
  ctx.fillText$3('MINES LEFT:', textSize, t2);
  ctx.set$textAlign('left');
  var t3 = this._minesStr;
  var t4 = textSize + 15;
  ctx.fillText$3(t3, t4, t2);
  ctx.set$textAlign('right');
  t2 = 1.5 * rowHeight;
  ctx.fillText$3('TIME:', textSize, t2);
  ctx.set$textAlign('left');
  ctx.fillText$3(this._clockStr, t4, t2);
},
 drawOverride$1$bailout: function(state, ctx, textSize, rowHeight) {
  ctx.set$fillStyle('black');
  ctx.set$textAlign('right');
  var t2 = 0.5 * rowHeight;
  ctx.fillText$3('MINES LEFT:', textSize, t2);
  ctx.set$textAlign('left');
  ctx.fillText$3(this._minesStr, $.add(textSize, 15), t2);
  ctx.set$textAlign('right');
  t2 = 1.5 * rowHeight;
  ctx.fillText$3('TIME:', textSize, t2);
  ctx.set$textAlign('left');
  ctx.fillText$3(this._clockStr, $.add(textSize, 15), t2);
},
 _getTextSize$1: function(ctx) {
  if (this._textSize == null)
    this._textSize = $.numTypeCheck(ctx.measureText$1('MINES LEFT:').get$width(), 'is$num');
  return this._textSize;
},
 get$_lib3_parent: function() {
  return $.propertyTypeCast(this.get$parent(), 'is$PCanvas').get$parent();
},
 get$_game: function() {
  return this.get$_lib3_parent().get$_game();
},
 is$ScoreElement: true
};

$$.NewGameElement = {"":
 ["_clickedEvent?", "_transforms", "cacheEnabled", "_updatedEventHandle", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_lib2_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "PElement",
 get$clicked: function() {
  return this._clickedEvent;
},
 drawOverride$1: function(ctx) {
  $.drawTextureKeyAt(ctx, 'button_new_game.png', $.CTC40);
},
 get$_lib3_parent: function() {
  return $.propertyTypeCast(this.get$parent(), 'is$PCanvas').get$parent();
},
 get$_game: function() {
  return this.get$_lib3_parent().get$_game();
},
 NewGameElement$0: function() {
  $.ClickManager_setClickable(this, true);
  $.ClickManager_addHandler(this, new $.anon0(this));
},
 is$NewGameElement: true
};

$$.TextureInput = {"":
 ["name?", "frame?", "offset", "rotated?", "sourceColorRect?", "sourceSize"],
 "super": "Object",
 toString$0: function() {
  return this.name;
},
 is$TextureInput: true
};

$$.PElement = {"":
 ["_lib2_parent?"],
 "super": "AttachableObject",
 get$width: function() {
  return this._width;
},
 get$height: function() {
  return this._height;
},
 get$size: function() {
  return $.Size$(this._width, this._height);
},
 set$size: function(value) {
  $.propertyTypeCheck(value, 'is$Size');
  $.assert(value.get$isValid());
  this._width = $.numTypeCheck(value.get$width(), 'is$num');
  this._height = $.numTypeCheck(value.get$height(), 'is$num');
  this.invalidateDraw$0();
},
 get$visualChildCount: function() {
  return 0;
},
 get$parent: function() {
  return this._lib2_parent;
},
 get$updated: function() {
  return this._updatedEventHandle;
},
 get$invalidated: function() {
  return this._invalidatedEventHandle;
},
 getTransform$0: function() {
  var tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  $.forEach(this._transforms, tx.get$concatenate());
  return tx;
},
 draw$1: function(ctx) {
  $.callTypeCheck(ctx, 'is$CanvasRenderingContext2D');
  this.update$0();
  var dirty = this._lastDrawSize == null;
  this.drawCore$1(ctx);
  return dirty;
},
 update$0: function() {
  this._updatedEventHandle.fireEvent$1($.CTC23);
},
 drawCore$1: function(ctx) {
  $.callTypeCheck(ctx, 'is$CanvasRenderingContext2D');
  if ($.boolConversionCheck(this.cacheEnabled, 'is$bool'))
    this._drawCached$1(ctx);
  else
    this._drawNormal$1(ctx);
},
 addTransform$0: function() {
  var tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  this._transforms.push(tx);
  return tx;
},
 invalidateDraw$0: function() {
  if (!(this._lastDrawSize == null)) {
    this._lastDrawSize = null;
    this._invalidateParent$0();
  }
},
 hasVisualChild$1: function(element) {
  var length$ = this.get$visualChildCount();
  if (typeof length$ !== 'number')
    return this.hasVisualChild$1$bailout(1, element, length$);
  for (var i = 0; i < length$; ++i) {
    var t1 = this.getVisualChild$1(i);
    if (element == null ? t1 == null : element === t1)
      return true;
  }
  return false;
},
 hasVisualChild$1$bailout: function(state, element, length$) {
  for (var i = 0; $.lt(i, length$); ++i) {
    var t1 = this.getVisualChild$1(i);
    if (element == null ? t1 == null : element === t1)
      return true;
  }
  return false;
},
 getVisualChild$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  throw $.$$throw('no children for this type');
},
 registerParent$1: function(parent$) {
  $.propertyTypeCheck(parent$, 'is$ElementParent');
  $.assert(this._lib2_parent == null);
  this._lib2_parent = parent$;
},
 _drawCached$1: function(ctx) {
  if (this._cacheCanvas == null)
    this._cacheCanvas = $.callTypeCheck($._Elements_CanvasElement(null, null), 'is$CanvasElement');
  var t1 = this._lastDrawSize;
  var intLastDrawSize = t1 == null ? null : $.Size$($.toInt(t1.get$width()), $.toInt(this._lastDrawSize.get$height()));
  if (!$.eqB($.CanvasUtil_getCanvasSize(this._cacheCanvas), intLastDrawSize)) {
    $.indexSet(this._cacheCanvas.get$attributes(), 'width', this.get$width());
    $.indexSet(this._cacheCanvas.get$attributes(), 'height', this.get$height());
    this._drawInternal$1(this._cacheCanvas.get$context2d());
  }
  ctx.save$0();
  $.CanvasUtil_transform(ctx, this.getTransform$0());
  ctx.drawImage$3(this._cacheCanvas, 0, 0);
  ctx.restore$0();
},
 _drawNormal$1: function(ctx) {
  var tx = this.getTransform$0();
  if ($.boolConversionCheck(this._isClipped$2(tx, ctx), 'is$bool'))
    return;
  ctx.save$0();
  $.CanvasUtil_transform(ctx, tx);
  if ($.boolConversionCheck(this.clip, 'is$bool')) {
    ctx.beginPath$0();
    ctx.rect$4(0, 0, this.get$width(), this.get$height());
    ctx.clip$0();
  }
  this._drawInternal$1(ctx);
  ctx.restore$0();
},
 _drawInternal$1: function(ctx) {
  $.callTypeCheck(ctx, 'is$CanvasRenderingContext2D');
  var t1 = this._alpha;
  if (!(t1 == null))
    ctx.set$globalAlpha(t1);
  this.drawOverride$1(ctx);
  this._lastDrawSize = $.propertyTypeCheck(this.get$size(), 'is$Size');
},
 _isClipped$2: function(tx, ctx) {
  $.propertyTypeCheck(tx, 'is$AffineTransform');
  if ($.boolConversionCheck(this.clip, 'is$bool'))
    ;
  return false;
},
 _invalidateParent$0: function() {
  $.assert(!(this._lib2_parent == null));
  this._invalidatedEventHandle.fireEvent$1($.CTC23);
  this._lib2_parent.childInvalidated$1(this);
},
 is$PElement: true
};

$$.ElementParentImpl = {"":
 [],
 "super": "PElement",
 onChildrenChanged$0: function() {
  this.invalidateDraw$0();
},
 childInvalidated$1: function(child) {
  $.assert(this.hasVisualChild$1(child));
  this.invalidateDraw$0();
},
 update$0: function() {
  this._forEach$1(new $.ElementParentImpl_update_anon());
  $.PElement.prototype.update$0.call(this);
},
 drawOverride$1: function(ctx) {
  this._forEach$1(new $.ElementParentImpl_drawOverride_anon(ctx));
},
 _forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Action1');
  var length$ = this.get$visualChildCount();
  if (typeof length$ !== 'number')
    return this._forEach$1$bailout(1, f, length$);
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    f.call$1(this.getVisualChild$1(i));
},
 _forEach$1$bailout: function(state, f, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    f.call$1(this.getVisualChild$1(i));
},
 is$ElementParent: true,
 is$Object: function() { return true; }
};

$$.Panel = {"":
 [],
 "super": "ElementParentImpl",
 addElement$1: function(element) {
  this.insertAt$2($.propertyTypeCheck(element, 'is$PElement'), this._children.length);
},
 insertAt$2: function(element, index) {
  $.intTypeCheck(index, 'is$$int');
  if (index == null)
    index = 0;
  element.registerParent$1(this);
  $.insertRange$3(this._children, index, 1, element);
  $.assert(!$.boolConversionCheck($.get$Panel__containerTransformProperty().isSet$1(element), 'is$bool'));
  $.get$Panel__containerTransformProperty().set$2(element, element.addTransform$0());
  this.onChildrenChanged$0();
},
 getVisualChild$1: function(index) {
  var t1 = this._children;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 get$visualChildCount: function() {
  return this._children.length;
},
 getChildTransform$1: function(child) {
  $.assert(this.hasVisualChild$1(child));
  var tx = $.get$Panel__containerTransformProperty().get$1(child);
  $.assert(!(tx == null));
  return tx;
},
 drawOverride$1: function(ctx) {
  var t1 = this.background;
  if (!(t1 == null)) {
    ctx.set$fillStyle(t1);
    ctx.fillRect$4(0, 0, this.get$width(), this.get$height());
  }
  $.ElementParentImpl.prototype.drawOverride$1.call(this, ctx);
}
};

$$.PCanvas = {"":
 ["_children", "background", "_transforms", "cacheEnabled", "_updatedEventHandle", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_lib2_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "Panel",
 setTopLeft$2: function(element, value) {
  $.propertyTypeCheck(element, 'is$PElement');
  $.propertyTypeCheck(value, 'is$Coordinate');
  this.getChildTransform$1(element).setToTranslation$2(value.get$x(), value.get$y());
},
 is$PCanvas: true
};

$$.Stage = {"":
 ["_invalidatedEventHandle", "_canvas?", "_lib2_element?", "_ctx", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "AttachableObject",
 get$size: function() {
  var t1 = this._canvas;
  return $.Size$(t1.get$width(), t1.get$height());
},
 get$invalidated: function() {
  return this._invalidatedEventHandle;
},
 get$rootElement: function() {
  return this._lib2_element;
},
 draw$0: function() {
  var t1 = this._ctx;
  var t2 = t1 == null;
  var t3 = this._canvas;
  if (t2)
    this._ctx = $.callTypeCheck(t3.get$context2d(), 'is$CanvasRenderingContext2D');
  else
    t1.clearRect$4(0, 0, t3.get$width(), t3.get$height());
  return this._lib2_element.draw$1(this._ctx);
},
 childInvalidated$1: function(child) {
  $.assert($.eq(child, this._lib2_element));
  this._invalidatedEventHandle.fireEvent$1($.CTC23);
},
 Stage$2: function(_canvas, _element) {
  this._lib2_element.registerParent$1(this);
},
 is$Stage: true,
 is$ElementParent: true,
 is$Object: function() { return true; }
};

$$.ClickManager = {"":
 ["_stage", "_mouseDownElement"],
 "super": "Object",
 _mouseMove$1: function(e) {
  var items = this._updateMouseLocation$1($.getMouseEventCoordinate($.callTypeCheck(e, 'is$MouseEvent')));
  if (typeof items !== 'string' && (typeof items !== 'object' || items === null || items.constructor !== Array && !items.is$JavaScriptIndexingBehavior()))
    return this._mouseMove$1$bailout(1, items);
  for (var i = 0; i < items.length; ++i) {
    var t1 = $.get$ClickManager__mouseMoveEvent();
    if (i < 0 || i >= items.length)
      throw $.ioore(i);
    t1.fireEvent$2(items[i], $.getRange(items, 0, i));
  }
},
 _mouseMove$1$bailout: function(state, items) {
  for (var i = 0; $.lt(i, $.get$length(items)); ++i)
    $.get$ClickManager__mouseMoveEvent().fireEvent$2($.index(items, i), $.getRange(items, 0, i));
},
 get$_mouseMove: function() { return new $.BoundClosure(this, '_mouseMove$1'); },
 _mouseOut$1: function(e) {
  $.callTypeCheck(e, 'is$MouseEvent');
  this._updateMouseLocation$1(null);
  $.get$ClickManager__mouseOutEvent().fireEvent$2(this._stage, $.CTC23);
},
 get$_mouseOut: function() { return new $.BoundClosure(this, '_mouseOut$1'); },
 _mouseUp$1: function(e) {
  $.callTypeCheck(e, 'is$MouseEvent');
  if (!(this._mouseDownElement == null)) {
    var upElement = $.$$(this._updateMouseLocation$1($.getMouseEventCoordinate(e))).firstOrDefault$1(new $.ClickManager__mouseUp_anon());
    if ($.boolConversionCheck($.eq(upElement, this._mouseDownElement), 'is$bool'))
      this._doClick$2(upElement, e);
    this._mouseDownElement = null;
  }
},
 get$_mouseUp: function() { return new $.BoundClosure(this, '_mouseUp$1'); },
 _mouseDown$1: function(e) {
  this._mouseDownElement = $.propertyTypeCheck($.$$(this._updateMouseLocation$1($.getMouseEventCoordinate($.callTypeCheck(e, 'is$MouseEvent')))).firstOrDefault$1(new $.ClickManager__mouseDown_anon()), 'is$PElement');
},
 get$_mouseDown: function() { return new $.BoundClosure(this, '_mouseDown$1'); },
 _updateMouseLocation$1: function(value) {
  $.propertyTypeCheck(value, 'is$Coordinate');
  return $.Mouse_markMouseOver(this._stage, value);
},
 _doClick$2: function(element, e) {
  $.propertyTypeCheck(element, 'is$PElement');
  $.assert(!(element == null));
  var args = $.ElementMouseEventArgs_ElementMouseEventArgs(element, e);
  $.get$ClickManager__clickEvent().fireEvent$2(element, args);
},
 ClickManager$1: function(_stage) {
  var t1 = this._stage;
  $.assert(!(t1 === null));
  $.add$1(t1.get$_canvas().get$on().get$mouseMove(), this.get$_mouseMove());
  $.add$1(t1.get$_canvas().get$on().get$mouseOut(), this.get$_mouseOut());
  $.add$1(t1.get$_canvas().get$on().get$mouseUp(), this.get$_mouseUp());
  $.add$1(t1.get$_canvas().get$on().get$mouseDown(), this.get$_mouseDown());
},
 is$ClickManager: true
};

$$.ElementMouseEventArgs = {"":
 ["element?", "shiftKey?"],
 "super": "EventArgs",
 is$ElementMouseEventArgs: true
};

$$.GameStorage = {"":
 ["_highScoreUpdated", "_storage"],
 "super": "Object",
 recordState$1: function(state) {
  $.assert(true);
  this._incrementIntValue$1(state.name);
},
 updateHighScore$1: function(game) {
  $.propertyTypeCheck(game, 'is$Game');
  $.assert(!(game == null));
  $.assert($.eq(game.get$state(), $.CTC34));
  var w = game.get$field().get$width();
  var h = game.get$field().get$height();
  var m = game.get$field().get$mineCount();
  var duration = game.get$duration().get$inMilliseconds();
  $.intTypeCheck(w, 'is$$int');
  $.intTypeCheck(h, 'is$$int');
  $.intTypeCheck(m, 'is$$int');
  var key = 'w' + $.S(w) + '-h' + $.S(h) + '-m' + $.S(m);
  var currentScore = this._getIntValue$2(key, null);
  if ($.boolConversionCheck(currentScore == null || $.boolConversionCheck($.gt(currentScore, duration), 'is$bool'), 'is$bool')) {
    this._setIntValue$2(key, duration);
    this._highScoreUpdated.fireEvent$1(null);
    return true;
  } else
    return false;
},
 reset$0: function() {
  $.clear(this._storage);
},
 toString$0: function() {
  return $.Maps_mapToString(this._storage);
},
 _getIntValue$2: function(key, defaultValue) {
  $.assert(!(key == null));
  var strValue = $.index(this._storage, key);
  if (strValue == null)
    return defaultValue;
  else
    return $.parseInt(strValue);
},
 _getIntValue$1: function(key) {
  return this._getIntValue$2(key,0)
},
 _setIntValue$2: function(key, value) {
  $.intTypeCheck(value, 'is$$int');
  $.assert(!(key == null));
  var t1 = value == null;
  var t2 = this._storage;
  if (t1)
    $.indexSet(t2, key, null);
  else
    $.indexSet(t2, key, $.toString(value));
},
 _incrementIntValue$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  this._setIntValue$2(key, $.add(this._getIntValue$1(key), 1));
},
 is$GameStorage: true
};

$$.GameManager = {"":
 ["game?"],
 "super": "Object",
 set$game: function(v) { this.game = $.propertyTypeCheck(v, 'is$Game'); },
 newGame$0: function() {
  if (!(this._updatedEventId == null)) {
    $.assert(!(this.get$game() == null));
    $.assert(!(this._gameStateChangedId == null));
    this.get$game().get$updated().remove$1(this._updatedEventId);
    this.get$game().get$stateChanged().remove$1(this._gameStateChangedId);
    this._gameStateChanged$1($.CTC29);
  }
  this.set$game($.Game$($.Field_Field(this._mineCount, this._lib5_width, this._lib5_height, null)));
  this._updatedEventId = $.propertyTypeCheck($.add$1(this.get$game().get$updated(), this.get$gameUpdated()), 'is$GlobalId');
  this._gameStateChangedId = $.propertyTypeCheck($.add$1(this.get$game().get$stateChanged(), this.get$_gameStateChanged()), 'is$GlobalId');
},
 _lib5_click$3: function(x, y, alt) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  $.boolTypeCheck(alt, 'is$bool');
  var ss = this.get$game().getSquareState$2(x, y);
  if (alt) {
    if ($.boolConversionCheck($.eq(ss, $.CTC33), 'is$bool'))
      this.get$game().setFlag$3(x, y, true);
    else if ($.boolConversionCheck($.eq(ss, $.CTC37), 'is$bool'))
      this.get$game().setFlag$3(x, y, false);
    else if ($.boolConversionCheck($.eq(ss, $.CTC36), 'is$bool'))
      this.get$game().reveal$2(x, y);
  } else if ($.boolConversionCheck($.eq(ss, $.CTC33), 'is$bool'))
    this.get$game().reveal$2(x, y);
},
 updateClock$0: function() {
  if ($.boolConversionCheck(this._setIntervalId == null && $.boolConversionCheck($.eq(this.get$game().get$state(), $.CTC38), 'is$bool'), 'is$bool'))
    this._setIntervalId = $.intTypeCheck($.window().setInterval$2(this.get$_doClock(), 1000), 'is$$int');
  else if (!(this._setIntervalId == null) && !$.eqB(this.get$game().get$state(), $.CTC38)) {
    $.window().clearInterval$1(this._setIntervalId);
    this._setIntervalId = null;
  }
},
 _doClock$0: function() {
  this.updateClock$0();
},
 get$_doClock: function() { return new $.BoundClosure0(this, '_doClock$0'); },
 _gameStateChanged$1: function(newState) {
  var t1 = this.gameStorage;
  t1.recordState$1(newState);
  if ($.boolConversionCheck($.eq(newState, $.CTC34), 'is$bool'))
    t1.updateHighScore$1(this.get$game());
  this.updateClock$0();
},
 get$_gameStateChanged: function() { return new $.BoundClosure(this, '_gameStateChanged$1'); },
 GameManager$3: function(_width, _height, _mineCount) {
  this.newGame$0();
}
};

$$.Maps__emitMap_anon = {"":
 ["result_3", "box_0", "visiting_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.box_0;
  if (!$.boolConversionCheck(t1.first_1, 'is$bool'))
    $.add$1(this.result_3, ', ');
  t1.first_1 = false;
  t1 = this.result_3;
  var t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"":
 ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  var length$ = t1.length;
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_3.push(null);
  return length$;
},
 call$1$bailout: function(state, value, t1, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_3.push(null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"":
 ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  $.intTypeCheck(i, 'is$$int');
  var t1 = this.copies_4;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  return t1[i];
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"":
 ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.intTypeCheck(i, 'is$$int');
  var t1 = this.copies_5;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  t1[i] = x;
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"":
 [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"":
 ["writeSlot_8", "findSlot_7", "readSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.CTC6);
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.CTC7);
  if (typeof e === 'object' && e !== null && e.is$_FileImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$File())
    throw $.$$throw($.CTC8);
  if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    throw $.$$throw($.CTC9);
  if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$FileList())
    throw $.$$throw($.CTC10);
  if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    throw $.$$throw($.CTC10);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    throw $.$$throw($.CTC11);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    throw $.$$throw($.CTC12);
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    var slot = this.findSlot_7.call$1(e);
    t1.copy_1 = this.readSlot_6.call$1(slot);
    var t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_8.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    var length$ = $.intTypeCheck($.get$length(e), 'is$$int');
    if (length$ !== (length$ | 0))
      return this.call$1$bailout(1, length$, e, 0, 0);
    slot = this.findSlot_7.call$1(e);
    t2 = this.readSlot_6;
    var copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_8.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    var t3 = this.writeSlot_8;
    if (t1) {
      t3.call$2(slot, true);
      for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
        var element = $.index(e, i);
        var elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          for (var j = 0; $.boolConversionCheck($.lt(j, i), 'is$bool'); j = $.intTypeCheck($.add(j, 1), 'is$$int'))
            $.indexSet(copy, j, $.index(e, j));
          $.indexSet(copy, i, elementCopy);
          i = $.intTypeCheck($.add(i, 1), 'is$$int');
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (i !== (i | 0))
      return this.call$1$bailout(2, length$, copy, i, e);
    for (; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
      $.indexSet(copy, i, this.call$1($.index(e, i)));
    return copy;
  }
  throw $.$$throw($.CTC13);
},
 call$1$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      length$ = env0;
      var e = env1;
      break;
    case 2:
      length$ = env0;
      copy = env1;
      i = env2;
      e = env3;
      break;
  }
  switch (state) {
    case 0:
      var t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.CTC6);
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.CTC7);
      if (typeof e === 'object' && e !== null && e.is$_FileImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$File())
        throw $.$$throw($.CTC8);
      if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        throw $.$$throw($.CTC9);
      if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$FileList())
        throw $.$$throw($.CTC10);
      if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        throw $.$$throw($.CTC10);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        throw $.$$throw($.CTC11);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        throw $.$$throw($.CTC12);
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        var slot = this.findSlot_7.call$1(e);
        t1.copy_1 = this.readSlot_6.call$1(slot);
        var t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_8.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      if (state === 2 || state === 1 || state === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state) {
          case 0:
            var length$ = $.intTypeCheck($.get$length(e), 'is$$int');
          case 1:
            state = 0;
            slot = this.findSlot_7.call$1(e);
            t2 = this.readSlot_6;
            var copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_8.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            var t3 = this.writeSlot_8;
            if (t1) {
              t3.call$2(slot, true);
              for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
                var element = $.index(e, i);
                var elementCopy = this.call$1(element);
                if (!(elementCopy == null ? element == null : elementCopy === element)) {
                  copy = t2.call$1(slot);
                  if (true === copy) {
                    copy = new Array(length$);
                    t3.call$2(slot, copy);
                  }
                  for (var j = 0; $.boolConversionCheck($.lt(j, i), 'is$bool'); j = $.intTypeCheck($.add(j, 1), 'is$$int'))
                    $.indexSet(copy, j, $.index(e, j));
                  $.indexSet(copy, i, elementCopy);
                  i = $.intTypeCheck($.add(i, 1), 'is$$int');
                  break;
                }
              }
              if (copy == null) {
                t3.call$2(slot, e);
                copy = e;
              }
            } else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 2:
            state = 0;
            for (; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.CTC13);
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"":
 ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$._getTextures_anon = {"":
 ["frames_0"],
 "super": "Closure",
 call$2: function(key, value) {
  $.stringTypeCheck(key, 'is$String');
  var parsed = $.TextureInput_TextureInput$fromHash(key, $.callTypeCheck(value, 'is$Map'));
  $.indexSet(this.frames_0, key, parsed);
}
};

$$.DoubleLinkedQueue_length__ = {"":
 ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.intTypeCheck($.add(t1.counter_1, 1), 'is$$int');
}
};

$$._convertNativeToDart_AcceptStructuredClone_findSlot = {"":
 ["copies_1", "values_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_0;
  var length$ = t1.length;
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_1.push(null);
  return length$;
},
 call$1$bailout: function(state, value, t1, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_1.push(null);
  return length$;
}
};

$$._convertNativeToDart_AcceptStructuredClone_readSlot = {"":
 ["copies_2"],
 "super": "Closure",
 call$1: function(i) {
  $.intTypeCheck(i, 'is$$int');
  var t1 = this.copies_2;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  return t1[i];
}
};

$$._convertNativeToDart_AcceptStructuredClone_writeSlot = {"":
 ["copies_3"],
 "super": "Closure",
 call$2: function(i, x) {
  $.intTypeCheck(i, 'is$$int');
  var t1 = this.copies_3;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  t1[i] = x;
}
};

$$._convertNativeToDart_AcceptStructuredClone_walk = {"":
 ["writeSlot_6", "findSlot_5", "readSlot_4"],
 "super": "Closure",
 call$1: function(e) {
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (e instanceof Date)
    throw $.$$throw($.CTC6);
  if (e instanceof RegExp)
    throw $.$$throw($.CTC7);
  if ($._isJavaScriptSimpleObject(e)) {
    var slot = this.findSlot_5.call$1(e);
    var copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    copy = $.makeLiteralMap([]);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, copy, e, slot);
    this.writeSlot_6.call$2(slot, copy);
    for (var t1 = $.iterator(Object.keys(e)); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
      var t2 = t1.next$0();
      var t3 = this.call$1(e[t2]);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= copy.length)
        throw $.ioore(t2);
      copy[t2] = t3;
    }
    return copy;
  }
  if (e instanceof Array) {
    slot = this.findSlot_5.call$1(e);
    copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    this.writeSlot_6.call$2(slot, e);
    var length$ = $.intTypeCheck($.get$length(e), 'is$$int');
    if (length$ !== (length$ | 0))
      return this.call$1$bailout(2, e, length$, 0);
    for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
      $.indexSet(e, i, this.call$1($.index(e, i)));
    return e;
  }
  return e;
},
 call$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      copy = env0;
      var e = env1;
      slot = env2;
      break;
    case 2:
      e = env0;
      length$ = env1;
      break;
  }
  switch (state) {
    case 0:
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (e instanceof Date)
        throw $.$$throw($.CTC6);
      if (e instanceof RegExp)
        throw $.$$throw($.CTC7);
    case 1:
      if (state === 1 || state === 0 && $._isJavaScriptSimpleObject(e))
        switch (state) {
          case 0:
            var slot = this.findSlot_5.call$1(e);
            var copy = this.readSlot_4.call$1(slot);
            if (!(copy == null))
              return copy;
            copy = $.makeLiteralMap([]);
          case 1:
            state = 0;
            this.writeSlot_6.call$2(slot, copy);
            for (var t1 = $.iterator(Object.keys(e)); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
              var t2 = t1.next$0();
              $.indexSet(copy, t2, this.call$1(e[t2]));
            }
            return copy;
        }
    case 2:
      if (state === 2 || state === 0 && e instanceof Array)
        switch (state) {
          case 0:
            slot = this.findSlot_5.call$1(e);
            copy = this.readSlot_4.call$1(slot);
            if (!(copy == null))
              return copy;
            this.writeSlot_6.call$2(slot, e);
            var length$ = $.intTypeCheck($.get$length(e), 'is$$int');
          case 2:
            state = 0;
            for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
              $.indexSet(e, i, this.call$1($.index(e, i)));
            return e;
        }
      return e;
  }
}
};

$$.LinkedHashMapImplementation_forEach__ = {"":
 ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  $.propertyTypeCheck(entry, 'is$KeyValuePair');
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.HashSetImplementation_forEach__ = {"":
 ["f_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.f_0.call$1(key);
}
};

$$.Enumerable_select_anon = {"":
 ["this_1", "f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._SelectIterator$(s, this.f_0, $.getRuntimeTypeInfo(this.this_1).T, 'Object');
}
};

$$.Enumerable_single_anon = {"":
 [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.ListBase_iterator_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.this_0, i);
}
};

$$.invokeClosure_anon = {"":
 ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"":
 ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"":
 ["closure_5", "arg1_4", "arg2_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_5.call$2(this.arg1_4, this.arg2_3);
}
};

$$.ClickManager__mouseDown_anon = {"":
 [],
 "super": "Closure",
 call$1: function(e) {
  return $.get$ClickManager__isClickableProperty().get$1(e);
}
};

$$.Enumerable_firstOrDefault_anon = {"":
 [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.Mouse_markMouseOver_anon = {"":
 [],
 "super": "Closure",
 call$1: function(e) {
  $.get$Mouse_isMouseOverProperty().clear$1(e);
  $.get$Mouse_isMouseDirectlyOverProperty().clear$1(e);
}
};

$$.Mouse_markMouseOver_anon0 = {"":
 [],
 "super": "Closure",
 call$1: function(e) {
  $.get$Mouse_isMouseOverProperty().set$2(e, true);
}
};

$$.EventHandle_fireEvent_anon = {"":
 ["args_0"],
 "super": "Closure",
 call$2: function(id, handler) {
  $.propertyTypeCheck(id, 'is$GlobalId');
  $.functionTypeCheck(handler, 'is$Action1').call$1(this.args_0);
}
};

$$.AffineTransform_toString_anon = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  return $.toString(n);
}
};

$$.ClickManager__mouseUp_anon = {"":
 [],
 "super": "Closure",
 call$1: function(e) {
  return $.get$ClickManager__isClickableProperty().get$1(e);
}
};

$$.anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(args) {
  return this.this_0.newGame$0();
}
};

$$.AttachableObject__addHandler_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  return $.EventHandle$();
}
};

$$.ElementParentImpl_drawOverride_anon = {"":
 ["ctx_0"],
 "super": "Closure",
 call$1: function(e) {
  return e.drawCore$1(this.ctx_0);
}
};

$$.ConstantMap_forEach_anon = {"":
 ["this_1", "f_0"],
 "super": "Closure",
 call$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  return this.f_0.call$2(key, $.index(this.this_1, key));
}
};

$$.ElementParentImpl_update_anon = {"":
 [],
 "super": "Closure",
 call$1: function(e) {
  return e.update$0();
}
};

$$.DateImplementation_toString_fourDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  $.intTypeCheck(n, 'is$$int');
  var absN = $.intTypeCheck($.abs(n), 'is$$int');
  var sign = $.boolConversionCheck($.lt(n, 0), 'is$bool') ? '-' : '';
  if ($.boolConversionCheck($.ge(absN, 1000), 'is$bool'))
    return $.S(n);
  if ($.boolConversionCheck($.ge(absN, 100), 'is$bool'))
    return sign + '0' + $.S(absN);
  if ($.boolConversionCheck($.ge(absN, 10), 'is$bool'))
    return sign + '00' + $.S(absN);
  return sign + '000' + $.S(absN);
}
};

$$.DateImplementation_toString_threeDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  $.intTypeCheck(n, 'is$$int');
  if ($.boolConversionCheck($.ge(n, 100), 'is$bool'))
    return $.S(n);
  if ($.boolConversionCheck($.ge(n, 10), 'is$bool'))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$.DateImplementation_toString_twoDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  $.intTypeCheck(n, 'is$$int');
  if ($.boolConversionCheck($.ge(n, 10), 'is$bool'))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$.DurationImplementation_toString_threeDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  $.intTypeCheck(n, 'is$$int');
  if ($.boolConversionCheck($.ge(n, 100), 'is$bool'))
    return $.S(n);
  if ($.boolConversionCheck($.gt(n, 10), 'is$bool'))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$.DurationImplementation_toString_twoDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  $.intTypeCheck(n, 'is$$int');
  if ($.boolConversionCheck($.ge(n, 10), 'is$bool'))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$.anon0 = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(args) {
  return this.this_0.get$_clickedEvent().fireEvent$1($.CTC23);
}
};

$$.GameElement__click_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(i) {
  var t = this.this_0.get$game().get$field().getCoordinate$1(i);
  return $.Coordinate$(t.get$Item1(), t.get$Item2());
}
};

$$.GameElement__click_anon0 = {"":
 ["this_1"],
 "super": "Closure",
 call$1: function(t) {
  return $.eq(this.this_1.get$game().getSquareState$2(t.get$x(), t.get$y()), $.CTC33);
}
};

$$.GameElement__startPopAnimation_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(i) {
  var t1 = this.this_0;
  var t = t1.get$game().get$field().getCoordinate$1(i);
  var c = $.Coordinate$(t.get$Item1(), t.get$Item2());
  return $.Tuple$(c, t1.get$game().getSquareState$2(c.x, c.y));
}
};

$$.GameElement__startPopAnimation_anon0 = {"":
 [],
 "super": "Closure",
 call$1: function(t2) {
  return $.boolConversionCheck($.eq(t2.get$Item2(), $.CTC42), 'is$bool') || $.boolConversionCheck($.eq(t2.get$Item2(), $.CTC33), 'is$bool');
}
};

$$.GameElement__startPopAnimation_anon1 = {"":
 [],
 "super": "Closure",
 call$1: function(t2) {
  return t2.get$Item1();
}
};

$$.GameElement__startPopAnimation_anon2 = {"":
 ["this_1"],
 "super": "Closure",
 call$1: function(args) {
  return this.this_1._playPop$0();
}
};

$$.HashSetImplementation_addAll__ = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  this.this_0.add$1(value);
}
};

$$.Enumerable_where_anon = {"":
 ["this_1", "f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._WhereIterator$(s, this.f_0, $.getRuntimeTypeInfo(this.this_1).T);
}
};

$$.ImageLoader__doLoad_anon = {"":
 ["this_1", "url_0"],
 "super": "Closure",
 call$1: function(args) {
  var img = $.callTypeCheck(args.get$currentTarget(), 'is$ImageElement');
  var t1 = this.this_1;
  $.assert(t1.get$_resources().containsValue$1(img));
  $.assert($.eq(args.get$type(), 'load'));
  t1._loadHandler$2(this.url_0, img);
}
};

$$._StorageImpl_containsValue_anon = {"":
 ["value_0"],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, this.value_0);
}
};

$$._StorageImpl_getValues_anon = {"":
 ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return this.values_0.push(v);
}
};

$$._StorageImpl_getKeys_anon = {"":
 ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return this.keys_0.push(k);
}
};

$$.HashMapImplementation_getKeys__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_1;
  t2.i_1 = $.intTypeCheck($.add(t3, 1), 'is$$int');
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = key;
}
};

$$.LinkedHashMapImplementation_getKeys__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  $.propertyTypeCheck(entry, 'is$KeyValuePair');
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_1;
  t2.index_1 = $.intTypeCheck($.add(t3, 1), 'is$$int');
  t2 = entry.get$key();
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = t2;
}
};

$$.LinkedHashMapImplementation_containsValue__ = {"":
 ["value_0"],
 "super": "Closure",
 call$1: function(entry) {
  return $.eq($.propertyTypeCheck(entry, 'is$KeyValuePair').get$value(), this.value_0);
}
};

$$.ConstantMap_containsValue_anon = {"":
 ["needle_0"],
 "super": "Closure",
 call$1: function(value) {
  return $.eq(value, this.needle_0);
}
};

$$.ConstantMap_getValues_anon = {"":
 ["this_1", "result_0"],
 "super": "Closure",
 call$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  return this.result_0.push($.index(this.this_1, key));
}
};

$$.AudioLoader__doLoad_anon = {"":
 ["request_2", "url_1", "this_0"],
 "super": "Closure",
 call$1: function(args) {
  var t1 = this.this_0;
  t1.get$context().decodeAudioData$3(this.request_2.get$response(), new $.AudioLoader__doLoad_anon1(t1, this.url_1), new $.AudioLoader__doLoad_anon2());
}
};

$$.AudioLoader__doLoad_anon1 = {"":
 ["this_4", "url_3"],
 "super": "Closure",
 call$1: function(buffer) {
  return this.this_4._saveBuffer$2(this.url_3, buffer);
}
};

$$.AudioLoader__doLoad_anon2 = {"":
 [],
 "super": "Closure",
 call$1: function(error) {
  return $.print(['error!', error]);
}
};

$$.AudioLoader__doLoad_anon0 = {"":
 [],
 "super": "Closure",
 call$1: function(args) {
  $.print('BufferLoader: XHR error');
}
};

$$.startRootIsolate_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $.functionTypeCheck($._timerFactory, 'is$_TimerFactoryClosure');
  return;
}
};

$$._BaseSendPort_call_anon = {"":
 ["port_1", "completer_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  this.port_1.close$0();
  var t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  var t2 = this.completer_0;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"":
 ["this_2", "message_1", "replyTo_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_2;
  var t2 = this.replyTo_0;
  t1._checkReplyTo$1(t2);
  var workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_1, 'replyTo', t2]));
  if ($.boolConversionCheck($._globalState().get$isWorker(), 'is$bool'))
    $._globalState().get$mainManager().postMessage$1(workerMessage);
  else
    $.index($._globalState().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"":
 ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"":
 ["completer_5", "pos_4", "box_0", "result_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  var t2 = this.pos_4;
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  t1[t2] = value;
  t2 = this.box_0;
  var remaining = $.intTypeCheck($.sub(t2.remaining_1, 1), 'is$$int');
  t2.remaining_1 = remaining;
  if (remaining === 0 && !$.boolConversionCheck(this.result_3.get$isComplete(), 'is$bool'))
    this.completer_5.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"":
 ["future_8", "completer_7", "result_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (!$.boolConversionCheck(this.result_6.get$isComplete(), 'is$bool'))
    this.completer_7.completeException$2(exception, this.future_8.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitList_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._PendingSendPortFinder_visitMap_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$.HashMapImplementation_getValues__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_10;
  t2.i_10 = $.intTypeCheck($.add(t3, 1), 'is$$int');
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = value;
}
};

$$.LinkedHashMapImplementation_getValues__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  $.propertyTypeCheck(entry, 'is$KeyValuePair');
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_10;
  t2.index_10 = $.intTypeCheck($.add(t3, 1), 'is$$int');
  t2 = entry.get$value();
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = t2;
}
};

$$._NativeJsSendPort_send_anon = {"":
 ["this_5", "message_4", "replyTo_3"],
 "super": "Closure",
 call$0: function() {
  var t1 = {};
  var t2 = this.this_5;
  var t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  var isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  var shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  var msg = this.message_4;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send_anon0(t2, t1, shouldSerialize), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send_anon0 = {"":
 ["this_7", "box_0", "shouldSerialize_6"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if ($.boolConversionCheck(this.shouldSerialize_6, 'is$bool')) {
      var t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._Copier_visitMap_anon = {"":
 ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1 = this.box_0.copy_10;
  var t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"":
 ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (!$.boolConversionCheck(this.this_0.runIteration$0(), 'is$bool'))
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon1 = {"":
 ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon2 = {"":
 ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.BoundClosure = {'':
 ['self', 'target'],
 'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure1 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); }
};
$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$._InputElementEventsImpl$ = function(_ptr) {
  return new $._InputElementEventsImpl(_ptr);
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  $.intTypeCheck(isolateId, 'is$$int');
  return new $._NativeJsSendPort($.propertyTypeCheck(_receivePort, 'is$_ReceivePortImpl'), isolateId);
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.IllegalArgumentException$(newLength));
    if (newLength < 0)
      throw $.$$throw($.IndexOutOfRangeException$(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.IllegalArgumentException$(value));
  }
  return value;
};

$._TextTrackListEventsImpl$ = function(_ptr) {
  return new $._TextTrackListEventsImpl(_ptr);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$._MediaStreamTrackEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackEventsImpl(_ptr);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.ElementMouseEventArgs$_internal = function(element, shiftKey) {
  return new $.ElementMouseEventArgs(element, $.boolTypeCheck(shiftKey, 'is$bool'));
};

$._fillStatics = function(context) {
  $globals = context.isolateStatics;
  $static_init();

};

$.populateAudio = function(context, buffers) {
  $.callTypeCheck(context, 'is$AudioContext');
  $.callTypeCheck(buffers, 'is$Map');
  $.assert(!(context == null));
  $.assert(!(buffers == null));
  $.assert($._audioContext == null);
  $._audioContext = context;
  $._buffers = $.callTypeCheck(buffers, 'is$Map');
};

$.ListIterator$ = function(list, T) {
  var t1 = new $.ListIterator(0, $.listTypeCheck($.listTypeCheck(list, 'is$List'), 'is$List'));
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$._JavaScriptAudioNodeEventsImpl$ = function(_ptr) {
  return new $._JavaScriptAudioNodeEventsImpl(_ptr);
};

$.TextureInput$ = function(name$, frame, offset, rotated, sourceColorRect, sourceSize) {
  return new $.TextureInput(name$, $.propertyTypeCheck(frame, 'is$Box'), $.propertyTypeCheck(offset, 'is$Vector'), $.boolTypeCheck(rotated, 'is$bool'), $.propertyTypeCheck(sourceColorRect, 'is$Box'), $.propertyTypeCheck(sourceSize, 'is$Size'));
};

$.Size$ = function(width, height) {
  return new $.Size($.numTypeCheck(width, 'is$num'), $.numTypeCheck(height, 'is$num'));
};

$.NumberEnumerable_NumberEnumerable$fromRange = function(start, count, T) {
  return $._RangeIterable$(start, $.intTypeCheck(count, 'is$$int'));
};

$._IDBTransactionEventsImpl$ = function(_ptr) {
  return new $._IDBTransactionEventsImpl(_ptr);
};

$.dynamicFunction = function(name$) {
  var f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  var methods = {};
  var dartMethod = Object.getPrototypeOf($.CTC48)[name$];
  if (!(dartMethod == null))
    $.propertySet(methods, 'Object', dartMethod);
  var bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.buildDynamicMetadata = function(inputTable) {
  $.listTypeCheck(inputTable, 'is$List');
  var result = [];
  for (var i = 0; $.listTypeCheck(inputTable, 'is$List'), $.boolConversionCheck($.lt(i, inputTable.length), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    $.listTypeCheck(inputTable, 'is$List');
    var t1 = inputTable[i];
    $.listTypeCheck(t1, 'is$List');
    var tag = t1[0];
    var array = inputTable[i];
    $.listTypeCheck(array, 'is$List');
    var tags = array[1];
    var set = {};
    var tagNames = $.listTypeCheck(tags.split('|'), 'is$List');
    for (var j = 0, index = 1; $.listTypeCheck(tagNames, 'is$List'), $.boolConversionCheck($.lt(j, tagNames.length), 'is$bool'); j = $.intTypeCheck($.add(j, 1), 'is$$int')) {
      $.listTypeCheck(tagNames, 'is$List');
      $.propertySet(set, tagNames[j], true);
      index = j;
      array = tagNames;
    }
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.ListImplementation_List$from = function(other, E) {
  $.listSuperNativeTypeCheck(other, 'is$Iterable');
  $.listSuperNativeTypeCheck(other, 'is$Iterable');
  var result = $.ListImplementation_List(null);
  for (var t1 = $.iterator(other); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    result.push(t1.next$0());
  return result;
};

$._Timer$repeating = function(milliSeconds, callback) {
  $.functionTypeCheck(callback, 'is$Function');
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$._EventSourceEventsImpl$ = function(_ptr) {
  return new $._EventSourceEventsImpl(_ptr);
};

$._onLoaded = function(args) {
  if ($.boolConversionCheck($.eq($._imageLoader.get$state(), 'loaded'), 'is$bool'))
    var t1 = $.boolConversionCheck($._audioLoader == null || $.boolConversionCheck($.eq($._audioLoader.get$state(), 'loaded'), 'is$bool'), 'is$bool');
  else
    t1 = false;
  if ($.boolConversionCheck(t1, 'is$bool')) {
    var textures = $._getTextures();
    var textureImg = $._imageLoader.getResource$1('art.png');
    $.assert(!(textureImg == null));
    $.populateTextures(textureImg, textures);
    if (!($._audioLoader == null)) {
      var map = $.HashMapImplementation$('String', 'AudioBuffer');
      for (t1 = $.iterator($.CTC); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
        var t2 = t1.next$0();
        $.stringTypeCheck(t2, 'is$String');
        var path = 'audio/' + $.S(t2) + '.webm';
        map.operator$indexSet$2(t2, $._audioLoader.getResource$1(path));
      }
      $.populateAudio($._audioLoader.get$context(), map);
    }
    $._runSweeper();
  }
};

$.parseDouble = function(string) {
  return $.double_parse($.stringTypeCheck(string, 'is$String'));
};

$.Primitives_parseDouble = function(string) {
  $.checkString(string);
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(string))
    throw $.$$throw($.FormatException$(string));
  var result = parseFloat(string);
  if ($.boolConversionCheck($.isNaN(result), 'is$bool') && !(string === 'NaN'))
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.ClickManager_addMouseMoveHandler = function(obj, handler) {
  $.propertyTypeCheck(obj, 'is$PElement');
  $.functionTypeCheck(handler, 'is$Action1');
  return $.get$ClickManager__mouseMoveEvent().addHandler$2(obj, handler);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values = [];
  var copies = [];
  var t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  var t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  var t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  var t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  var copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t3, t1, t2).call$1(value);
  t4.call$0();
  return copy;
};

$.floor = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.floor$0();
  return Math.floor(receiver);
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._WebSocketEventsImpl$ = function(_ptr) {
  return new $._WebSocketEventsImpl(_ptr);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.IllegalArgumentException$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$._convertDartToNative_SerializedScriptValue = function(value) {
  return $._convertDartToNative_PrepareForStructuredClone(value);
};

$._deserializeMessage = function(message) {
  if ($.boolConversionCheck($._globalState().get$needSerialization(), 'is$bool'))
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$._MediaStreamEventsImpl$ = function(_ptr) {
  return new $._MediaStreamEventsImpl(_ptr);
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  if (!(target == null))
    target.builtin$typeInfo = typeInfo;
};

$.hashCode = function(receiver) {
  if (typeof receiver === 'number')
    return receiver & 0x1FFFFFFF;
  if (!(typeof receiver === 'string'))
    return receiver.hashCode$0();
  var length$ = receiver.length;
  for (var hash = 0, i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var t1 = $.add(hash, receiver.charCodeAt(i));
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    hash = 536870911 & t1;
    var hash0 = 536870911 & hash + 524287 & hash << 10;
    hash0 = $.intTypeCheck((hash0 ^ $.shr(hash0, 6)) >>> 0, 'is$$int');
    hash = hash0;
  }
  if (typeof hash !== 'number')
    throw $.iae(hash);
  hash0 = 536870911 & hash + 67108863 & hash << 3;
  hash0 = $.intTypeCheck((hash0 ^ $.shr(hash0, 11)) >>> 0, 'is$$int');
  if (typeof hash0 !== 'number')
    throw $.iae(hash0);
  return 536870911 & hash0 + 16383 & hash0 << 15;
};

$.FutureImpl_FutureImpl$immediate = function(value, T) {
  var res = $.FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$._AllMatchesIterator$ = function(re, _str) {
  $.propertyTypeCheck(re, 'is$JSSyntaxRegExp');
  $.stringTypeCheck(_str, 'is$String');
  return new $._AllMatchesIterator($.propertyTypeCheck($.JSSyntaxRegExp__globalVersionOf(re), 'is$RegExp'), _str, null, false);
};

$._waitForPendingPorts = function(message, callback) {
  $.functionTypeCheck(callback, 'is$Function');
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._SimpleEnumerable$ = function(_source, T) {
  var t1 = new $._SimpleEnumerable($.listSuperNativeTypeCheck(_source, 'is$Iterable'));
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$.GameStorage$ = function() {
  var t1 = $.EventHandle$();
  var t2 = $.window().get$localStorage();
  return new $.GameStorage($.propertyTypeCheck(t1, 'is$EventHandle'), $.callTypeCheck(t2, 'is$Storage'));
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.functionTypeCheck($.getFunctionForTypeNameOf(), 'is$Function');
  return $._getTypeNameOf.call$1(obj);
};

$.contains$1 = function(receiver, other) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$1(other);
  return $.contains$2(receiver, other, 0);
};

$.isValidNumber = function(value) {
  $.numTypeCheck(value, 'is$num');
  return !(value == null) && !$.boolConversionCheck($.isInfinite(value), 'is$bool') && !$.boolConversionCheck($.isNaN(value), 'is$bool');
};

$._EventsImpl$ = function(_ptr) {
  return new $._EventsImpl(_ptr);
};

$._RTCPeerConnectionEventsImpl$ = function(_ptr) {
  return new $._RTCPeerConnectionEventsImpl(_ptr);
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.negate$0();
};

$.NoSuchMethodError$ = function(_receiver, _functionName, _arguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, $.stringTypeCheck(_functionName, 'is$String'), _arguments, existingArgumentNames);
};

$.HashSetImplementation$ = function(E) {
  var t1 = new $.HashSetImplementation(null);
  $.setRuntimeTypeInfo(t1, { 'E': E });
  t1.HashSetImplementation$0();
  return t1;
};

$.Strings_join = function(strings, separator) {
  return $.StringImplementation_join($.listTypeCheck(strings, 'is$List'), separator);
};

$.StringImplementation_join = function(strings, separator) {
  $.listTypeCheck(strings, 'is$List');
  $.checkNull(strings);
  $.checkNull(separator);
  return $.stringJoinUnchecked($.StringImplementation__toJsStringArray(strings), separator);
};

$.add$1 = function(receiver, value) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'add');
    receiver.push(value);
    return;
  }
  return receiver.add$1(value);
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.some = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.some$1(f);
  else
    return $.Collections_some(receiver, f);
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  $.stringTypeCheck(name$, 'is$String');
  $.listTypeCheck(arguments$, 'is$List');
  var tag = $.stringTypeCheck($.getTypeNameOf(obj), 'is$String');
  var method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (var i = 0; t1 = $._dynamicMetadata0(), $.listTypeCheck(t1, 'is$List'), $.boolConversionCheck($.lt(i, t1.length), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      var t1 = $._dynamicMetadata0();
      $.listTypeCheck(t1, 'is$List');
      var entry = $.propertyTypeCheck(t1[i], 'is$MetaInfo');
      if (entry.get$_lib4_set()[tag]) {
        t1 = entry.get$_tag();
        $.stringTypeCheck(t1, 'is$String');
        method = methods[t1];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods['Object'];
  var proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.Collections_some = function(iterable, f) {
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f, 'is$Function');
  for (var t1 = $.iterator(iterable); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    if ($.boolConversionCheck(f.call$1(t1.next$0()), 'is$bool'))
      return true;
  return false;
};

$.double_parse = function(string) {
  return $.Primitives_parseDouble(string);
};

$.regExpMakeNative = function(regExp, global) {
  var pattern = $.stringTypeCheck(regExp.get$pattern(), 'is$String');
  var multiLine = $.boolTypeCheck(regExp.get$multiLine(), 'is$bool');
  var ignoreCase = $.boolTypeCheck(regExp.get$ignoreCase(), 'is$bool');
  $.checkString(pattern);
  var sb = $.propertyTypeCheck($.StringBufferImpl$(''), 'is$StringBuffer');
  if (multiLine)
    $.add$1(sb, 'm');
  if (ignoreCase)
    $.add$1(sb, 'i');
  if (global)
    $.add$1(sb, 'g');
  try {
    return new RegExp(pattern, $.toString(sb));
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.int_parse = function(string) {
  return $.Primitives_parseInt(string);
};

$.main = function() {
  $._imageLoader = $.ImageLoader$(['art.png']);
  $.add$1($._imageLoader.get$loaded(), $._onLoaded);
  $.add$1($._imageLoader.get$progress(), $._onLoaded);
  $._imageLoader.load$0();
  $._audioLoader = $.AudioLoader$($._AudioContextFactoryProvider_AudioContext(), $.$$($.CTC).select$1($._getAudioPath));
  $.add$1($._audioLoader.get$loaded(), $._onLoaded);
  $.add$1($._audioLoader.get$progress(), $._onLoaded);
  $._audioLoader.load$0();
};

$.ceil = function(receiver) {
  return Math.ceil(receiver);
};

$.ClickManager_addMouseOutHandler = function(obj, handler) {
  $.propertyTypeCheck(obj, 'is$Stage');
  $.functionTypeCheck(handler, 'is$Action1');
  return $.get$ClickManager__mouseOutEvent().addHandler$2(obj, handler);
};

$._Collections_some = function(iterable, f) {
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f, 'is$Function');
  for (var t1 = $.iterator(iterable); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    if ($.boolConversionCheck(f.call$1(t1.next$0()), 'is$bool'))
      return true;
  return false;
};

$.Primitives_getYear = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCFullYear() : $.Primitives_lazyAsJsDate(receiver).getFullYear();
};

$.Primitives_getHours = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCHours() : $.Primitives_lazyAsJsDate(receiver).getHours();
};

$.boolTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'boolean')
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement bool'));
};

$._getTextures = function() {
  var artFramesJson = $.makeLiteralMap(['background_side_left.png', $.makeLiteralMap(['frame', '{{1026,1},{352,672}}', 'offset', '{0,0}', 'rotated', true, 'sourceColorRect', '{{0,0},{352,672}}', 'sourceSize', '{352,672}']), 'background_top_left.png', $.makeLiteralMap(['frame', '{{1,1},{1024,96}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{1024,96}}', 'sourceSize', '{1024,96}']), 'balloon.png', $.makeLiteralMap(['frame', '{{1608,1500},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'balloon_explode_0000.png', $.makeLiteralMap(['frame', '{{1608,1500},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{88,88},{80,80}}', 'sourceSize', '{256,256}']), 'balloon_explode_0001.png', $.makeLiteralMap(['frame', '{{378,1518},{82,86}}', 'offset', '{0,-2}', 'rotated', false, 'sourceColorRect', '{{87,87},{82,86}}', 'sourceSize', '{256,256}']), 'balloon_explode_0002.png', $.makeLiteralMap(['frame', '{{809,683},{188,188}}', 'offset', '{9,9}', 'rotated', false, 'sourceColorRect', '{{43,25},{188,188}}', 'sourceSize', '{256,256}']), 'balloon_explode_0003.png', $.makeLiteralMap(['frame', '{{1213,1192},{216,222}}', 'offset', '{3,-2}', 'rotated', true, 'sourceColorRect', '{{23,19},{216,222}}', 'sourceSize', '{256,256}']), 'balloon_explode_0004.png', $.makeLiteralMap(['frame', '{{1691,825},{226,216}}', 'offset', '{2,3}', 'rotated', false, 'sourceColorRect', '{{17,17},{226,216}}', 'sourceSize', '{256,256}']), 'balloon_explode_0005.png', $.makeLiteralMap(['frame', '{{1235,810},{226,216}}', 'offset', '{2,3}', 'rotated', false, 'sourceColorRect', '{{17,17},{226,216}}', 'sourceSize', '{256,256}']), 'balloon_explode_0006.png', $.makeLiteralMap(['frame', '{{990,1029},{222,218}}', 'offset', '{-1,4}', 'rotated', false, 'sourceColorRect', '{{16,15},{222,218}}', 'sourceSize', '{256,256}']), 'balloon_explode_0007.png', $.makeLiteralMap(['frame', '{{1448,1162},{222,216}}', 'offset', '{-1,4}', 'rotated', false, 'sourceColorRect', '{{16,16},{222,216}}', 'sourceSize', '{256,256}']), 'balloon_explode_0008.png', $.makeLiteralMap(['frame', '{{998,812},{224,216}}', 'offset', '{-1,4}', 'rotated', false, 'sourceColorRect', '{{15,16},{224,216}}', 'sourceSize', '{256,256}']), 'balloon_explode_0009.png', $.makeLiteralMap(['frame', '{{1689,1042},{224,216}}', 'offset', '{-1,5}', 'rotated', false, 'sourceColorRect', '{{15,15},{224,216}}', 'sourceSize', '{256,256}']), 'balloon_explode_0010.png', $.makeLiteralMap(['frame', '{{1464,808},{226,216}}', 'offset', '{-2,5}', 'rotated', false, 'sourceColorRect', '{{13,15},{226,216}}', 'sourceSize', '{256,256}']), 'balloon_explode_0011.png', $.makeLiteralMap(['frame', '{{1693,600},{226,224}}', 'offset', '{-1,2}', 'rotated', false, 'sourceColorRect', '{{14,14},{226,224}}', 'sourceSize', '{256,256}']), 'balloon_explode_0012.png', $.makeLiteralMap(['frame', '{{1464,585},{228,222}}', 'offset', '{-2,2}', 'rotated', false, 'sourceColorRect', '{{12,15},{228,222}}', 'sourceSize', '{256,256}']), 'balloon_explode_0013.png', $.makeLiteralMap(['frame', '{{1235,585},{228,224}}', 'offset', '{-2,3}', 'rotated', false, 'sourceColorRect', '{{12,13},{228,224}}', 'sourceSize', '{256,256}']), 'balloon_explode_0014.png', $.makeLiteralMap(['frame', '{{1698,373},{228,226}}', 'offset', '{-2,2}', 'rotated', false, 'sourceColorRect', '{{12,13},{228,226}}', 'sourceSize', '{256,256}']), 'balloon_explode_0015.png', $.makeLiteralMap(['frame', '{{234,942},{230,228}}', 'offset', '{-2,2}', 'rotated', false, 'sourceColorRect', '{{11,12},{230,228}}', 'sourceSize', '{256,256}']), 'balloon_explode_0016.png', $.makeLiteralMap(['frame', '{{576,842},{230,230}}', 'offset', '{-2,1}', 'rotated', false, 'sourceColorRect', '{{11,12},{230,230}}', 'sourceSize', '{256,256}']), 'balloon_explode_0017.png', $.makeLiteralMap(['frame', '{{1004,581},{230,230}}', 'offset', '{-2,1}', 'rotated', false, 'sourceColorRect', '{{11,12},{230,230}}', 'sourceSize', '{256,256}']), 'balloon_explode_0018.png', $.makeLiteralMap(['frame', '{{1,882},{232,230}}', 'offset', '{-1,0}', 'rotated', false, 'sourceColorRect', '{{11,13},{232,230}}', 'sourceSize', '{256,256}']), 'balloon_explode_0019.png', $.makeLiteralMap(['frame', '{{1238,354},{230,230}}', 'offset', '{-1,0}', 'rotated', false, 'sourceColorRect', '{{12,13},{230,230}}', 'sourceSize', '{256,256}']), 'balloon_explode_0020.png', $.makeLiteralMap(['frame', '{{234,711},{232,230}}', 'offset', '{-1,0}', 'rotated', false, 'sourceColorRect', '{{11,13},{232,230}}', 'sourceSize', '{256,256}']), 'balloon_explode_0021.png', $.makeLiteralMap(['frame', '{{1005,354},{232,226}}', 'offset', '{-1,2}', 'rotated', false, 'sourceColorRect', '{{11,13},{232,226}}', 'sourceSize', '{256,256}']), 'balloon_explode_0022.png', $.makeLiteralMap(['frame', '{{1,651},{232,230}}', 'offset', '{-1,1}', 'rotated', false, 'sourceColorRect', '{{11,12},{232,230}}', 'sourceSize', '{256,256}']), 'balloon_explode_0023.png', $.makeLiteralMap(['frame', '{{1469,354},{230,228}}', 'offset', '{0,1}', 'rotated', true, 'sourceColorRect', '{{13,13},{230,228}}', 'sourceSize', '{256,256}']), 'balloon_explode_0024.png', $.makeLiteralMap(['frame', '{{814,319},{190,214}}', 'offset', '{-10,4}', 'rotated', false, 'sourceColorRect', '{{23,17},{190,214}}', 'sourceSize', '{256,256}']), 'balloon_pieces_a.png', $.makeLiteralMap(['frame', '{{1527,1468},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'balloon_pieces_b.png', $.makeLiteralMap(['frame', '{{1446,1442},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'balloon_pieces_c.png', $.makeLiteralMap(['frame', '{{1365,1442},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'balloon_pieces_d.png', $.makeLiteralMap(['frame', '{{244,1894},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'balloon_pop_0000.png', $.makeLiteralMap(['frame', '{{1608,1500},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{88,88},{80,80}}', 'sourceSize', '{256,256}']), 'balloon_pop_0001.png', $.makeLiteralMap(['frame', '{{1,1673},{142,114}}', 'offset', '{3,5}', 'rotated', false, 'sourceColorRect', '{{60,66},{142,114}}', 'sourceSize', '{256,256}']), 'balloon_pop_0002.png', $.makeLiteralMap(['frame', '{{1,1113},{230,184}}', 'offset', '{3,5}', 'rotated', false, 'sourceColorRect', '{{16,31},{230,184}}', 'sourceSize', '{256,256}']), 'balloon_pop_0003.png', $.makeLiteralMap(['frame', '{{576,655},{232,186}}', 'offset', '{3,5}', 'rotated', false, 'sourceColorRect', '{{15,30},{232,186}}', 'sourceSize', '{256,256}']), 'balloon_pop_0004.png', $.makeLiteralMap(['frame', '{{240,345},{236,186}}', 'offset', '{2,5}', 'rotated', false, 'sourceColorRect', '{{12,30},{236,186}}', 'sourceSize', '{256,256}']), 'balloon_pop_0005.png', $.makeLiteralMap(['frame', '{{577,285},{236,186}}', 'offset', '{2,4}', 'rotated', false, 'sourceColorRect', '{{12,31},{236,186}}', 'sourceSize', '{256,256}']), 'balloon_pop_0006.png', $.makeLiteralMap(['frame', '{{577,98},{236,186}}', 'offset', '{2,4}', 'rotated', false, 'sourceColorRect', '{{12,31},{236,186}}', 'sourceSize', '{256,256}']), 'balloon_pop_0007.png', $.makeLiteralMap(['frame', '{{1,285},{238,184}}', 'offset', '{1,3}', 'rotated', false, 'sourceColorRect', '{{10,33},{238,184}}', 'sourceSize', '{256,256}']), 'balloon_pop_0008.png', $.makeLiteralMap(['frame', '{{576,472},{236,182}}', 'offset', '{1,2}', 'rotated', false, 'sourceColorRect', '{{11,35},{236,182}}', 'sourceSize', '{256,256}']), 'balloon_pop_0009.png', $.makeLiteralMap(['frame', '{{1,470},{236,180}}', 'offset', '{1,2}', 'rotated', false, 'sourceColorRect', '{{11,36},{236,180}}', 'sourceSize', '{256,256}']), 'balloon_pop_0010.png', $.makeLiteralMap(['frame', '{{238,532},{236,178}}', 'offset', '{1,2}', 'rotated', false, 'sourceColorRect', '{{11,37},{236,178}}', 'sourceSize', '{256,256}']), 'balloon_pop_0011.png', $.makeLiteralMap(['frame', '{{467,885},{84,106}}', 'offset', '{-2,-4}', 'rotated', true, 'sourceColorRect', '{{84,79},{84,106}}', 'sourceSize', '{256,256}']), 'balloon_pop_0012.png', $.makeLiteralMap(['frame', '{{463,1415},{88,112}}', 'offset', '{-3,-4}', 'rotated', false, 'sourceColorRect', '{{81,76},{88,112}}', 'sourceSize', '{256,256}']), 'balloon_pop_0013.png', $.makeLiteralMap(['frame', '{{1808,1415},{94,118}}', 'offset', '{-3,-4}', 'rotated', false, 'sourceColorRect', '{{78,73},{94,118}}', 'sourceSize', '{256,256}']), 'balloon_pop_0014.png', $.makeLiteralMap(['frame', '{{475,595},{100,124}}', 'offset', '{-4,-4}', 'rotated', false, 'sourceColorRect', '{{74,70},{100,124}}', 'sourceSize', '{256,256}']), 'balloon_pop_0015.png', $.makeLiteralMap(['frame', '{{1914,1229},{104,130}}', 'offset', '{-4,-4}', 'rotated', true, 'sourceColorRect', '{{72,67},{104,130}}', 'sourceSize', '{256,256}']), 'balloon_pop_0016.png', $.makeLiteralMap(['frame', '{{465,970},{110,136}}', 'offset', '{-5,-4}', 'rotated', false, 'sourceColorRect', '{{68,64},{110,136}}', 'sourceSize', '{256,256}']), 'balloon_pop_0017.png', $.makeLiteralMap(['frame', '{{1671,1259},{114,140}}', 'offset', '{-5,-4}', 'rotated', true, 'sourceColorRect', '{{66,62},{114,140}}', 'sourceSize', '{256,256}']), 'balloon_pop_0018.png', $.makeLiteralMap(['frame', '{{1927,534},{120,144}}', 'offset', '{-6,-4}', 'rotated', false, 'sourceColorRect', '{{62,60},{120,144}}', 'sourceSize', '{256,256}']), 'balloon_pop_0019.png', $.makeLiteralMap(['frame', '{{1920,772},{124,148}}', 'offset', '{-6,-4}', 'rotated', false, 'sourceColorRect', '{{60,58},{124,148}}', 'sourceSize', '{256,256}']), 'balloon_pop_0020.png', $.makeLiteralMap(['frame', '{{1918,921},{128,152}}', 'offset', '{-7,-4}', 'rotated', false, 'sourceColorRect', '{{57,56},{128,152}}', 'sourceSize', '{256,256}']), 'balloon_pop_0021.png', $.makeLiteralMap(['frame', '{{1914,1074},{130,154}}', 'offset', '{-7,-4}', 'rotated', false, 'sourceColorRect', '{{56,55},{130,154}}', 'sourceSize', '{256,256}']), 'balloon_pop_0022.png', $.makeLiteralMap(['frame', '{{223,1312},{134,158}}', 'offset', '{-8,-4}', 'rotated', true, 'sourceColorRect', '{{53,53},{134,158}}', 'sourceSize', '{256,256}']), 'balloon_pop_0023.png', $.makeLiteralMap(['frame', '{{575,1234},{136,160}}', 'offset', '{-8,-3}', 'rotated', true, 'sourceColorRect', '{{52,51},{136,160}}', 'sourceSize', '{256,256}']), 'balloon_pop_0024.png', $.makeLiteralMap(['frame', '{{807,1039},{138,162}}', 'offset', '{-8,-3}', 'rotated', true, 'sourceColorRect', '{{51,50},{138,162}}', 'sourceSize', '{256,256}']), 'balloon_pop_0025.png', $.makeLiteralMap(['frame', '{{232,1171},{140,160}}', 'offset', '{-9,-3}', 'rotated', true, 'sourceColorRect', '{{49,51},{140,160}}', 'sourceSize', '{256,256}']), 'balloon_pop_0026.png', $.makeLiteralMap(['frame', '{{806,1178},{140,160}}', 'offset', '{-9,-3}', 'rotated', true, 'sourceColorRect', '{{49,51},{140,160}}', 'sourceSize', '{256,256}']), 'balloon_pop_0027.png', $.makeLiteralMap(['frame', '{{1,1298},{142,158}}', 'offset', '{-10,-3}', 'rotated', true, 'sourceColorRect', '{{47,52},{142,158}}', 'sourceSize', '{256,256}']), 'balloon_pop_0028.png', $.makeLiteralMap(['frame', '{{1,1441},{136,148}}', 'offset', '{-11,-2}', 'rotated', true, 'sourceColorRect', '{{49,56},{136,148}}', 'sourceSize', '{256,256}']), 'balloon_tagged_!.png', $.makeLiteralMap(['frame', '{{1284,1409},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'balloon_tagged_bomb.png', $.makeLiteralMap(['frame', '{{244,1813},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'balloon_tagged_frozen.png', $.makeLiteralMap(['frame', '{{336,1759},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'balloon_tagged_question_mark.png', $.makeLiteralMap(['frame', '{{455,1754},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'balloon_tagged_x.png', $.makeLiteralMap(['frame', '{{542,1707},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'button_blank.png', $.makeLiteralMap(['frame', '{{1699,94},{294,92}}', 'offset', '{1,0}', 'rotated', false, 'sourceColorRect', '{{2,2},{294,92}}', 'sourceSize', '{296,96}']), 'button_blank_clicked.png', $.makeLiteralMap(['frame', '{{1699,280},{292,92}}', 'offset', '{2,-1}', 'rotated', false, 'sourceColorRect', '{{4,3},{292,92}}', 'sourceSize', '{296,96}']), 'button_new_game.png', $.makeLiteralMap(['frame', '{{1699,1},{294,92}}', 'offset', '{1,0}', 'rotated', false, 'sourceColorRect', '{{2,2},{294,92}}', 'sourceSize', '{296,96}']), 'button_new_game_clicked.png', $.makeLiteralMap(['frame', '{{1699,187},{292,92}}', 'offset', '{2,-1}', 'rotated', false, 'sourceColorRect', '{{4,3},{292,92}}', 'sourceSize', '{296,96}']), 'crater_a.png', $.makeLiteralMap(['frame', '{{576,1073},{160,160}}', 'offset', '{0,1}', 'rotated', false, 'sourceColorRect', '{{48,47},{160,160}}', 'sourceSize', '{256,256}']), 'dart_fly_0000.png', $.makeLiteralMap(['frame', '{{2002,1},{1,1}}', 'offset', '{-511.5,383.5}', 'rotated', false, 'sourceColorRect', '{{0,0},{1,1}}', 'sourceSize', '{1024,768}']), 'dart_fly_0001.png', $.makeLiteralMap(['frame', '{{467,720},{108,164}}', 'offset', '{411,-183}', 'rotated', false, 'sourceColorRect', '{{869,485},{108,164}}', 'sourceSize', '{1024,768}']), 'dart_fly_0002.png', $.makeLiteralMap(['frame', '{{1,98},{186,288}}', 'offset', '{375,-145}', 'rotated', true, 'sourceColorRect', '{{794,385},{186,288}}', 'sourceSize', '{1024,768}']), 'dart_fly_0003.png', $.makeLiteralMap(['frame', '{{290,98},{246,286}}', 'offset', '{347,-76}', 'rotated', true, 'sourceColorRect', '{{736,317},{246,286}}', 'sourceSize', '{1024,768}']), 'dart_fly_0004.png', $.makeLiteralMap(['frame', '{{814,98},{210,220}}', 'offset', '{283,3}', 'rotated', false, 'sourceColorRect', '{{690,271},{210,220}}', 'sourceSize', '{1024,768}']), 'dart_fly_0005.png', $.makeLiteralMap(['frame', '{{807,872},{182,166}}', 'offset', '{232,58}', 'rotated', false, 'sourceColorRect', '{{653,243},{182,166}}', 'sourceSize', '{1024,768}']), 'dart_fly_0006.png', $.makeLiteralMap(['frame', '{{1927,373},{160,120}}', 'offset', '{190,93}', 'rotated', true, 'sourceColorRect', '{{622,231},{160,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_0007.png', $.makeLiteralMap(['frame', '{{477,345},{142,98}}', 'offset', '{156,124}', 'rotated', true, 'sourceColorRect', '{{597,211},{142,98}}', 'sourceSize', '{1024,768}']), 'dart_fly_0008.png', $.makeLiteralMap(['frame', '{{1920,679},{126,92}}', 'offset', '{127,149}', 'rotated', false, 'sourceColorRect', '{{576,189},{126,92}}', 'sourceSize', '{1024,768}']), 'dart_fly_0009.png', $.makeLiteralMap(['frame', '{{461,1528},{112,86}}', 'offset', '{102,162}', 'rotated', true, 'sourceColorRect', '{{558,179},{112,86}}', 'sourceSize', '{1024,768}']), 'dart_fly_0010.png', $.makeLiteralMap(['frame', '{{1812,1259},{98,94}}', 'offset', '{82,160}', 'rotated', false, 'sourceColorRect', '{{545,177},{98,94}}', 'sourceSize', '{1024,768}']), 'dart_fly_0011.png', $.makeLiteralMap(['frame', '{{465,1107},{86,110}}', 'offset', '{65,144}', 'rotated', true, 'sourceColorRect', '{{534,185},{86,110}}', 'sourceSize', '{1024,768}']), 'dart_fly_0012.png', $.makeLiteralMap(['frame', '{{1078,1406},{76,124}}', 'offset', '{50,123}', 'rotated', true, 'sourceColorRect', '{{524,199},{76,124}}', 'sourceSize', '{1024,768}']), 'dart_fly_0013.png', $.makeLiteralMap(['frame', '{{737,1188},{66,134}}', 'offset', '{38,96}', 'rotated', false, 'sourceColorRect', '{{517,221},{66,134}}', 'sourceSize', '{1024,768}']), 'dart_fly_0014.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0015.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0016.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0017.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0018.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0019.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0020.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0021.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0022.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0023.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0024.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0025.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0026.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0027.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0028.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0029.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0030.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0031.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0032.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0033.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0034.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0035.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0036.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0037.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0038.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0039.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0040.png', $.makeLiteralMap(['frame', '{{799,1382},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0041.png', $.makeLiteralMap(['frame', '{{941,1374},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0042.png', $.makeLiteralMap(['frame', '{{736,1323},{62,136}}', 'offset', '{25,68}', 'rotated', false, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0043.png', $.makeLiteralMap(['frame', '{{804,1319},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0044.png', $.makeLiteralMap(['frame', '{{967,1311},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0045.png', $.makeLiteralMap(['frame', '{{967,1248},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0046.png', $.makeLiteralMap(['frame', '{{1666,1437},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0047.png', $.makeLiteralMap(['frame', '{{1436,1379},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0048.png', $.makeLiteralMap(['frame', '{{1903,1523},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0049.png', $.makeLiteralMap(['frame', '{{1903,1460},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0050.png', $.makeLiteralMap(['frame', '{{1671,1374},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0051.png', $.makeLiteralMap(['frame', '{{1911,1397},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0052.png', $.makeLiteralMap(['frame', '{{1911,1334},{62,136}}', 'offset', '{25,68}', 'rotated', true, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0053.png', $.makeLiteralMap(['frame', '{{160,1435},{62,136}}', 'offset', '{25,68}', 'rotated', false, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0054.png', $.makeLiteralMap(['frame', '{{160,1298},{62,136}}', 'offset', '{25,68}', 'rotated', false, 'sourceColorRect', '{{506,248},{62,136}}', 'sourceSize', '{1024,768}']), 'dart_fly_0055.png', $.makeLiteralMap(['frame', '{{2000,1},{1,1}}', 'offset', '{-511.5,383.5}', 'rotated', false, 'sourceColorRect', '{{0,0},{1,1}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0000.png', $.makeLiteralMap(['frame', '{{1998,1},{1,1}}', 'offset', '{-511.5,383.5}', 'rotated', false, 'sourceColorRect', '{{0,0},{1,1}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0001.png', $.makeLiteralMap(['frame', '{{1996,1},{1,1}}', 'offset', '{-511.5,383.5}', 'rotated', false, 'sourceColorRect', '{{0,0},{1,1}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0002.png', $.makeLiteralMap(['frame', '{{1,1578},{94,146}}', 'offset', '{-72,-140}', 'rotated', true, 'sourceColorRect', '{{393,451},{94,146}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0003.png', $.makeLiteralMap(['frame', '{{1462,1025},{136,226}}', 'offset', '{-69,-111}', 'rotated', true, 'sourceColorRect', '{{375,382},{136,226}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0004.png', $.makeLiteralMap(['frame', '{{1223,1027},{164,224}}', 'offset', '{-75,-58}', 'rotated', true, 'sourceColorRect', '{{355,330},{164,224}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0005.png', $.makeLiteralMap(['frame', '{{813,534},{148,190}}', 'offset', '{-76,-7}', 'rotated', true, 'sourceColorRect', '{{362,296},{148,190}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0006.png', $.makeLiteralMap(['frame', '{{223,1447},{136,154}}', 'offset', '{-75,34}', 'rotated', true, 'sourceColorRect', '{{369,273},{136,154}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0007.png', $.makeLiteralMap(['frame', '{{936,1437},{120,118}}', 'offset', '{-74,64}', 'rotated', false, 'sourceColorRect', '{{378,261},{120,118}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0008.png', $.makeLiteralMap(['frame', '{{477,488},{106,98}}', 'offset', '{-71,86}', 'rotated', true, 'sourceColorRect', '{{388,249},{106,98}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0009.png', $.makeLiteralMap(['frame', '{{1104,1331},{74,90}}', 'offset', '{-65,107}', 'rotated', true, 'sourceColorRect', '{{410,232},{74,90}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0010.png', $.makeLiteralMap(['frame', '{{1104,1248},{92,82}}', 'offset', '{-62,119}', 'rotated', false, 'sourceColorRect', '{{404,224},{92,82}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0011.png', $.makeLiteralMap(['frame', '{{1573,1379},{92,88}}', 'offset', '{-56,117}', 'rotated', false, 'sourceColorRect', '{{410,223},{92,88}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0012.png', $.makeLiteralMap(['frame', '{{464,1328},{86,102}}', 'offset', '{-49,102}', 'rotated', true, 'sourceColorRect', '{{420,231},{86,102}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0013.png', $.makeLiteralMap(['frame', '{{144,1691},{78,114}}', 'offset', '{-40,83}', 'rotated', false, 'sourceColorRect', '{{433,244},{78,114}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0014.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0015.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0016.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0017.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0018.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0019.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0020.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0021.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0022.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0023.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0024.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0025.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0026.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0027.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0028.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0029.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0030.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0031.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0032.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0033.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0034.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0035.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0036.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0037.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0038.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0039.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0040.png', $.makeLiteralMap(['frame', '{{552,1446},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0041.png', $.makeLiteralMap(['frame', '{{223,1584},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0042.png', $.makeLiteralMap(['frame', '{{567,1371},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0043.png', $.makeLiteralMap(['frame', '{{799,1445},{74,120}}', 'offset', '{-31,60}', 'rotated', true, 'sourceColorRect', '{{444,264},{74,120}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0044.png', $.makeLiteralMap(['frame', '{{673,1460},{74,118}}', 'offset', '{-31,59}', 'rotated', true, 'sourceColorRect', '{{444,266},{74,118}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0045.png', $.makeLiteralMap(['frame', '{{223,1659},{72,118}}', 'offset', '{-31,59}', 'rotated', true, 'sourceColorRect', '{{445,266},{72,118}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0046.png', $.makeLiteralMap(['frame', '{{552,1521},{72,118}}', 'offset', '{-31,59}', 'rotated', true, 'sourceColorRect', '{{445,266},{72,118}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0047.png', $.makeLiteralMap(['frame', '{{150,1572},{72,118}}', 'offset', '{-31,59}', 'rotated', false, 'sourceColorRect', '{{445,266},{72,118}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0048.png', $.makeLiteralMap(['frame', '{{344,1605},{72,116}}', 'offset', '{-31,58}', 'rotated', true, 'sourceColorRect', '{{445,268},{72,116}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0049.png', $.makeLiteralMap(['frame', '{{393,1288},{70,116}}', 'offset', '{-30,58}', 'rotated', false, 'sourceColorRect', '{{447,268},{70,116}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0050.png', $.makeLiteralMap(['frame', '{{393,1171},{70,116}}', 'offset', '{-31,58}', 'rotated', false, 'sourceColorRect', '{{446,268},{70,116}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0051.png', $.makeLiteralMap(['frame', '{{737,1073},{68,114}}', 'offset', '{-30,57}', 'rotated', false, 'sourceColorRect', '{{448,270},{68,114}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0052.png', $.makeLiteralMap(['frame', '{{464,1194},{66,110}}', 'offset', '{-30,55}', 'rotated', true, 'sourceColorRect', '{{449,274},{66,110}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0053.png', $.makeLiteralMap(['frame', '{{464,1261},{66,104}}', 'offset', '{-30,52}', 'rotated', true, 'sourceColorRect', '{{449,280},{66,104}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0054.png', $.makeLiteralMap(['frame', '{{1812,1354},{60,98}}', 'offset', '{-28,49}', 'rotated', true, 'sourceColorRect', '{{454,286},{60,98}}', 'sourceSize', '{1024,768}']), 'dart_fly_shadow_0055.png', $.makeLiteralMap(['frame', '{{1994,1},{1,1}}', 'offset', '{-511.5,383.5}', 'rotated', false, 'sourceColorRect', '{{0,0},{1,1}}', 'sourceSize', '{1024,768}']), 'game_board_center.png', $.makeLiteralMap(['frame', '{{661,1648},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'game_board_corner_bottom_left.png', $.makeLiteralMap(['frame', '{{548,1594},{112,112}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{112,112}}', 'sourceSize', '{112,112}']), 'game_board_corner_bottom_right.png', $.makeLiteralMap(['frame', '{{671,1535},{112,112}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{112,112}}', 'sourceSize', '{112,112}']), 'game_board_corner_top_left.png', $.makeLiteralMap(['frame', '{{792,1520},{112,112}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{112,112}}', 'sourceSize', '{112,112}']), 'game_board_corner_top_right.png', $.makeLiteralMap(['frame', '{{1,1788},{112,112}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{112,112}}', 'sourceSize', '{112,112}']), 'game_board_side_bottom.png', $.makeLiteralMap(['frame', '{{461,1641},{80,112}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,112}}', 'sourceSize', '{80,112}']), 'game_board_side_left.png', $.makeLiteralMap(['frame', '{{223,1732},{112,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{112,80}}', 'sourceSize', '{112,80}']), 'game_board_side_right.png', $.makeLiteralMap(['frame', '{{342,1678},{112,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{112,80}}', 'sourceSize', '{112,80}']), 'game_board_side_top.png', $.makeLiteralMap(['frame', '{{382,1405},{80,112}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,112}}', 'sourceSize', '{80,112}']), 'number_eight.png', $.makeLiteralMap(['frame', '{{784,1633},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'number_five.png', $.makeLiteralMap(['frame', '{{905,1556},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'number_four.png', $.makeLiteralMap(['frame', '{{1057,1483},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'number_one.png', $.makeLiteralMap(['frame', '{{1203,1409},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'number_seven.png', $.makeLiteralMap(['frame', '{{163,1887},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'number_six.png', $.makeLiteralMap(['frame', '{{82,1901},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'number_three.png', $.makeLiteralMap(['frame', '{{1,1901},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}']), 'number_two.png', $.makeLiteralMap(['frame', '{{114,1806},{80,80}}', 'offset', '{0,0}', 'rotated', false, 'sourceColorRect', '{{0,0},{80,80}}', 'sourceSize', '{80,80}'])]);
  var frames$ = $.makeLiteralMap([]);
  $.forEach(artFramesJson, new $._getTextures_anon(frames$));
  return frames$;
};

$.Maps_mapToString = function(m) {
  $.callTypeCheck(m, 'is$Map');
  var result = $.StringBufferImpl$('');
  $.Maps__emitMap(m, result, $.ListImplementation_List(null));
  return result.toString$0();
};

$._onTouchMove = function(args) {
  $.callTypeCheck(args, 'is$TouchEvent').preventDefault$0();
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  $.functionTypeCheck(closure, 'is$Function');
  $.intTypeCheck(numberOfArguments, 'is$$int');
  if (numberOfArguments === 0)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (numberOfArguments === 1)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (numberOfArguments === 2)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.SquareElement$ = function(x, y) {
  var t1 = $.ListImplementation_List(null, 'AffineTransform');
  $.setRuntimeTypeInfo(t1, { 'E': 'AffineTransform' });
  var t2 = $.EventHandle$('EventArgs');
  var t3 = $.EventHandle$('EventArgs');
  var t4 = $.HashMapImplementation$('Property', 'Object');
  var t5 = $.HashMapImplementation$('Attachable', 'EventHandle');
  t1 = new $.SquareElement($.intTypeCheck(x, 'is$$int'), $.intTypeCheck(y, 'is$$int'), null, t1, false, $.propertyTypeCheck(t2, 'is$EventHandle'), $.propertyTypeCheck(t3, 'is$EventHandle'), null, 80, 80, $.numTypeCheck(null, 'is$num'), $.propertyTypeCheck(null, 'is$Size'), false, $.propertyTypeCheck(null, 'is$ElementParent'), $.propertyTypeCheck(t4, 'is$HashMap'), $.propertyTypeCheck(t5, 'is$HashMap'), false);
  t1.SquareElement$2(x, y);
  return t1;
};

$._isJavaScriptSimpleObject = function(value) {
  return Object.getPrototypeOf(value) === Object.prototype;
};

$.GameElement__getScale = function(count, fullSize, holeSize) {
  $.numTypeCheck(fullSize, 'is$num');
  return $.div($.mul($.add($.mul(count, 80), 64), fullSize), holeSize);
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.StringMatch$ = function(_start, str, pattern) {
  return new $.StringMatch(_start, str, pattern);
};

$.ioore = function(index) {
  throw $.$$throw($.IndexOutOfRangeException$(index));
};

$.playAudio = function(name$) {
  if (!($._audioContext == null)) {
    var source = $._audioContext.createBufferSource$0();
    source.set$buffer($.index($._buffers, name$));
    source.connect$2($._audioContext.get$destination(), 0);
    source.noteOn$1(0);
  }
};

$._callInIsolate = function(isolate, function$) {
  $.propertyTypeCheck(isolate, 'is$_IsolateContext').eval$1($.functionTypeCheck(function$, 'is$Function'));
  $._globalState().get$topEventLoop().run$0();
};

$._runSweeper = function() {
  var m = $.intTypeCheck($.toInt(7.65625), 'is$$int');
  var sweeperTable = $.callTypeCheck($.query('#sweeperCanvas'), 'is$CanvasElement');
  $.callTypeCheck($.query('#gameState'), 'is$Element');
  $.GameRoot_GameRoot(7, 7, m, sweeperTable, false);
  $.add$1($.window().get$on().get$touchMove(), $._onTouchMove);
};

$.regExpAttachGlobalNative = function(regExp) {
  regExp._re = $.regExpMakeNative(regExp, true);
};

$.DateImplementation$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateImplementation($.intTypeCheck(millisecondsSinceEpoch, 'is$$int'), $.boolTypeCheck(isUtc, 'is$bool'));
  t1.DateImplementation$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.mod = function(a, b) {
  if ($.checkNumbers(a, b)) {
    var result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$._IDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBRequestEventsImpl(_ptr);
};

$.boolConversionCheck = function(value) {
  $.boolTypeCheck(value);
  $.assert(!(value == null));
  return value;
};

$.ImageLoader$ = function(urls) {
  var t1 = $.HashSetImplementation$('String');
  var t2 = $.EventHandle$('EventArgs');
  var t3 = $.EventHandle$('EventArgs');
  var t4 = $.HashMapImplementation$('String', $.getRuntimeTypeInfo(this).T);
  var t5 = $.HashSetImplementation$('String');
  var t6 = $.$$(urls).toReadOnlyCollection$0();
  return new $.ImageLoader($.propertyTypeCheck(t1, 'is$Set'), $.propertyTypeCheck(t6, 'is$ReadOnlyCollection'), $.propertyTypeCheck(t2, 'is$EventHandle'), $.propertyTypeCheck(t3, 'is$EventHandle'), $.callTypeCheck(t4, 'is$Map'), $.propertyTypeCheck(t5, 'is$Set'), 'unloaded');
};

$._DOMWindowCrossFrameImpl$ = function(_window) {
  return new $._DOMWindowCrossFrameImpl($.callTypeCheck(_window, 'is$_WindowImpl'));
};

$.RetainedUtil_transformPointGlobalToLocal = function(element, point) {
  return element.getTransform$0().createInverse$0().transformCoordinate$1(point);
};

$.Collections_collectionToString = function(c) {
  $.listSuperNativeTypeCheck(c, 'is$Collection');
  var result = $.StringBufferImpl$('');
  $.Collections__emitCollection(c, result, $.ListImplementation_List(null));
  return result.toString$0();
};

$.CanvasUtil_centeredCircle = function(ctx, x, y, radius) {
  $.numTypeCheck(x, 'is$num');
  $.numTypeCheck(y, 'is$num');
  var t1 = $.sub(x, radius);
  var t2 = $.sub(y, radius);
  var t3 = radius * 2;
  $.CanvasUtil_ellipse(ctx, t1, t2, t3, t3);
};

$._SharedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._SharedWorkerContextEventsImpl(_ptr);
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver)) {
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.IllegalArgumentException$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  } else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.IllegalArgumentException$(start));
    if (!(typeof element === 'string'))
      throw $.$$throw($.IllegalArgumentException$(element));
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$.RetainedUtil_hitTest = function(stage, point) {
  return $.RetainedUtil__hitTest(stage.get$rootElement(), point);
};

$._TextTrackEventsImpl$ = function(_ptr) {
  return new $._TextTrackEventsImpl(_ptr);
};

$.DoubleLinkedQueue$ = function(E) {
  var t1 = new $.DoubleLinkedQueue(null);
  $.setRuntimeTypeInfo(t1, { 'E': E });
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.StringBufferImpl$ = function(content$) {
  var t1 = new $.StringBufferImpl(null, null);
  t1.StringBufferImpl$1(content$);
  return t1;
};

$.getRuntimeTypeInfo = function(target) {
  if (target == null)
    return;
  var res = target.builtin$typeInfo;
  return res == null ? {} : res;
};

$.callTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value[property]())
    return value;
  $.propertyTypeError(value, property);
};

$._SVGElementInstanceEventsImpl$ = function(_ptr) {
  return new $._SVGElementInstanceEventsImpl(_ptr);
};

$.Primitives_getDay = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCDate() : $.Primitives_lazyAsJsDate(receiver).getDate();
};

$.populateTextures = function(imageElement, textures) {
  $.callTypeCheck(imageElement, 'is$ImageElement');
  $.callTypeCheck(textures, 'is$Map');
  $.assert($._textures == null);
  $.assert(!(textures == null));
  $.assert(!(imageElement == null));
  $.assert($._textureImage == null);
  $._textures = $.callTypeCheck(textures, 'is$Map');
  $._textureImage = imageElement;
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.drawTextureAt = function(ctx, location$, texture, imageElement) {
  $.propertyTypeCheck(texture, 'is$TextureInput');
  $.callTypeCheck(imageElement, 'is$ImageElement');
  ctx.save$0();
  var tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  tx.translate$2(location$.x, location$.y);
  var theFrame = texture.get$frame();
  var source = texture.get$sourceColorRect().get$topLeft();
  tx.translate$2(source.get$x(), source.get$y());
  if ($.boolConversionCheck(texture.get$rotated(), 'is$bool')) {
    var t1 = theFrame.get$height();
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    t1 = 0.5 * t1;
    var t2 = theFrame.get$height();
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    tx.rotate$3(-1.5707963267948966, t1, 0.5 * t2);
    var theFrame0 = $.Box$(theFrame.get$left(), theFrame.get$top(), theFrame.get$height(), theFrame.get$width());
    theFrame = theFrame0;
  }
  $.CanvasUtil_transform(ctx, tx);
  $.CanvasUtil_drawImage(ctx, imageElement, theFrame, null);
  ctx.restore$0();
};

$.Coordinate$ = function(x, y) {
  return new $.Coordinate($.numTypeCheck(x, 'is$num'), $.numTypeCheck(y, 'is$num'));
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator = $.propertyTypeCheck($.iterator(keyValuePairs), 'is$Iterator');
  var result = $.callTypeCheck($.LinkedHashMapImplementation$(), 'is$Map');
  for (; $.boolConversionCheck(iterator.hasNext$0(), 'is$bool');)
    result.operator$indexSet$2($.stringTypeCheck(iterator.next$0(), 'is$String'), iterator.next$0());
  return result;
};

$.Tuple$ = function(Item1, Item2, T1, T2) {
  var t1 = new $.Tuple(Item1, Item2);
  $.setRuntimeTypeInfo(t1, { 'T1': T1, 'T2': T2 });
  return t1;
};

$.NoMoreElementsException$ = function() {
  return new $.NoMoreElementsException();
};

$.addAll = function(receiver, collection) {
  if (!$.isJsArray(receiver))
    return receiver.addAll$1(collection);
  var iterator = $.iterator(collection);
  for (; $.boolConversionCheck(iterator.hasNext$0(), 'is$bool');)
    $.add$1(receiver, iterator.next$0());
};

$._Elements_ImageElement = function(src, width, height) {
  var _e = $.callTypeCheck($._document().$dom_createElement$1('img'), 'is$_ImageElementImpl');
  if (!(src == null))
    _e.set$src(src);
  if (!(width == null))
    _e.set$width(width);
  if (!(height == null))
    _e.set$height(height);
  return _e;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.Collections__emitCollection = function(c, result, visiting) {
  $.listSuperNativeTypeCheck(c, 'is$Collection');
  $.propertyTypeCheck(result, 'is$StringBuffer');
  $.listTypeCheck(visiting, 'is$List');
  $.add$1(visiting, c);
  var isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  $.add$1(result, isList ? '[' : '{');
  for (var t1 = $.iterator(c), first = true; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    if (!first)
      $.add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
    first = false;
  }
  $.add$1(result, isList ? ']' : '}');
  $.removeLast(visiting);
};

$._document = function() {
return document;
};

$._FrameSetElementEventsImpl$ = function(_ptr) {
  return new $._FrameSetElementEventsImpl(_ptr);
};

$._getAudioPath = function(name$) {
  return 'audio/' + $.S($.stringTypeCheck(name$, 'is$String')) + '.webm';
};

$.listInsertRange = function(receiver, start, length$, initialValue) {
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.IllegalArgumentException$(length$));
  if (length$ < 0)
    throw $.$$throw($.IllegalArgumentException$(length$));
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.IllegalArgumentException$(start));
  var receiverLength = receiver.length;
  if ($.boolConversionCheck(start < 0 || start > receiverLength, 'is$bool'))
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var t1 = receiverLength + length$;
  $.set$length(receiver, t1);
  var t2 = start + length$;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (var i = start; $.boolConversionCheck($.lt(i, t2), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
      $.indexSet(receiver, i, initialValue);
  $.set$length(receiver, t1);
};

$._IDBDatabaseEventsImpl$ = function(_ptr) {
  return new $._IDBDatabaseEventsImpl(_ptr);
};

$.allMatches = function(receiver, str) {
  if (!(typeof receiver === 'string'))
    return receiver.allMatches$1(str);
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.Array2d_Array2d = function(width, height, initialValue, T) {
  $.intTypeCheck(width, 'is$$int');
  $.intTypeCheck(height, 'is$$int');
  $.requireArgumentNotNull(width, 'width');
  $.requireArgumentNotNull(height, 'height');
  $.requireArgument($.gt(width, 0), 'width', null);
  $.requireArgument($.gt(height, 0), 'height', null);
  var s = $.ListImplementation_List(null, T);
  $.setRuntimeTypeInfo(s, { 'E': T });
  $.insertRange$3(s, 0, $.mul(width, height), initialValue);
  return $.Array2d$wrap(width, s);
};

$.TypeErrorImplementation$ = function(msg) {
  return new $.TypeErrorImplementation(msg);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var re = $.JSSyntaxRegExp$(other.get$pattern(), other.get$multiLine(), other.get$ignoreCase());
  $.regExpAttachGlobalNative(re);
  return re;
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$.GlobalId_GlobalId = function() {
  var t1 = $.GlobalId__globalId;
  $.GlobalId__globalId = $.intTypeCheck($.add(t1, 1), 'is$$int');
  return $.GlobalId$_internal(t1);
};

$._MediaStreamTrackListEventsImpl$ = function(_ptr) {
  return new $._MediaStreamTrackListEventsImpl(_ptr);
};

$.log = function(value) {
  return Math.log($.checkNum($.numTypeCheck(value, 'is$num')));
};

$.pow = function(value, exponent) {
  $.numTypeCheck(exponent, 'is$num');
  $.checkNum(value);
  $.checkNum(exponent);
  return Math.pow(value, exponent);
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.IllegalArgumentException$(value));
  return res;
};

$._DoubleLinkedQueueIterator$ = function(_sentinel, E) {
  $.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel');
  var t1 = new $._DoubleLinkedQueueIterator($.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel'), null);
  $.setRuntimeTypeInfo(t1, { 'E': E });
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$.$$ = function(source) {
  $.listSuperNativeTypeCheck(source, 'is$Iterable');
  if (typeof source === 'object' && source !== null && !!source.is$Enumerable)
    return source;
  else
    return $.Enumerable_Enumerable$fromIterable(source);
};

$.EventHandle$ = function(T) {
  var t1 = new $.EventHandle(null, false);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$.startRootIsolate = function(entry) {
  var t1 = $._Manager$();
  $._globalState0(t1);
  if ($.boolConversionCheck($._globalState().get$isWorker(), 'is$bool'))
    return;
  var rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $._fillStatics(rootContext);
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.Collections__emitObject = function(o, result, visiting) {
  $.propertyTypeCheck(result, 'is$StringBuffer');
  $.listTypeCheck(visiting, 'is$List');
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add$1(result, o == null ? 'null' : o);
};

$._DedicatedWorkerContextEventsImpl$ = function(_ptr) {
  return new $._DedicatedWorkerContextEventsImpl(_ptr);
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$._EventLoop$ = function() {
  return new $._EventLoop($.propertyTypeCheck($.DoubleLinkedQueue$('_IsolateEvent'), 'is$Queue'));
};

$.Field$_internal = function(mineCount, cols, source) {
  $.intTypeCheck(cols, 'is$$int');
  $.propertyTypeCheck(source, 'is$ReadOnlyCollection');
  var t1 = $.Array2d_Array2d(cols, $.tdiv($.get$length(source), cols), null, 'int');
  var t2 = $.boolConversionCheck(!(cols == null) && $.boolConversionCheck($.gt(cols, 0), 'is$bool') && !(source == null), 'is$bool') ? $.tdiv($.get$length(source), cols) : 0;
  var t3 = new $.Field($.intTypeCheck(mineCount, 'is$$int'), $.propertyTypeCheck(t1, 'is$Array2d'), cols, $.intTypeCheck(t2, 'is$$int'), $.listTypeCheck(source, 'is$List'));
  t3.Array2d$wrap$2(cols, source);
  t3.Field$_internal$3(mineCount, cols, source);
  return t3;
};

$.substringUnchecked = function(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};

$.listTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()))
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement List'));
};

$.rnd = function() {
  if ($._dartlibHelperRandom == null)
    $._dartlibHelperRandom = $.propertyTypeCheck($.Random_Random(null), 'is$Random');
  return $._dartlibHelperRandom;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object);
};

$._AudioContextEventsImpl$ = function(_ptr) {
  return new $._AudioContextEventsImpl(_ptr);
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$._ElementAttributeMap$ = function(_element) {
  return new $._ElementAttributeMap(_element);
};

$.contains$2 = function(receiver, other, startIndex) {
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.regExpMatchStart = function(m) {
  return m.index;
};

$._WorkerContextEventsImpl$ = function(_ptr) {
  return new $._WorkerContextEventsImpl(_ptr);
};

$._ElementEventsImpl$ = function(_ptr) {
  return new $._ElementEventsImpl(_ptr);
};

$.Primitives_getMonth = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = $.listTypeCheck(table, 'is$List');
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.isNegative = function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.jsHasOwnProperty = function(jsObject, property) {
  return jsObject.hasOwnProperty(property);
};

$.Enumerable_Enumerable$fromIterable = function(source, T) {
  $.listSuperNativeTypeCheck(source, 'is$Iterable');
  $.requireArgumentNotNull(source, 'source');
  return $._SimpleEnumerable$(source, T);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$.AttachedEvent$ = function(name$, T) {
  var t1 = new $.AttachedEvent($.stringTypeCheck(name$, 'is$String'), $.propertyTypeCheck($.GlobalId_GlobalId(), 'is$GlobalId'));
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._MatchImplementation$ = function(pattern, str, _start, _end, _groups) {
  return new $._MatchImplementation($.stringTypeCheck(pattern, 'is$String'), str, $.intTypeCheck(_start, 'is$$int'), $.intTypeCheck(_end, 'is$$int'), $.listTypeCheck($.listTypeCheck(_groups, 'is$List'), 'is$List'));
};

$.Futures_wait = function(futures) {
  var t1 = {};
  $.listTypeCheck(futures, 'is$List');
  if (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior())
    return $.Futures_wait$bailout(1, t1, futures);
  if ($.boolConversionCheck($.isEmpty(futures), 'is$bool'))
    return $.FutureImpl_FutureImpl$immediate($.CTC2, 'List');
  var completer = $.propertyTypeCheck($.CompleterImpl$('List'), 'is$Completer');
  var result = $.propertyTypeCheck(completer.get$future(), 'is$Future');
  t1.remaining_1 = futures.length;
  var values = $.ListImplementation_List(futures.length);
  for (var i = 0; $.boolConversionCheck($.lt(i, futures.length), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= futures.length)
      throw $.ioore(i);
    var future = $.propertyTypeCheck(futures[i], 'is$Future');
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  $.listTypeCheck(src, 'is$List');
  $.listTypeCheck(dst, 'is$List');
  $.intTypeCheck(count, 'is$$int');
  if (srcStart < dstStart) {
    if (typeof count !== 'number')
      throw $.iae(count);
    var i = $.intTypeCheck(srcStart + count - 1, 'is$$int');
    if (i !== (i | 0))
      return $.Arrays_copy$bailout(1, srcStart, count, src, i, dst, dstStart);
    var j = $.intTypeCheck(dstStart + count - 1, 'is$$int');
    if (j !== (j | 0))
      return $.Arrays_copy$bailout(2, dst, srcStart, j, src, i, 0);
    for (; $.boolConversionCheck($.ge(i, srcStart), 'is$bool'); i = $.intTypeCheck($.sub(i, 1), 'is$$int'), j = $.intTypeCheck($.sub(j, 1), 'is$$int'))
      $.indexSet(dst, j, $.index(src, i));
  } else {
    i = srcStart;
    j = dstStart;
    while (true) {
      if (typeof count !== 'number')
        throw $.iae(count);
      if (!$.boolConversionCheck($.lt(i, srcStart + count), 'is$bool'))
        break;
      $.indexSet(dst, j, $.index(src, i));
      i = $.intTypeCheck($.add(i, 1), 'is$$int');
      j = $.intTypeCheck($.add(j, 1), 'is$$int');
    }
  }
};

$.DateImplementation$now = function() {
  var t1 = new $.DateImplementation($.intTypeCheck($.Primitives_dateNow(), 'is$$int'), false);
  t1.DateImplementation$now$0();
  return t1;
};

$.CanvasUtil_ellipse = function(ctx, x, y, width, height) {
  $.numTypeCheck(x, 'is$num');
  $.numTypeCheck(y, 'is$num');
  var t1 = width / 2;
  var hB = t1 * 0.5522847498307935;
  var t2 = height / 2;
  var vB = t2 * 0.5522847498307935;
  var eX = $.add(x, width);
  var eY = $.add(y, height);
  var mX = $.add(x, t1);
  var mY = $.add(y, t2);
  ctx.beginPath$0();
  ctx.moveTo$2(x, mY);
  ctx.bezierCurveTo$6(x, $.sub(mY, vB), $.sub(mX, hB), y, mX, y);
  ctx.bezierCurveTo$6($.add(mX, hB), y, eX, $.sub(mY, vB), eX, mY);
  ctx.bezierCurveTo$6(eX, $.add(mY, vB), $.add(mX, hB), eY, mX, eY);
  ctx.bezierCurveTo$6($.sub(mX, hB), eY, x, $.add(mY, vB), x, mY);
  ctx.closePath$0();
};

$._PeerConnection00EventsImpl$ = function(_ptr) {
  return new $._PeerConnection00EventsImpl(_ptr);
};

$._AbstractWorkerEventsImpl$ = function(_ptr) {
  return new $._AbstractWorkerEventsImpl(_ptr);
};

$.indexSet = function(a, index, value) {
  if (a.constructor === Array && !a.immutable$list) {
    var key = index >>> 0;
    if ($.boolConversionCheck(key === index && key < a.length, 'is$bool')) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.index$slow = function(a, index) {
  if (typeof a === 'string' || $.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.IllegalArgumentException$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.IllegalArgumentException$(index));
    }
    if ($.boolConversionCheck($.boolConversionCheck($.lt(index, 0), 'is$bool') || $.boolConversionCheck($.ge(index, $.get$length(a)), 'is$bool'), 'is$bool'))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.AssertionError$ = function() {
  return new $.AssertionError();
};

$._Elements_CanvasElement = function(width, height) {
  var _e = $.callTypeCheck($._document().$dom_createElement$1('canvas'), 'is$_CanvasElementImpl');
  if (!(width == null))
    _e.set$width(width);
  if (!(height == null))
    _e.set$height(height);
  return _e;
};

$.Game$ = function(field) {
  $.propertyTypeCheck(field, 'is$Field');
  var t1 = $.EventHandle$('EventArgs');
  var t2 = $.EventHandle$('GameState');
  var t3 = new $.Game(field, $.propertyTypeCheck($.Array2d_Array2d(field.get$width(), field.get$height(), $.CTC33, 'SquareState'), 'is$Array2d'), $.propertyTypeCheck(t1, 'is$EventHandle'), $.propertyTypeCheck(t2, 'is$EventHandle'), $.CTC29, null, null, null, null);
  t3.Game$1(field);
  return t3;
};

$.$$throw = function(ex) {
  if (ex == null)
    ex = $.CTC1;
  var jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.GameRoot$_internal = function(width, height, mineCount, _canvas, _stage, gameElement, _clickMan) {
  var t1 = gameElement.addTransform$0();
  var t2 = $.GameStorage$();
  t2 = new $.GameRoot(_stage, _canvas, gameElement, _clickMan, $.propertyTypeCheck(t1, 'is$AffineTransform'), false, width, height, mineCount, t2, null, null, null, $.intTypeCheck(null, 'is$$int'));
  t2.GameManager$3(width, height, mineCount);
  t2.GameRoot$_internal$7(width, height, mineCount, _canvas, _stage, gameElement, _clickMan);
  return t2;
};

$._MessagePortEventsImpl$ = function(_ptr) {
  return new $._MessagePortEventsImpl(_ptr);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent($.propertyTypeCheck(isolate, 'is$_IsolateContext'), $.functionTypeCheck(fn, 'is$Function'), message);
};

$.ReadOnlyCollection$ = function(source, T) {
  var t1 = $.ListImplementation_List$from($.listSuperNativeTypeCheck(source, 'is$Iterable'), $.getRuntimeTypeInfo(this).T);
  $.setRuntimeTypeInfo(t1, { 'E': $.getRuntimeTypeInfo(this).T });
  t1 = new $.ReadOnlyCollection(t1);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$.min = function(a, b) {
  $.numTypeCheck(a, 'is$num');
  $.numTypeCheck(b, 'is$num');
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if ($.boolConversionCheck($.boolConversionCheck(a === 0 && $.boolConversionCheck($.isNegative(b), 'is$bool'), 'is$bool') || $.boolConversionCheck($.isNaN(b), 'is$bool'), 'is$bool'))
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.IllegalArgumentException$(b));
  }
  throw $.$$throw($.IllegalArgumentException$(a));
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedOperationException$(reason));
};

$.propertyTypeError = function(value, property) {
  var name$ = $.stringTypeCheck($.substring$2(property, 3, $.get$length(property)), 'is$String');
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement ' + $.S(name$)));
};

$.index = function(a, index) {
  if (typeof a == "string" || a.constructor === Array) {
    var key = index >>> 0;
    if ($.boolConversionCheck(key === index && key < a.length, 'is$bool'))
      return a[key];
  }
  return $.index$slow(a, index);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.RetainedUtil__hitTest = function(element, point) {
  $.propertyTypeCheck(element, 'is$PElement');
  point = $.propertyTypeCheck($.RetainedUtil_transformPointGlobalToLocal(element, point), 'is$Coordinate');
  var bounds = $.Box$(0, 0, element.get$width(), element.get$height());
  var hits = $.ListImplementation_List(null, 'PElement');
  $.setRuntimeTypeInfo(hits, { 'E': 'PElement' });
  if ($.boolConversionCheck(bounds.contains$1(point), 'is$bool')) {
    var length$ = element.get$visualChildCount();
    if (typeof length$ !== 'number')
      return $.RetainedUtil__hitTest$bailout(1, hits, length$, element, point);
    for (var t1 = length$ - 1, i = 0; i < length$; ++i) {
      hits = $.RetainedUtil__hitTest(element.getVisualChild$1(t1 - i), point);
      if (hits.length > 0)
        break;
    }
    hits.push(element);
    return hits;
  } else
    return [];
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$.substring$1 = function(receiver, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$1(startIndex);
  return $.substring$2(receiver, startIndex, null);
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.CanvasUtil_getCanvasSize = function(canvasElement) {
  $.callTypeCheck(canvasElement, 'is$CanvasElement');
  return $.Size$(canvasElement.get$width(), canvasElement.get$height());
};

$.TextureAnimationElement$ = function(width, height) {
  var t1 = $.ListImplementation_List(null, 'TextAniRequest');
  $.setRuntimeTypeInfo(t1, { 'E': 'TextAniRequest' });
  var t2 = $.ListImplementation_List(null, 'AffineTransform');
  $.setRuntimeTypeInfo(t2, { 'E': 'AffineTransform' });
  var t3 = $.EventHandle$('EventArgs');
  var t4 = $.EventHandle$('EventArgs');
  var t5 = $.HashMapImplementation$('Property', 'Object');
  var t6 = $.HashMapImplementation$('Attachable', 'EventHandle');
  return new $.TextureAnimationElement(t1, t2, false, $.propertyTypeCheck(t3, 'is$EventHandle'), $.propertyTypeCheck(t4, 'is$EventHandle'), null, width, height, null, $.propertyTypeCheck(null, 'is$Size'), false, $.propertyTypeCheck(null, 'is$ElementParent'), $.propertyTypeCheck(t5, 'is$HashMap'), $.propertyTypeCheck(t6, 'is$HashMap'), false);
};

$.DurationImplementation$ = function(days, hours, minutes, seconds, milliseconds) {
  $.intTypeCheck(milliseconds, 'is$$int');
  var t1 = days * 86400000 + hours * 3600000 + minutes * 60000 + seconds * 1000;
  if (typeof milliseconds !== 'number')
    throw $.iae(milliseconds);
  return new $.DurationImplementation($.intTypeCheck(t1 + milliseconds, 'is$$int'));
};

$.ClickManager$ = function(_stage) {
  var t1 = new $.ClickManager(_stage, null);
  t1.ClickManager$1(_stage);
  return t1;
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$._DoubleLinkedQueueEntrySentinel$ = function(E) {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  $.setRuntimeTypeInfo(t1, { 'E': E });
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$.TextureInput_TextureInput$fromHash = function(keyName, map) {
  $.callTypeCheck(map, 'is$Map');
  var frame = $.TextureInput__parseRect(map.operator$index$1('frame'));
  var offset = $.TextureInput__parseCoordinate(map.operator$index$1('offset')).toVector$0();
  var sourceColorRect = $.TextureInput__parseRect(map.operator$index$1('sourceColorRect'));
  var sourceSize = $.TextureInput__parseCoordinate(map.operator$index$1('sourceSize')).toSize$0();
  return $.TextureInput$(keyName, frame, offset, map.operator$index$1('rotated'), sourceColorRect, sourceSize);
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === 'string')
    return !($.indexOf$2(receiver, other, startIndex) === -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.substring$1(receiver, startIndex))).hasNext$0();
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.IllegalArgumentException$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.requireArgument = function(truth, arg, message) {
  if (!$.boolTypeCheck(truth, 'is$bool'))
    if (!(message == null))
      throw $.$$throw($.DetailedIllegalArgumentException$(arg, message));
    else
      throw $.$$throw($.IllegalArgumentException$(arg));
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.insertRange$3 = function(receiver, start, length$, initialValue) {
  if (!$.isJsArray(receiver))
    return receiver.insertRange$3(start, length$, initialValue);
  return $.listInsertRange(receiver, start, length$, initialValue);
};

$.NewGameElement$ = function() {
  var t1 = $.EventHandle$('EventArgs');
  var t2 = $.ListImplementation_List(null, 'AffineTransform');
  $.setRuntimeTypeInfo(t2, { 'E': 'AffineTransform' });
  var t3 = $.EventHandle$('EventArgs');
  var t4 = $.EventHandle$('EventArgs');
  var t5 = $.HashMapImplementation$('Property', 'Object');
  var t6 = $.HashMapImplementation$('Attachable', 'EventHandle');
  t2 = new $.NewGameElement($.propertyTypeCheck(t1, 'is$EventHandle'), t2, false, $.propertyTypeCheck(t3, 'is$EventHandle'), $.propertyTypeCheck(t4, 'is$EventHandle'), null, 294, 92, null, $.propertyTypeCheck(null, 'is$Size'), false, $.propertyTypeCheck(null, 'is$ElementParent'), $.propertyTypeCheck(t5, 'is$HashMap'), $.propertyTypeCheck(t6, 'is$HashMap'), false);
  t2.NewGameElement$0();
  return t2;
};

$._NotificationEventsImpl$ = function(_ptr) {
  return new $._NotificationEventsImpl(_ptr);
};

$.Coordinate_difference = function(a, b) {
  return $.Vector$($.sub(a.x, b.get$x()), $.sub(a.y, b.get$y()));
};

$.doubleTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number')
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement double'));
};

$.AudioLoader$ = function(context, urlList) {
  $.listSuperNativeTypeCheck(urlList, 'is$Iterable');
  var t1 = $.EventHandle$('EventArgs');
  var t2 = $.EventHandle$('EventArgs');
  var t3 = $.HashMapImplementation$('String', $.getRuntimeTypeInfo(this).T);
  var t4 = $.HashSetImplementation$('String');
  var t5 = $.$$(urlList).toReadOnlyCollection$0();
  return new $.AudioLoader($.callTypeCheck(context, 'is$AudioContext'), $.propertyTypeCheck(t5, 'is$ReadOnlyCollection'), $.propertyTypeCheck(t1, 'is$EventHandle'), $.propertyTypeCheck(t2, 'is$EventHandle'), $.callTypeCheck(t3, 'is$Map'), $.propertyTypeCheck(t4, 'is$Set'), 'unloaded');
};

$.DoubleLinkedQueueEntry$ = function(e, E) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  $.setRuntimeTypeInfo(t1, { 'E': E });
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.getMouseEventCoordinate = function(event$) {
  return $.Coordinate$(event$.get$offsetX(), event$.get$offsetY());
};

$.startsWith = function(receiver, other) {
  $.checkString(other);
  var length$ = other.length;
  if ($.boolConversionCheck(length$ > receiver.length, 'is$bool'))
    return false;
  return other == receiver.substring(0, length$);
};

$.getRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.getRange$2(start, length$);
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  var t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.IllegalArgumentException$(length$));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = start + length$;
  if ($.gt(end, $.get$length(receiver)))
    throw $.$$throw($.IndexOutOfRangeException$(length$));
  if (t1)
    throw $.$$throw($.IllegalArgumentException$(length$));
  return receiver.slice(start, end);
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  $.listTypeCheck(a, 'is$List');
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $._Lists_getRange$bailout(1, start, length$, accumulator, a);
  if (length$ < 0)
    throw $.$$throw($.IllegalArgumentException$('length'));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = start + length$;
  if (end > a.length)
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; $.boolConversionCheck($.lt(i, end), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.convertDartClosureToJS = function(closure, arity) {
  if (closure == null)
    return;
  var function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.ObjectNotClosureException$ = function() {
  return new $.ObjectNotClosureException();
};

$.clear = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.clear$0();
  $.set$length(receiver, 0);
};

$.Primitives_objectTypeName = function(object) {
  var name$ = $.stringTypeCheck($.constructorNameFallback(object), 'is$String');
  if (name$ === 'Object') {
    var decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.charCodeAt(name$, 0) === 36 ? $.stringTypeCheck($.substring$1(name$, 1), 'is$String') : name$;
};

$.remainder = function(a, b) {
  if ($.checkNumbers(a, b))
    return a % b;
  else
    return a.remainder$1(b);
};

$.IndexIterator$ = function(length$, indexer, T) {
  $.intTypeCheck(length$, 'is$$int');
  $.functionTypeCheck(indexer, 'is$Func1');
  var t1 = new $.IndexIterator($.functionTypeCheck(indexer, 'is$Func1'), length$, 0);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  t1.IndexIterator$2(length$, indexer);
  return t1;
};

$.HashSetIterator$ = function(set_, E) {
  $.propertyTypeCheck(set_, 'is$HashSetImplementation');
  var t1 = new $.HashSetIterator($.listTypeCheck(set_.get$_backingMap().get$_keys(), 'is$List'), -1);
  $.setRuntimeTypeInfo(t1, { 'E': E });
  t1.HashSetIterator$1(set_);
  return t1;
};

$.print = function(obj) {
  if (typeof obj === 'string')
    $.Primitives_printString(obj);
  else
    $.Primitives_printString($.toString(obj));
};

$.forEach = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.forEach$1(f);
  else
    return $.Collections_forEach(receiver, f);
};

$.Collections_forEach = function(iterable, f) {
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f, 'is$Function');
  for (var t1 = $.iterator(iterable); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    f.call$1(t1.next$0());
};

$.isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.isEmpty$0();
};

$.StackOverflowException$ = function() {
  return new $.StackOverflowException();
};

$._DOMWindowCrossFrameImpl__close = function(win) {
win.close()
};

$.GameBackgroundElement$ = function() {
  var t1 = $.ListImplementation_List(null, 'AffineTransform');
  $.setRuntimeTypeInfo(t1, { 'E': 'AffineTransform' });
  var t2 = $.EventHandle$('EventArgs');
  var t3 = $.EventHandle$('EventArgs');
  var t4 = $.HashMapImplementation$('Property', 'Object');
  var t5 = $.HashMapImplementation$('Attachable', 'EventHandle');
  return new $.GameBackgroundElement(t1, true, $.propertyTypeCheck(t2, 'is$EventHandle'), $.propertyTypeCheck(t3, 'is$EventHandle'), null, 0, 0, null, $.propertyTypeCheck(null, 'is$Size'), false, $.propertyTypeCheck(null, 'is$ElementParent'), $.propertyTypeCheck(t4, 'is$HashMap'), $.propertyTypeCheck(t5, 'is$HashMap'), false);
};

$._convertNativeToDart_AcceptStructuredClone = function(object) {
  var values = [];
  var copies = [];
  var t1 = new $._convertNativeToDart_AcceptStructuredClone_findSlot(copies, values);
  var t2 = new $._convertNativeToDart_AcceptStructuredClone_readSlot(copies);
  return new $._convertNativeToDart_AcceptStructuredClone_walk(new $._convertNativeToDart_AcceptStructuredClone_writeSlot(copies), t1, t2).call$1(object);
};

$.max = function(a, b) {
  $.numTypeCheck(b, 'is$num');
  if (typeof b === 'number') {
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === 'number') {
      if (typeof a === 'number')
        if (a === 0)
          return a + b;
      if ($.boolConversionCheck($.isNaN(b), 'is$bool'))
        return b;
      return a;
    }
    if ($.boolConversionCheck(b === 0 && $.boolConversionCheck($.isNegative(a), 'is$bool'), 'is$bool'))
      return b;
    return a;
  }
  throw $.$$throw($.IllegalArgumentException$(b));
  throw $.$$throw($.IllegalArgumentException$(a));
};

$.ScoreElement$ = function() {
  var t1 = $.ListImplementation_List(null, 'AffineTransform');
  $.setRuntimeTypeInfo(t1, { 'E': 'AffineTransform' });
  var t2 = $.EventHandle$('EventArgs');
  var t3 = $.EventHandle$('EventArgs');
  var t4 = $.HashMapImplementation$('Property', 'Object');
  var t5 = $.HashMapImplementation$('Attachable', 'EventHandle');
  return new $.ScoreElement(null, null, null, t1, false, $.propertyTypeCheck(t2, 'is$EventHandle'), $.propertyTypeCheck(t3, 'is$EventHandle'), $.callTypeCheck(null, 'is$CanvasElement'), 400, 96, null, $.propertyTypeCheck(null, 'is$Size'), false, $.propertyTypeCheck(null, 'is$ElementParent'), $.propertyTypeCheck(t4, 'is$HashMap'), $.propertyTypeCheck(t5, 'is$HashMap'), false);
};

$._Collections_forEach = function(iterable, f) {
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f, 'is$Function');
  for (var t1 = $.iterator(iterable); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    f.call$1(t1.next$0());
};

$.PCanvas$ = function(w, h, enableCache) {
  var t1 = $.ListImplementation_List(null, 'PElement');
  $.setRuntimeTypeInfo(t1, { 'E': 'PElement' });
  var t2 = $.ListImplementation_List(null, 'AffineTransform');
  $.setRuntimeTypeInfo(t2, { 'E': 'AffineTransform' });
  var t3 = $.EventHandle$('EventArgs');
  var t4 = $.EventHandle$('EventArgs');
  var t5 = $.HashMapImplementation$('Property', 'Object');
  var t6 = $.HashMapImplementation$('Attachable', 'EventHandle');
  return new $.PCanvas(t1, null, t2, enableCache, $.propertyTypeCheck(t3, 'is$EventHandle'), $.propertyTypeCheck(t4, 'is$EventHandle'), null, w, h, $.numTypeCheck(null, 'is$num'), $.propertyTypeCheck(null, 'is$Size'), false, $.propertyTypeCheck(null, 'is$ElementParent'), $.propertyTypeCheck(t5, 'is$HashMap'), $.propertyTypeCheck(t6, 'is$HashMap'), false);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.Property$ = function(name$, defaultValue, T) {
  var t1 = new $.Property(defaultValue, name$, $.propertyTypeCheck($.GlobalId_GlobalId(), 'is$GlobalId'));
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if ($.contains(userAgent, 'Chrome') || $.contains(userAgent, 'DumpRenderTree'))
    return $.typeNameInChrome;
  else if ($.contains(userAgent, 'Firefox'))
    return $.typeNameInFirefox;
  else if ($.contains(userAgent, 'MSIE'))
    return $.typeNameInIE;
  else if ($.contains(userAgent, 'Opera'))
    return $.typeNameInOpera;
  else if ($.contains(userAgent, 'Safari'))
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.CastExceptionImplementation$ = function(actualType, expectedType) {
  return new $.CastExceptionImplementation(actualType, expectedType);
};

$.indexSet$slow = function(a, index, value) {
  if ($.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.IllegalArgumentException$(index));
    if ($.boolConversionCheck(index < 0 || $.ge(index, $.get$length(a)), 'is$bool'))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.charCodeAt = function(receiver, index) {
  if (typeof receiver === 'string') {
    if (index < 0)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    if (index >= receiver.length)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return receiver.charCodeAt(index);
  } else
    return receiver.charCodeAt$1(index);
};

$.removeRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.removeRange$2(start, length$);
  $.checkGrowable(receiver, 'removeRange');
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.IllegalArgumentException$(start));
  if (length$ < 0)
    throw $.$$throw($.IllegalArgumentException$(length$));
  var receiverLength = receiver.length;
  if ($.boolConversionCheck(start < 0 || start >= receiverLength, 'is$bool'))
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.IndexOutOfRangeException$(t1));
  var t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.set$length(receiver, t2);
};

$.ListImplementation_List = function(length$, E) {
  return $.Primitives_newList($.intTypeCheck(length$, 'is$$int'));
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$._BodyElementEventsImpl$ = function(_ptr) {
  return new $._BodyElementEventsImpl(_ptr);
};

$.parseInt = function(string) {
  return $.int_parse($.stringTypeCheck(string, 'is$String'));
};

$.Primitives_parseInt = function(string) {
  $.checkString(string);
  var match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  var base = !($.index(match, 1) == null) ? 16 : 10;
  var result = parseInt(string, base);
  if ($.boolConversionCheck($.isNaN(result), 'is$bool'))
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.TextureInput__parseCoordinate = function(input) {
  var match = $.$$($.CTC15.allMatches$1($.stringTypeCheck(input, 'is$String'))).single$0();
  $.assert($.eq(match.groupCount$0(), 2));
  return $.Coordinate$($.parseDouble($.index(match, 1)), $.parseDouble($.index(match, 2)));
};

$.BoardElement$ = function() {
  var t1 = $.ListImplementation_List(null, 'AffineTransform');
  $.setRuntimeTypeInfo(t1, { 'E': 'AffineTransform' });
  var t2 = $.EventHandle$('EventArgs');
  var t3 = $.EventHandle$('EventArgs');
  var t4 = $.HashMapImplementation$('Property', 'Object');
  var t5 = $.HashMapImplementation$('Attachable', 'EventHandle');
  return new $.BoardElement(null, t1, true, $.propertyTypeCheck(t2, 'is$EventHandle'), $.propertyTypeCheck(t3, 'is$EventHandle'), null, 0, 0, $.numTypeCheck(null, 'is$num'), $.propertyTypeCheck(null, 'is$Size'), false, $.propertyTypeCheck(null, 'is$ElementParent'), $.propertyTypeCheck(t4, 'is$HashMap'), $.propertyTypeCheck(t5, 'is$HashMap'), false);
};

$._Timer$ = function(milliSeconds, callback) {
  $.functionTypeCheck(callback, 'is$Function');
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$.isNaN = function(receiver) {
  if (typeof receiver === 'number')
    return isNaN(receiver);
  else
    return receiver.isNaN$0();
};

$.toInt = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.toInt$0();
  if ($.boolConversionCheck($.isNaN(receiver), 'is$bool'))
    throw $.$$throw($.FormatException$('NaN'));
  if ($.boolConversionCheck($.isInfinite(receiver), 'is$bool'))
    throw $.$$throw($.FormatException$('Infinity'));
  var truncated = $.truncate(receiver);
  return truncated == -0.0 ? 0 : truncated;
};

$.GlobalId$_internal = function(value) {
  $.intTypeCheck(value, 'is$$int');
  return new $.GlobalId(value, $.Util_getHashCode([value]));
};

$.UnsupportedOperationException$ = function(_message) {
  return new $.UnsupportedOperationException(_message);
};

$.removeLast = function(receiver) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'removeLast');
    if ($.get$length(receiver) === 0)
      throw $.$$throw($.IndexOutOfRangeException$(-1));
    return receiver.pop();
  }
  return receiver.removeLast$0();
};

$.Field_Field = function(mineCount, cols, rows, seed) {
  if (typeof mineCount !== 'number')
    return $.Field_Field$bailout(1, mineCount, cols, rows, seed);
  var squares = $.ListImplementation_List(null, 'bool');
  $.setRuntimeTypeInfo(squares, { 'E': 'bool' });
  $.insertRange$3(squares, 0, $.mul(rows, cols), false);
  $.assert(mineCount < squares.length);
  $.assert(mineCount > 0);
  var rnd = $.Random_Random(seed);
  for (var i = 0; $.boolConversionCheck($.lt(i, mineCount), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var index = null;
    do {
      index = $.intTypeCheck(rnd.nextInt$1(squares.length), 'is$$int');
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= squares.length)
        throw $.ioore(index);
    } while ($.boolConversionCheck(squares[index], 'is$bool'));
    squares[index] = true;
  }
  return $.Field$_internal(mineCount, cols, $.ReadOnlyCollection$(squares, 'bool'));
};

$.addLast = function(receiver, value) {
  if (!$.isJsArray(receiver))
    return receiver.addLast$1(value);
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
};

$.Box$ = function(left, top$, width, height) {
  return new $.Box($.numTypeCheck(left, 'is$num'), $.numTypeCheck(top$, 'is$num'), $.numTypeCheck(width, 'is$num'), $.numTypeCheck(height, 'is$num'));
};

$._HttpRequestEventsImpl$ = function(_ptr) {
  return new $._HttpRequestEventsImpl(_ptr);
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$._SelectIterator$ = function(_source, _func, TSource, TOutput) {
  var t1 = new $._SelectIterator($.propertyTypeCheck(_source, 'is$Iterator'), $.functionTypeCheck(_func, 'is$Func1'));
  $.setRuntimeTypeInfo(t1, { 'TSource': TSource, 'TOutput': TOutput });
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.Array2d$wrap = function(width, source, T) {
  if ($.boolConversionCheck(!(width == null) && $.boolConversionCheck($.gt(width, 0), 'is$bool') && true, 'is$bool')) {
    var t1 = source.length;
    if (typeof width !== 'number')
      throw $.iae(width);
    t1 = $.tdiv(t1, width);
  } else
    t1 = 0;
  var t2 = new $.Array2d(width, $.intTypeCheck(t1, 'is$$int'), source);
  $.setRuntimeTypeInfo(t2, { 'T': T });
  t2.Array2d$wrap$2(width, source);
  return t2;
};

$.abs = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.abs$0();
  return Math.abs(receiver);
};

$.Primitives_printString = function(string) {
  $.stringTypeCheck(string, 'is$String');
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof console == "object") {
    console.log(string);
    return;
  }
  if (typeof write == "function") {
    write(string);
    write("\n");
  }
};

$.ClickManager_setClickable = function(element, value) {
  $.propertyTypeCheck(element, 'is$PElement');
  $.assert(!(element == null));
  $.assert(true);
  if (value)
    $.get$ClickManager__isClickableProperty().set$2(element, true);
  else
    $.get$ClickManager__isClickableProperty().clear$1(element);
};

$.Primitives_getMilliseconds = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() : $.Primitives_lazyAsJsDate(receiver).getMilliseconds();
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata($.listTypeCheck(inputTable, 'is$List'));
  $._dynamicMetadata(t1);
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document')
    return 'HTMLDocument';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$._WorkerEventsImpl$ = function(_ptr) {
  return new $._WorkerEventsImpl(_ptr);
};

$.ExceptionImplementation$ = function(msg) {
  return new $.ExceptionImplementation(msg);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$._AudioContextFactoryProvider_AudioContext = function() {
    var constructor = window.AudioContext || window.webkitAudioContext;
    return new constructor();

};

$.AffineTransform$ = function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
  return new $.AffineTransform($.numTypeCheck(scaleX, 'is$num'), $.numTypeCheck(shearY, 'is$num'), $.numTypeCheck(shearX, 'is$num'), $.numTypeCheck(scaleY, 'is$num'), $.numTypeCheck(translateX, 'is$num'), $.numTypeCheck(translateY, 'is$num'));
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.numTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number')
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement num'));
};

$.Primitives_newList = function(length$) {
  if (length$ == null)
    return new Array();
  if ($.boolConversionCheck(!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0, 'is$bool'))
    throw $.$$throw($.IllegalArgumentException$(length$));
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$._globalState = function() {
return $globalState;
};

$._globalState0 = function(val) {
  $.propertyTypeCheck(val, 'is$_Manager');
$globalState = val;
};

$.substring$2 = function(receiver, startIndex, endIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$2(startIndex, endIndex);
  $.checkNum(startIndex);
  var length$ = receiver.length;
  if (endIndex == null)
    endIndex = length$;
  $.checkNum(endIndex);
  if (startIndex < 0)
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.gt(startIndex, endIndex))
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.boolConversionCheck($.gt(endIndex, length$), 'is$bool'))
    throw $.$$throw($.IndexOutOfRangeException$(endIndex));
  return $.substringUnchecked(receiver, startIndex, endIndex);
};

$.require = function(truth, message) {
  if (!$.boolTypeCheck(truth, 'is$bool'))
    throw $.$$throw($.ExceptionImplementation$(message));
};

$.window = function() {
return window;
};

$.HashMapImplementation$ = function(K, V) {
  var t1 = $.intTypeCheck(null, 'is$$int');
  t1 = new $.HashMapImplementation(null, null, t1, t1, t1);
  $.setRuntimeTypeInfo(t1, { 'K': K, 'V': V });
  t1.HashMapImplementation$0();
  return t1;
};

$.Primitives_getMinutes = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCMinutes() : $.Primitives_lazyAsJsDate(receiver).getMinutes();
};

$.TextAniRequest$ = function(_texturePrefix, _frameCount, _offset, delay) {
  $.intTypeCheck(delay, 'is$$int');
  var t1 = $.EventHandle$('EventArgs');
  var t2 = new $.TextAniRequest(_texturePrefix, _frameCount, $.propertyTypeCheck(_offset, 'is$Vector'), delay, $.propertyTypeCheck(t1, 'is$EventHandle'), false, null);
  t2.TextAniRequest$4(_texturePrefix, _frameCount, _offset, delay);
  return t2;
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$._FixedSizeListIterator$ = function(array, T) {
  $.listTypeCheck(array, 'is$List');
  var t1 = new $._FixedSizeListIterator($.intTypeCheck($.get$length(array), 'is$$int'), $.listTypeCheck(array, 'is$List'), 0);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$._FileReaderEventsImpl$ = function(_ptr) {
  return new $._FileReaderEventsImpl(_ptr);
};

$.DetailedIllegalArgumentException$ = function(arg, message) {
  return new $.DetailedIllegalArgumentException(arg, message, '');
};

$.HashMapImplementation__nextProbe = function(currentProbe, numberOfProbes, length$) {
  $.intTypeCheck(length$, 'is$$int');
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.drawTextureKeyAt = function(ctx, textureKey, location$) {
  $.stringTypeCheck(textureKey, 'is$String');
  $.assert(!($._textureImage == null));
  $.assert(!(textureKey == null));
  $.assert(!($._textures == null));
  var texture = $.index($._textures, textureKey);
  $.assert(!(texture == null));
  $.drawTextureAt(ctx, location$, texture, $._textureImage);
};

$.isInfinite = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.isInfinite$0();
  return receiver == Infinity || receiver == -Infinity;
};

$.CompleterImpl$ = function(T) {
  var t1 = new $.CompleterImpl($.propertyTypeCheck($.FutureImpl$(), 'is$FutureImpl'));
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$.HashMapImplementation__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._WindowEventsImpl$ = function(_ptr) {
  return new $._WindowEventsImpl(_ptr);
};

$._EventListenerListImpl$ = function(_ptr, _type) {
  return new $._EventListenerListImpl(_ptr, _type);
};

$.iae = function(argument) {
  throw $.$$throw($.IllegalArgumentException$(argument));
};

$.GameRoot_GameRoot = function(width, height, mineCount, canvasElement, targetMode) {
  $.requireArgumentNotNull(targetMode, 'targetMode');
  var rootElement = $.GameElement$(targetMode);
  var stage = $.Stage$(canvasElement, rootElement);
  return $.GameRoot$_internal(width, height, mineCount, canvasElement, stage, rootElement, $.ClickManager$(stage));
};

$._DOMApplicationCacheEventsImpl$ = function(_ptr) {
  return new $._DOMApplicationCacheEventsImpl(_ptr);
};

$.TextureInput__parseRect = function(input) {
  var matches = $.$$($.CTC15.allMatches$1($.stringTypeCheck(input, 'is$String'))).toList$0();
  $.assert($.eq($.get$length(matches), 2));
  return $.Box_Box$fromCoordSize($.TextureInput__parseCoordinate($.index($.index(matches, 0), 0)), $.TextureInput__parseCoordinate($.index($.index(matches, 1), 0)).toSize$0());
};

$.StringImplementation__toJsStringArray = function(strings) {
  $.listTypeCheck(strings, 'is$List');
  if (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior())
    return $.StringImplementation__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  var length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      var string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
      if (i < 0 || i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException($.stringTypeCheck(_pattern, 'is$String'), _errmsg);
};

$._timerFactory = function(millis, callback, repeating) {
  $.intTypeCheck(millis, 'is$$int');
  $.functionTypeCheck(callback, 'is$Function');
  return $.boolTypeCheck(repeating, 'is$bool') ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$._DOMWindowCrossFrameImpl__top = function(win) {
return win.top;
};

$.listSuperNativeTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()))
    return value;
  if (value[property]())
    return value;
  $.propertyTypeError(value, property);
};

$._RangeIterator$ = function(_start, _count) {
  return new $._RangeIterator($.intTypeCheck(_start, 'is$$int'), $.intTypeCheck(_count, 'is$$int'), 0);
};

$.query = function(selector) {
  return $._document().query$1(selector);
};

$.constructorNameFallback = function(obj) {
  var constructor$ = obj.constructor;
  if (typeof(constructor$) === 'function') {
    var name$ = constructor$.name;
    if (typeof name$ === 'string')
      var t1 = $.boolConversionCheck(!(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype'), 'is$bool');
    else
      t1 = false;
    if ($.boolConversionCheck(t1, 'is$bool'))
      return name$;
  }
  var string = Object.prototype.toString.call(obj);
  return string.substring(8, string.length - 1);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.GameElement$ = function(_targetMode) {
  var t1 = $.PCanvas$(0, 0, false);
  var t2 = $.GameBackgroundElement$();
  var t3 = $.BoardElement$();
  var t4 = $.ScoreElement$();
  var t5 = $.NewGameElement$();
  var t6 = $.TextureAnimationElement$(0, 0);
  var t7 = $.TextureAnimationElement$(0, 0);
  var t8 = $.EventHandle$();
  var t9 = $.ListImplementation_List(null, 'AffineTransform');
  $.setRuntimeTypeInfo(t9, { 'E': 'AffineTransform' });
  var t10 = $.EventHandle$('EventArgs');
  var t11 = $.EventHandle$('EventArgs');
  var t12 = $.HashMapImplementation$('Property', 'Object');
  var t13 = $.HashMapImplementation$('Attachable', 'EventHandle');
  t9 = new $.GameElement(t1, t2, t3, t4, t5, t6, t7, _targetMode, $.propertyTypeCheck(t8, 'is$EventHandle'), null, null, null, null, $.doubleTypeCheck(null, 'is$$double'), $.propertyTypeCheck(null, 'is$Vector'), $.propertyTypeCheck(null, 'is$Game'), t9, false, $.propertyTypeCheck(t10, 'is$EventHandle'), $.propertyTypeCheck(t11, 'is$EventHandle'), $.callTypeCheck(null, 'is$CanvasElement'), 100, 100, null, $.propertyTypeCheck(null, 'is$Size'), false, $.propertyTypeCheck(null, 'is$ElementParent'), $.propertyTypeCheck(t12, 'is$HashMap'), $.propertyTypeCheck(t13, 'is$HashMap'), false);
  t9.GameElement$1(_targetMode);
  return t9;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$('Cyclic initialization for static ' + $.S($.stringTypeCheck(staticName, 'is$String'))));
};

$.Vector$ = function(x, y) {
  return new $.Vector($.numTypeCheck(x, 'is$num'), $.numTypeCheck(y, 'is$num'));
};

$.unwrapException = function(ex) {
  if ("dartException" in ex)
    return ex.dartException;
  var message = ex.message;
  if (ex instanceof TypeError) {
    var type = ex.type;
    var name$ = ex.arguments ? ex.arguments[0] : "";
    if (!$.boolConversionCheck($.eq(type, 'property_not_function'), 'is$bool')) {
      if (!$.boolConversionCheck($.eq(type, 'called_non_callable'), 'is$bool'))
        var t1 = $.boolConversionCheck($.boolConversionCheck($.eq(type, 'non_object_property_call'), 'is$bool') || $.boolConversionCheck($.eq(type, 'non_object_property_load'), 'is$bool'), 'is$bool');
      else
        t1 = true;
      $.boolConversionCheck(t1, 'is$bool');
    } else
      t1 = true;
    if ($.boolConversionCheck(t1, 'is$bool'))
      if ($.boolConversionCheck(typeof name$ === 'string' && $.boolConversionCheck($.startsWith(name$, 'call$'), 'is$bool'), 'is$bool'))
        return $.ObjectNotClosureException$();
      else
        return $.NullPointerException$(null, $.CTC2);
    else if ($.boolConversionCheck($.eq(type, 'undefined_method'), 'is$bool'))
      if ($.boolConversionCheck(typeof name$ === 'string' && $.boolConversionCheck($.startsWith(name$, 'call$'), 'is$bool'), 'is$bool'))
        return $.ObjectNotClosureException$();
      else
        return $.NoSuchMethodError$('', name$, [], null);
    var ieErrorCode = ex.number & 0xffff;
    var ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string') {
      if (!$.boolConversionCheck($.endsWith(message, 'is null'), 'is$bool'))
        t1 = $.boolConversionCheck($.boolConversionCheck($.endsWith(message, 'is undefined'), 'is$bool') || $.boolConversionCheck($.endsWith(message, 'is null or undefined'), 'is$bool'), 'is$bool');
      else
        t1 = true;
      if ($.boolConversionCheck(t1, 'is$bool'))
        return $.NullPointerException$(null, $.CTC2);
      else {
        if (!$.boolConversionCheck($.contains$1(message, ' is not a function'), 'is$bool'))
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if ($.boolConversionCheck(t1, 'is$bool'))
          return $.NoSuchMethodError$('', '<unknown>', [], null);
      }
    }
    return $.ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if ($.boolConversionCheck(typeof message === 'string' && $.boolConversionCheck($.contains$1(message, 'call stack'), 'is$bool'), 'is$bool'))
      return $.StackOverflowException$();
    return $.IllegalArgumentException$('');
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if ($.boolConversionCheck(typeof message === 'string' && message === 'too much recursion', 'is$bool'))
      return $.StackOverflowException$();
  return ex;
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.IllegalArgumentException$(b));
    }
  return false;
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.intTypeCheck($.add(t1, 1), 'is$$int');
  var t2 = new $._ReceivePortImpl($.intTypeCheck(t1, 'is$$int'), null);
  t2._ReceivePortImpl$0();
  return t2;
};

$._NodeListWrapper$ = function(list) {
  return new $._NodeListWrapper($.listTypeCheck($.listTypeCheck(list, 'is$List'), 'is$List'));
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  $.intTypeCheck(isolateId, 'is$$int');
  return new $._WorkerSendPort($.intTypeCheck(_workerId, 'is$$int'), $.intTypeCheck(_receivePortId, 'is$$int'), isolateId);
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.IllegalArgumentException$(value));
  }
  return value;
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  $.listTypeCheck(a, 'is$List');
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $.Arrays_indexOf$bailout(1, element, startIndex, endIndex, a);
  $.intTypeCheck(endIndex, 'is$$int');
  if (endIndex !== (endIndex | 0))
    return $.Arrays_indexOf$bailout(2, element, startIndex, a, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; $.boolConversionCheck($.lt(i, endIndex), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.eq(a[i], element), 'is$bool'))
      return i;
  }
  return -1;
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  if (startIndex !== (startIndex | 0))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  $.listTypeCheck(a, 'is$List');
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $._Lists_indexOf$bailout(2, element, startIndex, endIndex, a);
  $.intTypeCheck(endIndex, 'is$$int');
  if (endIndex !== (endIndex | 0))
    return $._Lists_indexOf$bailout(3, element, startIndex, a, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; $.boolConversionCheck($.lt(i, endIndex), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.eq(a[i], element), 'is$bool'))
      return i;
  }
  return -1;
};

$._WhereIterator$ = function(_source, _func, T) {
  var t1 = new $._WhereIterator($.propertyTypeCheck(_source, 'is$Iterator'), $.functionTypeCheck(_func, 'is$Func1'), null, null);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$._HttpRequestFactoryProvider_HttpRequest = function() {
return new XMLHttpRequest();
};

$.toString = function(value) {
  if (typeof value == "object" && value !== null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$._ElementFactoryProvider_Element$tag = function(tag) {
return document.createElement(tag)
};

$.requireArgumentNotNull = function(argument, argName) {
  if (argument == null)
    throw $.$$throw($.NullArgumentException$(argName));
};

$.Stage$ = function(_canvas, _element) {
  var t1 = $.EventHandle$('EventArgs');
  var t2 = $.HashMapImplementation$('Property', 'Object');
  var t3 = $.HashMapImplementation$('Attachable', 'EventHandle');
  var t4 = new $.Stage($.propertyTypeCheck(t1, 'is$EventHandle'), _canvas, $.propertyTypeCheck(_element, 'is$PElement'), null, $.propertyTypeCheck(t2, 'is$HashMap'), $.propertyTypeCheck(t3, 'is$HashMap'), false);
  t4.Stage$2(_canvas, _element);
  return t4;
};

$.intTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number' && Math.floor(value) === value)
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement int'));
};

$._FuncEnumerable$ = function(_source, _func, TSource, TOutput) {
  var t1 = new $._FuncEnumerable($.listSuperNativeTypeCheck(_source, 'is$Iterable'), $.functionTypeCheck(_func, 'is$Func1'));
  $.setRuntimeTypeInfo(t1, { 'TSource': TSource, 'TOutput': TOutput });
  return t1;
};

$.propertyTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (!!value[property])
    return value;
  $.propertyTypeError(value, property);
};

$._TextTrackCueEventsImpl$ = function(_ptr) {
  return new $._TextTrackCueEventsImpl(_ptr);
};

$.contains = function(userAgent, name$) {
  return !(userAgent.indexOf(name$) === -1);
};

$.Random_Random = function(seed) {
  return $.CTC32;
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result === null)
    return;
  return result;
};

$.endsWith = function(receiver, other) {
  $.checkString(other);
  var receiverLength = receiver.length;
  var otherLength = other.length;
  if ($.boolConversionCheck(otherLength > receiverLength, 'is$bool'))
    return false;
  return other === $.substring$1(receiver, receiverLength - otherLength);
};

$.assert = function(condition) {
  if (typeof condition === 'function' || typeof condition === 'object' && condition !== null && !!condition.is$Function)
    condition = condition.call$0();
  if (!(typeof condition === 'boolean'))
    throw $.$$throw($.TypeErrorImplementation$($.S(condition) + ' does not implement bool'));
  if (!condition)
    throw $.$$throw($.AssertionError$());
};

$.Box_Box$fromCoordSize = function(topLeft, size) {
  $.propertyTypeCheck(size, 'is$Size');
  return $.Box$(topLeft.x, topLeft.y, size.get$width(), size.get$height());
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  $.stringTypeCheck(haystack, 'is$String');
  var result = $.ListImplementation_List(null, 'Match');
  $.setRuntimeTypeInfo(result, { 'E': 'Match' });
  var length$ = $.intTypeCheck($.get$length(haystack), 'is$$int');
  var patternLength = needle.length;
  for (var startIndex = 0; true;) {
    var position = $.intTypeCheck($.indexOf$2(haystack, needle, startIndex), 'is$$int');
    if (position === -1)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    var endIndex = $.intTypeCheck($.add(position, patternLength), 'is$$int');
    if (endIndex == null ? length$ == null : endIndex === length$)
      break;
    else
      startIndex = (position == null ? endIndex == null : position === endIndex) ? $.intTypeCheck($.add(startIndex, 1), 'is$$int') : endIndex;
  }
  return result;
};

$._SpeechRecognitionEventsImpl$ = function(_ptr) {
  return new $._SpeechRecognitionEventsImpl(_ptr);
};

$.Primitives_getSeconds = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCSeconds() : $.Primitives_lazyAsJsDate(receiver).getSeconds();
};

$._RangeIterable$ = function(_start, _count) {
  return new $._RangeIterable(_start, _count);
};

$.Util_getHashCode = function(source) {
  for (var t1 = $.iterator(source), hash = 0; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    t2 = $.add(hash, $.intTypeCheck(t2 == null ? 0 : $.hashCode(t2), 'is$$int'));
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    hash = 536870911 & t2;
    var hash0 = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    hash0 = $.intTypeCheck((hash0 ^ $.shr(hash0, 6)) >>> 0, 'is$$int');
    hash = hash0;
  }
  if (typeof hash !== 'number')
    throw $.iae(hash);
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = $.intTypeCheck((hash0 ^ $.shr(hash0, 11)) >>> 0, 'is$$int');
  if (typeof hash0 !== 'number')
    throw $.iae(hash0);
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
};

$.IllegalArgumentException$ = function(arg) {
  return new $.IllegalArgumentException(arg);
};

$.functionTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'function' || typeof value === 'object' && value !== null && !!value.is$Function)
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement Function'));
};

$._HttpRequestUploadEventsImpl$ = function(_ptr) {
  return new $._HttpRequestUploadEventsImpl(_ptr);
};

$.Mouse_markMouseOver = function(stage, coordinate) {
  $.propertyTypeCheck(stage, 'is$Stage');
  $.requireArgumentNotNull(stage, 'stage');
  var t1 = !(coordinate == null);
  $.requireArgument(coordinate == null || $.boolConversionCheck(coordinate.get$isValid(), 'is$bool'), 'coordinate', null);
  var items = $.get$Mouse__stageMouseCacheProperty().get$1(stage);
  if (!(items == null)) {
    $.forEach(items, new $.Mouse_markMouseOver_anon());
    $.get$Mouse__stageMouseCacheProperty().clear$1(stage);
  }
  if (t1) {
    var hits = $.RetainedUtil_hitTest(stage, coordinate);
    $.get$Mouse__stageMouseCacheProperty().set$2(stage, hits);
    $.forEach(hits, new $.Mouse_markMouseOver_anon0());
    if ($.boolConversionCheck($.gt($.get$length(hits), 0), 'is$bool'))
      $.get$Mouse_isMouseDirectlyOverProperty().set$2($.index(hits, 0), true);
    return hits;
  }
  return;
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC2));
  return object;
};

$.Collections__containsRef = function(c, ref) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(c, 'is$Collection')); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.stringTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'string')
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement String'));
};

$._MediaElementEventsImpl$ = function(_ptr) {
  return new $._MediaElementEventsImpl(_ptr);
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.callTypeCheck(m, 'is$Map');
  $.propertyTypeCheck(result, 'is$StringBuffer');
  $.listTypeCheck(visiting, 'is$List');
  $.add$1(visiting, m);
  $.add$1(result, '{');
  t1.first_1 = true;
  $.forEach(m, new $.Maps__emitMap_anon(result, t1, visiting));
  $.add$1(result, '}');
  $.removeLast(visiting);
};

$._MessageTraverser_isPrimitive = function(x) {
  if (!(x == null))
    var t1 = $.boolConversionCheck(typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean', 'is$bool');
  else
    t1 = true;
  return t1;
};

$._Deserializer_isPrimitive = function(x) {
  if (!(x == null))
    var t1 = $.boolConversionCheck(typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean', 'is$bool');
  else
    t1 = true;
  return t1;
};

$.propertySet = function(object, property, value) {
  object[$.stringTypeCheck(property, 'is$String')] = value;
};

$.CanvasUtil_transform = function(ctx, tx) {
  $.propertyTypeCheck(tx, 'is$AffineTransform');
  $.requireArgumentNotNull(ctx, 'ctx');
  $.requireArgumentNotNull(tx, 'tx');
  ctx.transform$6(tx.get$scaleX(), tx.get$shearY(), tx.get$shearX(), tx.get$scaleY(), tx.get$translateX(), tx.get$translateY());
};

$._BatteryManagerEventsImpl$ = function(_ptr) {
  return new $._BatteryManagerEventsImpl(_ptr);
};

$.AffineTransform_AffineTransform$fromRotate = function(theta, x, y) {
  return $.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(theta, x, y);
};

$._IDBOpenDBRequestEventsImpl$ = function(_ptr) {
  return new $._IDBOpenDBRequestEventsImpl(_ptr);
};

$.sqrt = function(value) {
  return Math.sqrt($.checkNum($.numTypeCheck(value, 'is$num')));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedOperationException$(reason));
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$.JSSyntaxRegExp$ = function(pattern, multiLine, ignoreCase) {
  $.stringTypeCheck(pattern, 'is$String');
  $.boolTypeCheck(multiLine, 'is$bool');
  return new $.JSSyntaxRegExp($.boolTypeCheck(ignoreCase, 'is$bool'), multiLine, pattern);
};

$._serializeMessage = function(message) {
  if ($.boolConversionCheck($._globalState().get$needSerialization(), 'is$bool'))
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$.IndexOutOfRangeException$ = function(_value) {
  return new $.IndexOutOfRangeException(_value);
};

$.KeyValuePair$ = function(key, value, K, V) {
  var t1 = new $.KeyValuePair(key, value);
  $.setRuntimeTypeInfo(t1, { 'K': K, 'V': V });
  return t1;
};

$._DocumentEventsImpl$ = function(_ptr) {
  return new $._DocumentEventsImpl(_ptr);
};

$._IDBVersionChangeRequestEventsImpl$ = function(_ptr) {
  return new $._IDBVersionChangeRequestEventsImpl(_ptr);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.sin = function(value) {
  return Math.sin($.checkNum(value));
};

$.NullArgumentException$ = function(arg) {
  return new $.NullArgumentException(arg, arg);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.propertyTypeCastError = function(value, property) {
  throw $.$$throw($.CastExceptionImplementation$($.Primitives_objectTypeName(value), $.stringTypeCheck($.substring$2(property, 3, $.get$length(property)), 'is$String')));
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$.LinkedHashMapImplementation$ = function(K, V) {
  var t1 = new $.LinkedHashMapImplementation(null, null);
  $.setRuntimeTypeInfo(t1, { 'K': K, 'V': V });
  t1.LinkedHashMapImplementation$0();
  return t1;
};

$.FutureImpl$ = function(T) {
  var t1 = new $.FutureImpl(false, null, null, null, false, [], [], []);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$._DOMWindowCrossFrameImpl__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrameImpl$(w);
};

$.ElementMouseEventArgs_ElementMouseEventArgs = function(element, mouseEvent) {
  $.assert(!(element == null));
  $.assert(!(mouseEvent == null));
  return $.ElementMouseEventArgs$_internal(element, mouseEvent.get$shiftKey());
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, $.stringTypeCheck(property, 'is$String'),
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.CanvasUtil_drawImage = function(ctx, img, sourceBox, targetBox) {
  $.propertyTypeCheck(sourceBox, 'is$Box');
  if (targetBox == null)
    targetBox = $.Box$(0, 0, sourceBox.get$width(), sourceBox.get$height());
  ctx.drawImage$9(img, sourceBox.get$left(), sourceBox.get$top(), sourceBox.get$width(), sourceBox.get$height(), targetBox.get$left(), targetBox.get$top(), targetBox.get$width(), targetBox.get$height());
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$._FileWriterEventsImpl$ = function(_ptr) {
  return new $._FileWriterEventsImpl(_ptr);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.cos = function(value) {
  return Math.cos($.checkNum(value));
};

$._Manager$ = function() {
  var t1 = $.boolTypeCheck(null, 'is$bool');
  t1 = new $._Manager(0, 0, 1, null, null, null, t1, t1, t1, $.callTypeCheck(null, 'is$Map'), $.callTypeCheck(null, 'is$_ManagerStub'), $.callTypeCheck(null, 'is$Map'));
  t1._Manager$0();
  return t1;
};

$.ClickManager_addHandler = function(element, handler) {
  $.propertyTypeCheck(element, 'is$PElement');
  $.functionTypeCheck(handler, 'is$Action1');
  return $.get$ClickManager__clickEvent().addHandler$2(element, handler);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.Arrays_indexOf$bailout = function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var element = env0;
      var startIndex = env1;
      var endIndex = env2;
      var a = env3;
      break;
    case 2:
      element = env0;
      startIndex = env1;
      a = env2;
      endIndex = env3;
      break;
  }
  switch (state) {
    case 0:
      $.listTypeCheck(a, 'is$List');
    case 1:
      state = 0;
      $.intTypeCheck(endIndex, 'is$$int');
    case 2:
      state = 0;
      if ($.ge(startIndex, $.get$length(a)))
        return -1;
      if (startIndex < 0)
        startIndex = 0;
      for (var i = startIndex; $.boolConversionCheck($.lt(i, endIndex), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
        if ($.boolConversionCheck($.eq($.index(a, i), element), 'is$bool'))
          return i;
      return -1;
  }
};

$._Lists_indexOf$bailout = function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var a = env0;
      var element = env1;
      var startIndex = env2;
      var endIndex = env3;
      break;
    case 2:
      element = env0;
      startIndex = env1;
      endIndex = env2;
      a = env3;
      break;
    case 3:
      element = env0;
      startIndex = env1;
      a = env2;
      endIndex = env3;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      $.listTypeCheck(a, 'is$List');
    case 2:
      state = 0;
      $.intTypeCheck(endIndex, 'is$$int');
    case 3:
      state = 0;
      if ($.boolConversionCheck($.ge(startIndex, $.get$length(a)), 'is$bool'))
        return -1;
      if ($.boolConversionCheck($.lt(startIndex, 0), 'is$bool'))
        startIndex = 0;
      for (var i = startIndex; $.boolConversionCheck($.lt(i, endIndex), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
        if ($.boolConversionCheck($.eq($.index(a, i), element), 'is$bool'))
          return i;
      return -1;
  }
};

$._Lists_getRange$bailout = function(state, start, length$, accumulator, a) {
  if (length$ < 0)
    throw $.$$throw($.IllegalArgumentException$('length'));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = start + length$;
  if ($.boolConversionCheck($.gt(end, $.get$length(a)), 'is$bool'))
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; $.boolConversionCheck($.lt(i, end), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    accumulator.push($.index(a, i));
  return accumulator;
};

$.RetainedUtil__hitTest$bailout = function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      hits = env0;
      length$ = env1;
      var element = env2;
      point = env3;
      break;
  }
  switch (state) {
    case 0:
      $.propertyTypeCheck(element, 'is$PElement');
      var point = $.propertyTypeCheck($.RetainedUtil_transformPointGlobalToLocal(element, point), 'is$Coordinate');
      var bounds = $.Box$(0, 0, element.get$width(), element.get$height());
      var hits = $.ListImplementation_List(null, 'PElement');
      $.setRuntimeTypeInfo(hits, { 'E': 'PElement' });
    case 1:
      if (state === 1 || state === 0 && $.boolConversionCheck(bounds.contains$1(point), 'is$bool'))
        switch (state) {
          case 0:
            var length$ = element.get$visualChildCount();
          case 1:
            state = 0;
            for (var i = 0; $.lt(i, length$); ++i) {
              hits = $.RetainedUtil__hitTest(element.getVisualChild$1($.sub($.sub(length$, 1), i)), point);
              if (hits.length > 0)
                break;
            }
            hits.push(element);
            return hits;
        }
      else
        return [];
  }
};

$.Futures_wait$bailout = function(state, t1, futures) {
  if ($.boolConversionCheck($.isEmpty(futures), 'is$bool'))
    return $.FutureImpl_FutureImpl$immediate($.CTC2, 'List');
  var completer = $.propertyTypeCheck($.CompleterImpl$('List'), 'is$Completer');
  var result = $.propertyTypeCheck(completer.get$future(), 'is$Future');
  t1.remaining_1 = $.intTypeCheck($.get$length(futures), 'is$$int');
  var values = $.ListImplementation_List($.get$length(futures));
  for (var i = 0; $.boolConversionCheck($.lt(i, $.get$length(futures)), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var future = $.propertyTypeCheck($.index(futures, i), 'is$Future');
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.Arrays_copy$bailout = function(state, env0, env1, env2, env3, env4, env5) {
  switch (state) {
    case 1:
      var srcStart = env0;
      var count = env1;
      var src = env2;
      i = env3;
      var dst = env4;
      var dstStart = env5;
      break;
    case 2:
      dst = env0;
      srcStart = env1;
      j = env2;
      src = env3;
      i = env4;
      break;
  }
  switch (state) {
    case 0:
      $.listTypeCheck(src, 'is$List');
      $.listTypeCheck(dst, 'is$List');
      $.intTypeCheck(count, 'is$$int');
    default:
      if (state === 2 || state === 1 || state === 0 && srcStart < dstStart)
        switch (state) {
          case 0:
            if (typeof count !== 'number')
              throw $.iae(count);
            var i = $.intTypeCheck(srcStart + count - 1, 'is$$int');
          case 1:
            state = 0;
            var j = $.intTypeCheck(dstStart + count - 1, 'is$$int');
          case 2:
            state = 0;
            for (; $.boolConversionCheck($.ge(i, srcStart), 'is$bool'); i = $.intTypeCheck($.sub(i, 1), 'is$$int'), j = $.intTypeCheck($.sub(j, 1), 'is$$int'))
              $.indexSet(dst, j, $.index(src, i));
        }
      else {
        i = srcStart;
        j = dstStart;
        while (true) {
          if (typeof count !== 'number')
            throw $.iae(count);
          if (!$.boolConversionCheck($.lt(i, srcStart + count), 'is$bool'))
            break;
          $.indexSet(dst, j, $.index(src, i));
          i = $.intTypeCheck($.add(i, 1), 'is$$int');
          j = $.intTypeCheck($.add(j, 1), 'is$$int');
        }
      }
  }
};

$.Field_Field$bailout = function(state, mineCount, cols, rows, seed) {
  var squares = $.ListImplementation_List(null, 'bool');
  $.setRuntimeTypeInfo(squares, { 'E': 'bool' });
  $.insertRange$3(squares, 0, $.mul(rows, cols), false);
  $.assert($.lt(mineCount, squares.length));
  $.assert($.gt(mineCount, 0));
  var rnd = $.Random_Random(seed);
  for (var i = 0; $.boolConversionCheck($.lt(i, mineCount), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var index = null;
    do {
      index = $.intTypeCheck(rnd.nextInt$1(squares.length), 'is$$int');
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= squares.length)
        throw $.ioore(index);
    } while ($.boolConversionCheck(squares[index], 'is$bool'));
    squares[index] = true;
  }
  return $.Field$_internal(mineCount, cols, $.ReadOnlyCollection$(squares, 'bool'));
};

$.StringImplementation__toJsStringArray$bailout = function(state, strings) {
  $.checkNull(strings);
  var length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      var string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$._getAudioPath.call$1 = $._getAudioPath;
$._getAudioPath.$name = "_getAudioPath";
$._onTouchMove.call$1 = $._onTouchMove;
$._onTouchMove.$name = "_onTouchMove";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$._onLoaded.call$1 = $._onLoaded;
$._onLoaded.$name = "_onLoaded";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC2 = Isolate.makeConstantList([]);
$.CTC24 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CTC2);
$.CTC49 = 'structured clone of ArrayBufferView';
$.CTC12 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBufferView');
$.CTC0 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC50 = 'hidden';
$.CTC33 = new Isolate.$isolateProperties.SquareState('hidden');
$.CTC51 = 'Pop0';
$.CTC52 = 'Pop1';
$.CTC53 = 'Pop2';
$.CTC54 = 'Pop3';
$.CTC55 = 'Pop4';
$.CTC56 = 'Pop5';
$.CTC57 = 'Pop6';
$.CTC58 = 'Pop7';
$.CTC59 = 'Pop8';
$.CTC = Isolate.makeConstantList(['Pop0', 'Pop1', 'Pop2', 'Pop3', 'Pop4', 'Pop5', 'Pop6', 'Pop7', 'Pop8']);
$.CTC60 = 'Cannot add to immutable List.';
$.CTC3 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot add to immutable List.');
$.CTC23 = new Isolate.$isolateProperties.EventArgs();
$.CTC61 = 2048;
$.CTC62 = 1536;
$.CTC27 = new Isolate.$isolateProperties.Size(2048, 1536);
$.CTC63 = 0;
$.CTC40 = new Isolate.$isolateProperties.Coordinate(0, 0);
$.CTC64 = 'offsetX is only supported on elements';
$.CTC22 = new Isolate.$isolateProperties.UnsupportedOperationException('offsetX is only supported on elements');
$.CTC65 = 100;
$.CTC30 = new Isolate.$isolateProperties.Size(100, 100);
$.CTC66 = 32;
$.CTC26 = new Isolate.$isolateProperties.Coordinate(32, 32);
$.CTC67 = 'The input sequence is empty.';
$.CTC16 = new Isolate.$isolateProperties.InvalidOperationException('The input sequence is empty.');
$.CTC68 = 352;
$.CTC69 = 96;
$.CTC28 = new Isolate.$isolateProperties.Vector(352, 96);
$.CTC70 = -88;
$.CTC41 = new Isolate.$isolateProperties.Vector(-88, -88);
$.CTC71 = -472;
$.CTC72 = -348;
$.CTC44 = new Isolate.$isolateProperties.Vector(-472, -348);
$.CTC20 = new Isolate.$isolateProperties._UndefinedValue();
$.CTC25 = new Isolate.$isolateProperties.IllegalAccessException();
$.CTC73 = 'structured clone of File';
$.CTC8 = new Isolate.$isolateProperties.NotImplementedException('structured clone of File');
$.CTC74 = 'game_board_center';
$.CTC75 = 'number_one';
$.CTC76 = 'number_two';
$.CTC77 = 'number_three';
$.CTC78 = 'number_four';
$.CTC79 = 'number_five';
$.CTC80 = 'number_six';
$.CTC81 = 'number_seven';
$.CTC82 = 'number_eight';
$.CTC45 = Isolate.makeConstantList(['game_board_center', 'number_one', 'number_two', 'number_three', 'number_four', 'number_five', 'number_six', 'number_seven', 'number_eight']);
$.CTC83 = null;
$.CTC1 = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC2);
$.CTC14 = new Isolate.$isolateProperties.EmptyQueueException();
$.CTC84 = 'won';
$.CTC34 = new Isolate.$isolateProperties.GameState('won');
$.CTC85 = 'lost';
$.CTC35 = new Isolate.$isolateProperties.GameState('lost');
$.CTC86 = 'Cannot removeLast on immutable List.';
$.CTC5 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot removeLast on immutable List.');
$.CTC87 = 'reset';
$.CTC29 = new Isolate.$isolateProperties.GameState('reset');
$.CTC4 = new Isolate.$isolateProperties.NoMoreElementsException();
$.CTC88 = 'balloon_pieces_a.png';
$.CTC89 = 'balloon_pieces_b.png';
$.CTC90 = 'balloon_pieces_c.png';
$.CTC91 = 'balloon_pieces_d.png';
$.CTC46 = Isolate.makeConstantList(['balloon_pieces_a.png', 'balloon_pieces_b.png', 'balloon_pieces_c.png', 'balloon_pieces_d.png']);
$.CTC92 = 'The input sequence contains more than one element.';
$.CTC17 = new Isolate.$isolateProperties.InvalidOperationException('The input sequence contains more than one element.');
$.CTC93 = false;
$.CTC94 = '^#[_a-zA-Z]\\w*$';
$.CTC47 = new Isolate.$isolateProperties.JSSyntaxRegExp(false, false, '^#[_a-zA-Z]\\w*$');
$.CTC95 = 'structured clone of ArrayBuffer';
$.CTC11 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBuffer');
$.CTC96 = 'must be implemented by subclass';
$.CTC18 = new Isolate.$isolateProperties.NotImplementedException('must be implemented by subclass');
$.CTC97 = 'structured clone of Date';
$.CTC6 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Date');
$.CTC98 = '{([^,{]+),([^}]+)}';
$.CTC15 = new Isolate.$isolateProperties.JSSyntaxRegExp(false, false, '{([^,{]+),([^}]+)}');
$.CTC48 = new Isolate.$isolateProperties.Object();
$.CTC99 = 'Incorrect number or type of arguments';
$.CTC21 = new Isolate.$isolateProperties.ExceptionImplementation('Incorrect number or type of arguments');
$.CTC100 = 'Cannot insertRange on immutable List.';
$.CTC31 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot insertRange on immutable List.');
$.CTC101 = 'Cannot removeRange on immutable List.';
$.CTC39 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot removeRange on immutable List.');
$.CTC102 = 'structured clone of Blob';
$.CTC9 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Blob');
$.CTC103 = 'started';
$.CTC38 = new Isolate.$isolateProperties.GameState('started');
$.CTC104 = 'safe';
$.CTC43 = new Isolate.$isolateProperties.SquareState('safe');
$.CTC105 = 'structured clone of RegExp';
$.CTC7 = new Isolate.$isolateProperties.NotImplementedException('structured clone of RegExp');
$.CTC106 = 'structured clone of FileList';
$.CTC10 = new Isolate.$isolateProperties.NotImplementedException('structured clone of FileList');
$.CTC32 = new Isolate.$isolateProperties._Random();
$.CTC107 = 'mine';
$.CTC42 = new Isolate.$isolateProperties.SquareState('mine');
$.CTC108 = 'revealed';
$.CTC36 = new Isolate.$isolateProperties.SquareState('revealed');
$.CTC109 = 'structured clone of other type';
$.CTC13 = new Isolate.$isolateProperties.NotImplementedException('structured clone of other type');
$.CTC110 = 'flagged';
$.CTC37 = new Isolate.$isolateProperties.SquareState('flagged');
$.CTC111 = 'Mutation operations are not supported';
$.CTC19 = new Isolate.$isolateProperties.UnsupportedOperationException('Mutation operations are not supported');
$.TextureInput__pairExp = Isolate.$isolateProperties.CTC15;
$.Property_Undefined = Isolate.$isolateProperties.CTC20;
$.Duration_HOURS_PER_DAY = 24;
$.HashMapImplementation__DELETED_KEY = Isolate.$isolateProperties.CTC0;
$.DateImplementation__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$.ResourceLoader_StateUnloaded = 'unloaded';
$.SquareElement__balloonBits = Isolate.$isolateProperties.CTC46;
$.GameElement__edgeOffset = 32;
$._textureImage = null;
$.SquareState_flagged = Isolate.$isolateProperties.CTC37;
$.Duration_MINUTES_PER_HOUR = 60;
$._textures = null;
$.GlobalId__globalId = 0;
$._imageLoader = null;
$.GameElement__boardOffset = Isolate.$isolateProperties.CTC28;
$.SquareElement__size = 80;
$.ResourceLoader_StateLoaded = 'loaded';
$._ReceivePortImpl__nextFreeId = 1;
$._audioLoader = null;
$.SquareState_safe = Isolate.$isolateProperties.CTC43;
$.GameState_started = Isolate.$isolateProperties.CTC38;
$._getTypeNameOf = null;
$.GameElement__dartAnimationOffset = Isolate.$isolateProperties.CTC44;
$.GameElement__popExplodeAnimationOffset = Isolate.$isolateProperties.CTC41;
$.GameElement__popAnimationHitFrame = 12;
$.Duration_MILLISECONDS_PER_DAY = 86400000;
$.SquareState_mine = Isolate.$isolateProperties.CTC42;
$.ScoreElement__minesLeftStr = 'MINES LEFT:';
$._dartlibHelperRandom = null;
$.PI = 3.141592653589793;
$._audioContext = null;
$.LN2 = 0.6931471805599453;
$.GameState_won = Isolate.$isolateProperties.CTC34;
$.SquareState_hidden = Isolate.$isolateProperties.CTC33;
$._audioNames = Isolate.$isolateProperties.CTC;
$.HashMapImplementation__INITIAL_CAPACITY = 8;
$.Duration_SECONDS_PER_MINUTE = 60;
$.GameElement__backgroundSize = Isolate.$isolateProperties.CTC27;
$._buffers = null;
$._TimerFactory__factory = null;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.Duration_MILLISECONDS_PER_MINUTE = 60000;
$.GameState_lost = Isolate.$isolateProperties.CTC35;
$.SquareState_revealed = Isolate.$isolateProperties.CTC36;
$.GameState_reset = Isolate.$isolateProperties.CTC29;
$._textuerName = 'art.png';
$.SquareElement__numberMap = Isolate.$isolateProperties.CTC45;
$.GameElement__backgroundHoleSize = 1344;
$.ScoreElement__valueOffset = 15;
$.Duration_MILLISECONDS_PER_SECOND = 1000;
$.Duration_MILLISECONDS_PER_HOUR = 3600000;
$.ResourceLoader_StateLoading = 'loading';
Isolate.$lazy($, 'isMouseDirectlyOverProperty', 'Mouse_isMouseDirectlyOverProperty', 'get$Mouse_isMouseDirectlyOverProperty', function() {
  return $.propertyTypeCheck($.Property$('IsMouseDirectlyOver', false, 'bool'), 'is$Property');
});
Isolate.$lazy($, 'isMouseOverProperty', 'Mouse_isMouseOverProperty', 'get$Mouse_isMouseOverProperty', function() {
  return $.propertyTypeCheck($.Property$('IsMouseOver', false, 'bool'), 'is$Property');
});
Isolate.$lazy($, '_containerTransformProperty', 'Panel__containerTransformProperty', 'get$Panel__containerTransformProperty', function() {
  return $.propertyTypeCheck($.Property$('panelTransform', null, 'AffineTransform'), 'is$Property');
});
Isolate.$lazy($, '_mouseMoveEvent', 'ClickManager__mouseMoveEvent', 'get$ClickManager__mouseMoveEvent', function() {
  return $.propertyTypeCheck($.AttachedEvent$('mouseMove'), 'is$AttachedEvent');
});
Isolate.$lazy($, '_isClickableProperty', 'ClickManager__isClickableProperty', 'get$ClickManager__isClickableProperty', function() {
  return $.propertyTypeCheck($.Property$('isClickable', false, 'bool'), 'is$Property');
});
Isolate.$lazy($, '_stageMouseCacheProperty', 'Mouse__stageMouseCacheProperty', 'get$Mouse__stageMouseCacheProperty', function() {
  return $.propertyTypeCheck($.Property$('_stageMouseCacheProperty', null, 'List<PElement>'), 'is$Property');
});
Isolate.$lazy($, '_clickEvent', 'ClickManager__clickEvent', 'get$ClickManager__clickEvent', function() {
  return $.propertyTypeCheck($.AttachedEvent$('clickEvent', 'ElementMouseEventArgs'), 'is$AttachedEvent');
});
Isolate.$lazy($, '_mouseOutEvent', 'ClickManager__mouseOutEvent', 'get$ClickManager__mouseOutEvent', function() {
  return $.propertyTypeCheck($.AttachedEvent$('mouseOut'), 'is$AttachedEvent');
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, fields, methods) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], methods);
  }
  for (var method in methods) {
    $.dynamicFunction(method)[cls] = methods[method];
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$_DOMFileSystemSyncImpl: function() { return false; },
 is$_AudioContextImpl: function() { return false; },
 is$_SpeechGrammarListImpl: function() { return false; },
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$_IDBDatabaseImpl: function() { return false; },
 is$SessionDescription: function() { return false; },
 is$StyleSheet: function() { return false; },
 is$_ImageDataImpl: function() { return false; },
 is$RTCSessionDescription: function() { return false; },
 is$SVGElement: function() { return false; },
 is$_NodeFilterImpl: function() { return false; },
 is$_TouchListImpl: function() { return false; },
 is$SVGAnimatedRect: function() { return false; },
 is$_SpeechRecognitionResultListImpl: function() { return false; },
 is$_EventImpl: function() { return false; },
 is$_BarInfoImpl: function() { return false; },
 is$_SVGAngleImpl: function() { return false; },
 is$WorkerLocation: function() { return false; },
 is$Object: function() { return false; },
 is$MediaController: function() { return false; },
 is$_MediaErrorImpl: function() { return false; },
 is$SVGElementInstance: function() { return false; },
 is$CanvasRenderingContext2D: function() { return false; },
 is$Document: function() { return false; },
 is$_StyleMediaImpl: function() { return false; },
 is$BatteryManager: function() { return false; },
 is$_MediaListImpl: function() { return false; },
 is$ScriptProfileNode: function() { return false; },
 is$DOMPluginArray: function() { return false; },
 is$_MediaStreamTrackListImpl: function() { return false; },
 is$HttpRequestUpload: function() { return false; },
 is$_SVGAnimatedNumberImpl: function() { return false; },
 is$IDBDatabase: function() { return false; },
 is$Event: function() { return false; },
 is$_DOMPluginArrayImpl: function() { return false; },
 is$Window: function() { return false; },
 is$MediaError: function() { return false; },
 is$Location: function() { return false; },
 is$_IDBObjectStoreImpl: function() { return false; },
 is$SpeechRecognitionResult: function() { return false; },
 is$_SVGAnimatedLengthImpl: function() { return false; },
 is$SVGLengthList: function() { return false; },
 is$MediaStream: function() { return false; },
 is$_RTCSessionDescriptionImpl: function() { return false; },
 is$_WorkerContextImpl: function() { return false; },
 is$_HeadElementImpl: function() { return false; },
 is$_SVGStringListImpl: function() { return false; },
 is$_DOMErrorImpl: function() { return false; },
 is$NodeFilter: function() { return false; },
 is$SVGPreserveAspectRatio: function() { return false; },
 is$_JavaScriptCallFrameImpl: function() { return false; },
 is$Node: function() { return false; },
 is$_SVGAnimatedIntegerImpl: function() { return false; },
 is$_TextTrackImpl: function() { return false; },
 is$Touch: function() { return false; },
 is$SVGAngle: function() { return false; },
 is$_SVGRectImpl: function() { return false; },
 is$NodeList: function() { return false; },
 is$_TextTrackListImpl: function() { return false; },
 is$_Uint8ArrayImpl: function() { return false; },
 is$_WindowImpl: function() { return false; },
 is$_DOMMimeTypeArrayImpl: function() { return false; },
 is$_IDBKeyRangeImpl: function() { return false; },
 is$MediaList: function() { return false; },
 is$MediaStreamList: function() { return false; },
 is$_CryptoImpl: function() { return false; },
 is$SVGAnimatedLengthList: function() { return false; },
 is$SVGAnimatedInteger: function() { return false; },
 is$TextTrackCueList: function() { return false; },
 is$_SVGUseElementImpl: function() { return false; },
 is$DirectoryEntrySync: function() { return false; },
 is$Storage: function() { return false; },
 is$_SVGAnimatedEnumerationImpl: function() { return false; },
 is$SVGAnimatedNumberList: function() { return false; },
 is$History: function() { return false; },
 is$SVGAnimatedAngle: function() { return false; },
 is$PagePopupController: function() { return false; },
 is$_CSSStyleDeclarationImpl: function() { return false; },
 is$RTCIceCandidate: function() { return false; },
 is$_TextTrackCueListImpl: function() { return false; },
 is$_CSSStyleSheetImpl: function() { return false; },
 is$SVGAnimatedNumber: function() { return false; },
 is$WorkerNavigator: function() { return false; },
 is$MediaStreamTrack: function() { return false; },
 is$_SVGNumberListImpl: function() { return false; },
 is$CSSRule: function() { return false; },
 is$_TouchImpl: function() { return false; },
 is$HttpRequest: function() { return false; },
 is$Screen: function() { return false; },
 is$SVGPointList: function() { return false; },
 is$_SVGAnimatedLengthListImpl: function() { return false; },
 is$_DOMSettableTokenListImpl: function() { return false; },
 is$_ClipboardImpl: function() { return false; },
 is$_SVGAnimatedNumberListImpl: function() { return false; },
 is$DOMSettableTokenList: function() { return false; },
 is$_HTMLOptionsCollectionImpl: function() { return false; },
 is$_SVGAnimatedBooleanImpl: function() { return false; },
 is$_NamedNodeMapImpl: function() { return false; },
 is$Navigator: function() { return false; },
 is$SVGAnimatedPreserveAspectRatio: function() { return false; },
 is$_StyleSheetListImpl: function() { return false; },
 is$_HistoryImpl: function() { return false; },
 is$Blob: function() { return false; },
 is$_MediaStreamImpl: function() { return false; },
 is$FileError: function() { return false; },
 is$_FormElementImpl: function() { return false; },
 is$HTMLCollection: function() { return false; },
 is$SVGPoint: function() { return false; },
 is$Uint8Array: function() { return false; },
 is$_DocumentImpl: function() { return false; },
 is$SVGAnimatedLength: function() { return false; },
 is$_AudioBufferImpl: function() { return false; },
 is$CSSRuleList: function() { return false; },
 is$_Uint8ClampedArrayImpl: function() { return false; },
 is$SVGSVGElement: function() { return false; },
 is$IDBTransaction: function() { return false; },
 is$HTMLOptionsCollection: function() { return false; },
 is$StorageInfo: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$NamedNodeMap: function() { return false; },
 is$DOMError: function() { return false; },
 is$Geolocation: function() { return false; },
 is$TextTrackList: function() { return false; },
 is$_MediaControllerImpl: function() { return false; },
 is$_CanvasElementImpl: function() { return false; },
 is$TimeRanges: function() { return false; },
 is$CSSPrimitiveValue: function() { return false; },
 is$SVGAnimatedEnumeration: function() { return false; },
 is$TextTrack: function() { return false; },
 is$SpeechRecognitionResultList: function() { return false; },
 is$_SVGElementImpl: function() { return false; },
 is$SVGRect: function() { return false; },
 is$SQLResultSetRowList: function() { return false; },
 is$RGBColor: function() { return false; },
 is$Map: function() { return false; },
 is$_ArrayBufferImpl: function() { return false; },
 is$_FileErrorImpl: function() { return false; },
 is$FileList: function() { return false; },
 is$TableSectionElement: function() { return false; },
 is$MessagePort: function() { return false; },
 is$AudioParam: function() { return false; },
 is$TouchEvent: function() { return false; },
 is$_DOMPluginImpl: function() { return false; },
 is$MouseEvent: function() { return false; },
 is$CSSStyleSheet: function() { return false; },
 is$SpeechInputResultList: function() { return false; },
 is$_Float32ArrayImpl: function() { return false; },
 is$_WorkerNavigatorImpl: function() { return false; },
 is$_CSSRuleImpl: function() { return false; },
 is$SourceBufferList: function() { return false; },
 is$_SVGTransformListImpl: function() { return false; },
 is$AudioGain: function() { return false; },
 is$_RTCIceCandidateImpl: function() { return false; },
 is$DOMFileSystem: function() { return false; },
 is$_NodeImpl: function() { return false; },
 is$HeadElement: function() { return false; },
 is$ImageElement: function() { return false; },
 is$_PerformanceTimingImpl: function() { return false; },
 is$_SVGElementInstanceListImpl: function() { return false; },
 is$List: function() { return false; },
 is$ImageData: function() { return false; },
 is$MediaStreamTrackList: function() { return false; },
 is$MediaElement: function() { return false; },
 is$NotificationCenter: function() { return false; },
 is$_SpeechRecognitionResultImpl: function() { return false; },
 is$CSSStyleDeclaration: function() { return false; },
 is$DirectoryEntry: function() { return false; },
 is$PerformanceTiming: function() { return false; },
 is$Iterable: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$EventTarget: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$_SVGAnimatedRectImpl: function() { return false; },
 is$_AudioGainImpl: function() { return false; },
 is$_SVGAnimatedPreserveAspectRatioImpl: function() { return false; },
 is$_ElementImpl: function() { return false; },
 is$_WorkerLocationImpl: function() { return false; },
 is$StyleMedia: function() { return false; },
 is$_MessagePortImpl: function() { return false; },
 is$_SVGPreserveAspectRatioImpl: function() { return false; },
 is$AudioDestinationNode: function() { return false; },
 is$_TableSectionElementImpl: function() { return false; },
 is$_AudioListenerImpl: function() { return false; },
 is$_BatteryManagerImpl: function() { return false; },
 is$DOMPlugin: function() { return false; },
 is$IDBObjectStore: function() { return false; },
 is$ValidityState: function() { return false; },
 is$File: function() { return false; },
 is$_PerformanceImpl: function() { return false; },
 is$StyleSheetList: function() { return false; },
 is$Uint8ClampedArray: function() { return false; },
 is$_MediaElementImpl: function() { return false; },
 is$_DirectoryEntryImpl: function() { return false; },
 is$SVGAnimatedTransformList: function() { return false; },
 is$MemoryInfo: function() { return false; },
 is$_MediaStreamListImpl: function() { return false; },
 is$_HTMLCollectionImpl: function() { return false; },
 is$_SVGViewSpecImpl: function() { return false; },
 is$_EventTargetImpl: function() { return false; },
 is$SVGUseElement: function() { return false; },
 is$SpeechGrammarList: function() { return false; },
 is$WorkerContext: function() { return false; },
 is$_ScreenImpl: function() { return false; },
 is$SVGViewSpec: function() { return false; },
 is$_NodeListImpl: function() { return false; },
 is$_GeolocationImpl: function() { return false; },
 is$_AudioParamImpl: function() { return false; },
 is$_SVGAnimatedAngleImpl: function() { return false; },
 is$_IDBFactoryImpl: function() { return false; },
 is$_SVGPointImpl: function() { return false; },
 is$PerformanceNavigation: function() { return false; },
 is$_PagePopupControllerImpl: function() { return false; },
 is$SVGNumberList: function() { return false; },
 is$SVGAnimatedString: function() { return false; },
 is$Console: function() { return false; },
 is$DOMFileSystemSync: function() { return false; },
 is$_EntryArrayImpl: function() { return false; },
 is$AudioContext: function() { return false; },
 is$_DOMFileSystemImpl: function() { return false; },
 is$_AudioDestinationNodeImpl: function() { return false; },
 is$_SVGAnimatedStringImpl: function() { return false; },
 is$_SVGAnimatedTransformListImpl: function() { return false; },
 is$_StorageInfoImpl: function() { return false; },
 is$_ConsoleImpl: function() { return false; },
 is$_FileListImpl: function() { return false; },
 is$IDBFactory: function() { return false; },
 is$_ScriptProfileNodeImpl: function() { return false; },
 is$MediaKeyError: function() { return false; },
 is$Crypto: function() { return false; },
 is$TouchList: function() { return false; },
 is$_CSSPrimitiveValueImpl: function() { return false; },
 is$_RGBColorImpl: function() { return false; },
 is$_SVGElementInstanceImpl: function() { return false; },
 is$_SVGSVGElementImpl: function() { return false; },
 is$_SourceBufferListImpl: function() { return false; },
 is$_TimeRangesImpl: function() { return false; },
 is$_ValidityStateImpl: function() { return false; },
 is$_FileImpl: function() { return false; },
 is$_ArrayBufferViewImpl: function() { return false; },
 is$DataTransferItemList: function() { return false; },
 is$Coordinates: function() { return false; },
 is$_SVGMatrixImpl: function() { return false; },
 is$SVGAnimatedBoolean: function() { return false; },
 is$_ImageElementImpl: function() { return false; },
 is$CanvasElement: function() { return false; },
 is$FormElement: function() { return false; },
 is$_TableCaptionElementImpl: function() { return false; },
 is$Element: function() { return false; },
 is$_StorageImpl: function() { return false; },
 is$_SpeechInputResultListImpl: function() { return false; },
 is$_SVGPointListImpl: function() { return false; },
 is$SVGMatrix: function() { return false; },
 is$AudioBuffer: function() { return false; },
 is$SVGLength: function() { return false; },
 is$SVGTransformList: function() { return false; },
 is$DOMApplicationCache: function() { return false; },
 is$_MemoryInfoImpl: function() { return false; },
 is$DOMMimeTypeArray: function() { return false; },
 is$IDBKeyRange: function() { return false; },
 is$_BlobImpl: function() { return false; },
 is$_MediaKeyErrorImpl: function() { return false; },
 is$_IDBTransactionImpl: function() { return false; },
 is$SVGStringList: function() { return false; },
 is$BarInfo: function() { return false; },
 is$Clipboard: function() { return false; },
 is$_HttpRequestUploadImpl: function() { return false; },
 is$Collection: function() { return false; },
 is$_DOMApplicationCacheImpl: function() { return false; },
 is$_CSSRuleListImpl: function() { return false; },
 is$_PerformanceNavigationImpl: function() { return false; },
 is$SVGPathSegList: function() { return false; },
 is$Performance: function() { return false; },
 is$_SVGPathSegListImpl: function() { return false; },
 is$SVGElementInstanceList: function() { return false; },
 is$_CoordinatesImpl: function() { return false; },
 is$_SessionDescriptionImpl: function() { return false; },
 is$_SQLResultSetRowListImpl: function() { return false; },
 is$TableCaptionElement: function() { return false; },
 is$AudioListener: function() { return false; },
 is$_SVGLengthImpl: function() { return false; },
 is$JavaScriptCallFrame: function() { return false; },
 is$Float32Array: function() { return false; },
 is$_SVGLengthListImpl: function() { return false; },
 is$_StyleSheetImpl: function() { return false; },
 is$_ManagerStub: function() { return false; },
 is$EntryArray: function() { return false; },
 is$_DataTransferItemListImpl: function() { return false; },
 is$_MediaStreamTrackImpl: function() { return false; },
 is$_NavigatorImpl: function() { return false; },
 is$_DirectoryEntrySyncImpl: function() { return false; },
 is$_NotificationCenterImpl: function() { return false; }
});

$.$defineNativeClass('AbstractWorker', [], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._AbstractWorkerEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLAnchorElement', ["name?", "type?"], {
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('WebKitAnimation', ["duration?", "name?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLAppletElement', ["height?", "name?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', [], {
 is$_ArrayBufferImpl: function() { return true; },
 is$ArrayBuffer: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', [], {
 is$_ArrayBufferViewImpl: function() { return true; },
 is$ArrayBufferView: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Attr', ["name?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioBuffer', ["duration?", "length?"], {
 is$_AudioBufferImpl: function() { return true; },
 is$AudioBuffer: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioBufferSourceNode', ["buffer"], { set$buffer: function(v) { this.buffer = $.callTypeCheck(v, 'is$_AudioBufferImpl'); },

 noteOn$1: function(when) {
  return this.noteOn(when);
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioChannelMerger', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioChannelSplitter', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioContext', ["destination?"], {
 get$on: function() {
  return $._AudioContextEventsImpl$(this);
},
 createBufferSource$0: function() {
  return this.createBufferSource();
},
 decodeAudioData$3: function(audioData, successCallback, errorCallback) {
  $.callTypeCheck(audioData, 'is$_ArrayBufferImpl');
  $.functionTypeCheck(successCallback, 'is$AudioBufferCallback');
  $.functionTypeCheck(errorCallback, 'is$AudioBufferCallback');
  return this.decodeAudioData(audioData,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
},
 is$_AudioContextImpl: function() { return true; },
 is$AudioContext: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioDestinationNode', [], {
 is$_AudioDestinationNodeImpl: function() { return true; },
 is$AudioDestinationNode: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLAudioElement', [], {
 is$MediaElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('AudioGain', [], {
 is$_AudioGainImpl: function() { return true; },
 is$AudioGain: function() { return true; },
 is$AudioParam: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioGainNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioListener', [], {
 is$_AudioListenerImpl: function() { return true; },
 is$AudioListener: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioNode', ["context?"], {
 connect$3: function(destination, output, input) {
  return this.connect(destination,output,input);
},
 connect$2: function(destination,output) {
  return this.connect(destination,output);
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioPannerNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioParam', ["name?", "value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$_AudioParamImpl: function() { return true; },
 is$AudioParam: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioProcessingEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioSourceNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLBRElement', [], {
 clear$0: function() { return this.clear.call$0(); },
 clear$1: function(arg0) { return this.clear.call$1(arg0); },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('BarInfo', [], {
 is$_BarInfoImpl: function() { return true; },
 is$BarInfo: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLBaseElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', ["size?"], { set$size: function(v) { this.size = $.intTypeCheck(v, 'is$$int'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('BatteryManager', [], {
 get$on: function() {
  return $._BatteryManagerEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_BatteryManagerImpl: function() { return true; },
 is$BatteryManager: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('BeforeLoadEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('BiquadFilterNode', ["type?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Blob', ["size?", "type?"], {
 is$_BlobImpl: function() { return true; },
 is$Blob: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', [], {
 get$on: function() {
  return $._BodyElementEventsImpl$(this);
},
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', ["name?", "type?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('CDATASection', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSCharsetRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSFontFaceRule', ["style?"], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSImportRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitCSSKeyframeRule', ["style?"], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitCSSKeyframesRule', ["name?"], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitCSSMatrix', [], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSMediaRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSPageRule', ["style?"], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSPrimitiveValue', [], {
 is$_CSSPrimitiveValueImpl: function() { return true; },
 is$CSSPrimitiveValue: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSRule', ["type?"], {
 is$_CSSRuleImpl: function() { return true; },
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSRuleList', ["length?"], {
 is$_CSSRuleListImpl: function() { return true; },
 is$CSSRuleList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSStyleDeclaration', ["length?"], {
 getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 setProperty$3: function(propertyName, value, priority) {
  return this.setProperty(propertyName,$.stringTypeCheck(value, 'is$String'),priority);
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 clear$1: function(arg0) { return this.get$clear().call$1(arg0); },
 set$cursor: function(value) {
  this.setProperty$3('cursor', value, '');
},
 get$height: function() {
  return this.getPropertyValue$1('height');
},
 get$left: function() {
  return this.getPropertyValue$1('left');
},
 get$size: function() {
  return this.getPropertyValue$1('size');
},
 set$size: function(value) {
  this.setProperty$3('size', value, '');
},
 get$top: function() {
  return this.getPropertyValue$1('top');
},
 get$width: function() {
  return this.getPropertyValue$1('width');
},
 is$_CSSStyleDeclarationImpl: function() { return true; },
 is$CSSStyleDeclaration: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSStyleRule', ["style?"], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSStyleSheet', [], {
 is$_CSSStyleSheetImpl: function() { return true; },
 is$CSSStyleSheet: function() { return true; },
 is$StyleSheet: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitCSSTransformValue', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSUnknownRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSValue', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSValueList', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLCanvasElement', ["height?", "width?"], { set$height: function(v) { this.height = $.intTypeCheck(v, 'is$$int'); },
 set$width: function(v) { this.width = $.intTypeCheck(v, 'is$$int'); },

 getContext$1: function(contextId) {
  return this.getContext(contextId);
},
 get$context2d: function() {
  return this.getContext$1('2d');
},
 is$_CanvasElementImpl: function() { return true; },
 is$CanvasElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('CanvasGradient', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('CanvasPattern', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('CanvasRenderingContext', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('CanvasRenderingContext2D', ["fillStyle!", "font", "globalAlpha", "textAlign", "textBaseline"], { set$font: function(v) { this.font = $.stringTypeCheck(v, 'is$String'); },
 set$globalAlpha: function(v) { this.globalAlpha = $.numTypeCheck(v, 'is$num'); },
 set$textAlign: function(v) { this.textAlign = $.stringTypeCheck(v, 'is$String'); },
 set$textBaseline: function(v) { this.textBaseline = $.stringTypeCheck(v, 'is$String'); },

 beginPath$0: function() {
  return this.beginPath();
},
 bezierCurveTo$6: function(cp1x, cp1y, cp2x, cp2y, x, y) {
  return this.bezierCurveTo($.numTypeCheck(cp1x, 'is$num'),$.numTypeCheck(cp1y, 'is$num'),$.numTypeCheck(cp2x, 'is$num'),$.numTypeCheck(cp2y, 'is$num'),$.numTypeCheck(x, 'is$num'),$.numTypeCheck(y, 'is$num'));
},
 clearRect$4: function(x, y, width, height) {
  return this.clearRect(x,y,$.numTypeCheck(width, 'is$num'),$.numTypeCheck(height, 'is$num'));
},
 clip$0: function() {
  return this.clip();
},
 closePath$0: function() {
  return this.closePath();
},
 drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
  return this.drawImage(canvas_OR_image_OR_video,$.numTypeCheck(sx_OR_x, 'is$num'),$.numTypeCheck(sy_OR_y, 'is$num'),$.numTypeCheck(sw_OR_width, 'is$num'),$.numTypeCheck(height_OR_sh, 'is$num'),$.numTypeCheck(dx, 'is$num'),$.numTypeCheck(dy, 'is$num'),$.numTypeCheck(dw, 'is$num'),$.numTypeCheck(dh, 'is$num'));
},
 drawImage$3: function(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y);
},
 fill$0: function() {
  return this.fill();
},
 fillRect$4: function(x, y, width, height) {
  return this.fillRect(x,y,$.numTypeCheck(width, 'is$num'),$.numTypeCheck(height, 'is$num'));
},
 fillText$4: function(text, x, y, maxWidth) {
  return this.fillText($.stringTypeCheck(text, 'is$String'),$.numTypeCheck(x, 'is$num'),y,maxWidth);
},
 fillText$3: function(text,x,y) {
  return this.fillText(text,x,y);
},
 measureText$1: function(text) {
  return this.measureText(text);
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,$.numTypeCheck(y, 'is$num'));
},
 rect$4: function(x, y, width, height) {
  return this.rect(x,y,$.numTypeCheck(width, 'is$num'),$.numTypeCheck(height, 'is$num'));
},
 restore$0: function() {
  return this.restore();
},
 save$0: function() {
  return this.save();
},
 transform$6: function(m11, m12, m21, m22, dx, dy) {
  return this.transform($.numTypeCheck(m11, 'is$num'),$.numTypeCheck(m12, 'is$num'),$.numTypeCheck(m21, 'is$num'),$.numTypeCheck(m22, 'is$num'),$.numTypeCheck(dx, 'is$num'),$.numTypeCheck(dy, 'is$num'));
},
 translate$2: function(tx, ty) {
  return this.translate($.numTypeCheck(tx, 'is$num'),$.numTypeCheck(ty, 'is$num'));
},
 is$CanvasRenderingContext2D: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CharacterData', ["length?"], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('ClientRect', ["height?", "left?", "top?", "width?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('ClientRectList', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Clipboard', [], {
 is$_ClipboardImpl: function() { return true; },
 is$Clipboard: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CloseEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Comment', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CompositionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

_ConsoleImpl = (typeof console == 'undefined' ? {} : console);
_ConsoleImpl.error$1 = function(arg) {
  return this.error(arg);
};
_ConsoleImpl.get$error = function() { return new $.BoundClosure(this, 'error$1'); };
$.$defineNativeClass('HTMLContentElement', [], {
 select$1: function(arg0) { return this.select.call$1(arg0); },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ConvolverNode', ["buffer"], { set$buffer: function(v) { this.buffer = $.callTypeCheck(v, 'is$_AudioBufferImpl'); },

 is$Object: function() { return true; }
});

$.$defineNativeClass('Coordinates', [], {
 is$_CoordinatesImpl: function() { return true; },
 is$Coordinates: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Counter', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Crypto', [], {
 is$_CryptoImpl: function() { return true; },
 is$Crypto: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CustomEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLDListElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', [], {
 get$on: function() {
  return $._DOMApplicationCacheEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 update$0: function() {
  return this.update();
},
 is$_DOMApplicationCacheImpl: function() { return true; },
 is$DOMApplicationCache: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMError', ["name?"], {
 is$_DOMErrorImpl: function() { return true; },
 is$DOMError: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMFileSystem', ["name?"], {
 is$_DOMFileSystemImpl: function() { return true; },
 is$DOMFileSystem: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMFileSystemSync', ["name?"], {
 is$_DOMFileSystemSyncImpl: function() { return true; },
 is$DOMFileSystemSync: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMImplementation', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMMimeType', ["type?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMMimeTypeArray', ["length?"], {
 is$_DOMMimeTypeArrayImpl: function() { return true; },
 is$DOMMimeTypeArray: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMParser', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMPlugin', ["length?", "name?"], {
 is$_DOMPluginImpl: function() { return true; },
 is$DOMPlugin: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMPluginArray', ["length?"], {
 is$_DOMPluginArrayImpl: function() { return true; },
 is$DOMPluginArray: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMSelection', ["type?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMSettableTokenList', ["value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$_DOMSettableTokenListImpl: function() { return true; },
 is$DOMSettableTokenList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMStringList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'String');
},
 add$1: function(value) {
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.stringTypeCheck(element, 'is$String'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.stringTypeCheck(initialValue, 'is$String');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', ["length?"], {
 add$1: function(token) {
  return this.add($.stringTypeCheck(token, 'is$String'));
},
 contains$1: function(token) {
  return this.contains(token);
},
 remove$1: function(token) {
  return this.remove($.stringTypeCheck(token, 'is$String'));
},
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMURL', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLDataListElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', ["type?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DataTransferItemList', ["length?"], {
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
},
 is$_DataTransferItemListImpl: function() { return true; },
 is$DataTransferItemList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DataView', [], {
 is$ArrayBufferView: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Database', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DatabaseSync', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DedicatedWorkerContext', [], {
 get$on: function() {
  return $._DedicatedWorkerContextEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
},
 is$WorkerContext: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DelayNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLDetailsElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DeviceMotionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DeviceOrientationEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLDirectoryElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DirectoryEntry', [], {
 is$_DirectoryEntryImpl: function() { return true; },
 is$DirectoryEntry: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DirectoryEntrySync', [], {
 is$_DirectoryEntrySyncImpl: function() { return true; },
 is$DirectoryEntrySync: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DirectoryReader', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DirectoryReaderSync', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLDivElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', [], {
 get$on: function() {
  return $._DocumentEventsImpl$(this);
},
 $dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $dom_getElementById$1: function(elementId) {
  return this.getElementById($.stringTypeCheck(elementId, 'is$String'));
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 query$1: function(selectors) {
  if ($.boolConversionCheck($.CTC47.hasMatch$1(selectors), 'is$bool'))
    return this.$dom_getElementById$1($.substring$1(selectors, 1));
  return this.$dom_querySelector$1(selectors);
},
 is$_DocumentImpl: function() { return true; },
 is$Document: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DocumentFragment', [], {
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$translate: function() {
  return false;
},
 translate$2: function(arg0, arg1) { return this.get$translate().call$2(arg0, arg1); },
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 get$attributes: function() {
  return $.CTC24;
},
 get$style: function() {
  return $._ElementFactoryProvider_Element$tag('div').get$style();
},
 get$on: function() {
  return $._ElementEventsImpl$(this);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DocumentType', ["name?"], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DynamicsCompressorNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('EXTTextureFilterAnisotropic', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Element', ["id?", "style?"], {
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._ElementEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 translate$2: function(arg0, arg1) { return this.translate.call$2(arg0, arg1); },
 $dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 $dom_getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 $dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$_ElementImpl: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', ["height?", "name?", "type?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Entity', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('EntityReference', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Entry', ["name?"], {
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS($.functionTypeCheck(successCallback, 'is$VoidCallback'), 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('EntryArray', ["length?"], {
 is$_EntryArrayImpl: function() { return true; },
 is$EntryArray: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('EntrySync', ["name?"], {
 remove$0: function() {
  return this.remove();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('ErrorEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Event', ["currentTarget?", "type?"], {
 is$_EventImpl: function() { return true; },
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('EventException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('EventSource', [], {
 get$on: function() {
  return $._EventSourceEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('EventTarget', [], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._EventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

},
 is$_EventTargetImpl: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLFieldSetElement', ["name?", "type?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('File', ["name?"], {
 is$_FileImpl: function() { return true; },
 is$File: function() { return true; },
 is$Blob: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileEntry', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileEntrySync', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileError', [], {
 is$_FileErrorImpl: function() { return true; },
 is$FileError: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_FileImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'File');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$File');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$File');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.callTypeCheck(element, 'is$File'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$File');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('FileReader', ["error?"], {
 get$on: function() {
  return $._FileReaderEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileReaderSync', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileWriter', ["error?", "length?"], {
 get$on: function() {
  return $._FileWriterEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileWriterSync', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Float32Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.numTypeCheck(value, 'is$num');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'num');
},
 add$1: function(value) {
  $.numTypeCheck(value, 'is$num');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.numTypeCheck(value, 'is$num');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.numTypeCheck(element, 'is$num'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.numTypeCheck(initialValue, 'is$num');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_Float32ArrayImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Float32Array: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Float64Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.numTypeCheck(value, 'is$num');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'num');
},
 add$1: function(value) {
  $.numTypeCheck(value, 'is$num');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.numTypeCheck(value, 'is$num');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.numTypeCheck(element, 'is$num'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.numTypeCheck(initialValue, 'is$num');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', ["size?"], { set$size: function(v) { this.size = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DOMFormData', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', ["length?", "name?"], {
 reset$0: function() {
  return this.reset();
},
 is$_FormElementImpl: function() { return true; },
 is$FormElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', ["height?", "name?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', [], {
 get$on: function() {
  return $._FrameSetElementEventsImpl$(this);
},
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Gamepad', ["id?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('GamepadList', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Geolocation', [], {
 is$_GeolocationImpl: function() { return true; },
 is$Geolocation: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Geoposition', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLHRElement', ["size?", "width?"], { set$size: function(v) { this.size = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_NodeImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.callTypeCheck(element, 'is$Node'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$Node');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_HTMLCollectionImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$HTMLCollection: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', [], {
 get$length: function() {
return this.length;
},
 set$length: function(value) {
  $.intTypeCheck(value, 'is$$int');
this.length = value;
},
 remove$1: function(index) {
  return this.remove($.intTypeCheck(index, 'is$$int'));
},
 is$_HTMLOptionsCollectionImpl: function() { return true; },
 is$HTMLOptionsCollection: function() { return true; },
 is$HTMLCollection: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HashChangeEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLHeadElement', [], {
 is$_HeadElementImpl: function() { return true; },
 is$HeadElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('History', ["length?", "state?"], {
 is$_HistoryImpl: function() { return true; },
 is$History: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLHtmlElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequest', ["response?", "responseType"], { set$responseType: function(v) { this.responseType = $.stringTypeCheck(v, 'is$String'); },

 get$on: function() {
  return $._HttpRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 open$5: function(method, url, async, user, password) {
  return this.open(method,url,async,user,password);
},
 open$3: function(method,url,async) {
  return this.open(method,url,async);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
},
 send$0: function() {
  return this.send();
},
 is$HttpRequest: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestUpload', [], {
 get$on: function() {
  return $._HttpRequestUploadEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_HttpRequestUploadImpl: function() { return true; },
 is$HttpRequestUpload: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBAny', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBCursor', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBCursorWithValue', [], {
 get$value: function() {
  return $._convertNativeToDart_IDBAny(this.get$_lib_value());
},
 get$_lib_value: function() {
return this.value;
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBDatabase', ["name?"], {
 get$on: function() {
  return $._IDBDatabaseEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_IDBDatabaseImpl: function() { return true; },
 is$IDBDatabase: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBDatabaseException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBFactory', [], {
 is$_IDBFactoryImpl: function() { return true; },
 is$IDBFactory: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBIndex', ["name?"], {
 get$1: function(key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  t1 = !t1;
  if (typeof key === 'object' && key !== null && key.is$IDBKeyRange() || key == null)
    return this._get_1$1(key);
  if (t1)
    return this._get_2$1(key);
  throw $.$$throw($.CTC21);
},
 _get_1$1: function(key) {
  return this.get($.callTypeCheck(key, 'is$_IDBKeyRangeImpl'));
},
 _get_2$1: function(key) {
  return this.get(key);
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBKey', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBKeyRange', [], {
 is$_IDBKeyRangeImpl: function() { return true; },
 is$IDBKeyRange: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', ["name?"], {
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_SerializedScriptValue(value), key);
  return this._add_2$1($._convertDartToNative_SerializedScriptValue(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
},
 is$_IDBObjectStoreImpl: function() { return true; },
 is$IDBObjectStore: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBOpenDBRequest', [], {
 get$on: function() {
  return $._IDBOpenDBRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBRequest', ["error?"], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._IDBRequestEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBTransaction', ["error?"], {
 get$on: function() {
  return $._IDBTransactionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_IDBTransactionImpl: function() { return true; },
 is$IDBTransaction: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBUpgradeNeededEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBVersionChangeEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBVersionChangeRequest', [], {
 get$on: function() {
  return $._IDBVersionChangeRequestEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLIFrameElement', ["height?", "name?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('IceCandidate', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('ImageData', ["height?", "width?"], {
 is$_ImageDataImpl: function() { return true; },
 is$ImageData: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', ["complete?", "height?", "name?", "src", "width?", "x?", "y?"], { set$height: function(v) { this.height = $.intTypeCheck(v, 'is$$int'); },
 set$src: function(v) { this.src = $.stringTypeCheck(v, 'is$String'); },
 set$width: function(v) { this.width = $.intTypeCheck(v, 'is$$int'); },

 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$_ImageElementImpl: function() { return true; },
 is$ImageElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', ["height?", "name?", "size?", "type?", "value?", "width?"], { set$size: function(v) { this.size = $.intTypeCheck(v, 'is$$int'); },
 set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 get$on: function() {
  return $._InputElementEventsImpl$(this);
},
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Int16Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.intTypeCheck(element, 'is$$int'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int32Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.intTypeCheck(element, 'is$$int'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int8Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.intTypeCheck(element, 'is$$int'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('JavaScriptAudioNode', [], {
 get$on: function() {
  return $._JavaScriptAudioNodeEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', ["type?"], {
 is$_JavaScriptCallFrameImpl: function() { return true; },
 is$JavaScriptCallFrame: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('KeyboardEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLKeygenElement', ["name?", "type?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', ["type?", "value?"], { set$value: function(v) { this.value = $.intTypeCheck(v, 'is$$int'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', ["type?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('LocalMediaStream', [], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; },
 is$MediaStream: function() { return true; }
});

$.$defineNativeClass('Location', [], {
 toString$0: function() {
  return this.toString();
},
 is$Location: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLMapElement', ["name?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', ["height?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('MediaController', ["duration?"], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_MediaControllerImpl: function() { return true; },
 is$MediaController: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLMediaElement', ["duration?", "error?"], {
 get$on: function() {
  return $._MediaElementEventsImpl$(this);
},
 load$0: function() {
  return this.load();
},
 get$load: function() { return new $.BoundClosure0(this, 'load$0'); },
 is$_MediaElementImpl: function() { return true; },
 is$MediaElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('MediaElementAudioSourceNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaError', [], {
 is$_MediaErrorImpl: function() { return true; },
 is$MediaError: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaKeyError', [], {
 is$_MediaKeyErrorImpl: function() { return true; },
 is$MediaKeyError: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaKeyEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'String');
},
 add$1: function(value) {
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.stringTypeCheck(element, 'is$String'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.stringTypeCheck(initialValue, 'is$String');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_MediaListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$MediaList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('MediaQueryList', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaSource', ["duration?"], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStream', [], {
 get$on: function() {
  return $._MediaStreamEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

},
 is$_MediaStreamImpl: function() { return true; },
 is$MediaStream: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamAudioSourceNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', ["length?"], {
 is$_MediaStreamListImpl: function() { return true; },
 is$MediaStreamList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrack', [], {
 get$on: function() {
  return $._MediaStreamTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_MediaStreamTrackImpl: function() { return true; },
 is$MediaStreamTrack: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackList', ["length?"], {
 get$on: function() {
  return $._MediaStreamTrackListEventsImpl$(this);
},
 add$1: function(track) {
  return this.add($.callTypeCheck(track, 'is$_MediaStreamTrackImpl'));
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove($.callTypeCheck(track, 'is$_MediaStreamTrackImpl'));
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_MediaStreamTrackListImpl: function() { return true; },
 is$MediaStreamTrackList: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MemoryInfo', [], {
 is$_MemoryInfoImpl: function() { return true; },
 is$MemoryInfo: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLMenuElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('MessageChannel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('MessageEvent', ["ports?"], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MessagePort', [], {
 get$on: function() {
  return $._MessagePortEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_MessagePortImpl: function() { return true; },
 is$MessagePort: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLMetaElement', ["name?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Metadata', ["size?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLMeterElement', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('MouseEvent', ["shiftKey?", "x?", "y?"], {
 get$offsetX: function() {
  if (!!this.offsetX)
    return this.get$_offsetX();
  else {
    var target = this.target;
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.CTC22);
    return $.sub(this.clientX, target.$dom_getBoundingClientRect$0().get$left());
  }
},
 get$offsetY: function() {
  if (!!this.offsetY)
    return this.get$_offsetY();
  else {
    var target = this.target;
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.CTC22);
    return $.sub(this.clientY, target.$dom_getBoundingClientRect$0().get$top());
  }
},
 get$_offsetX: function() {
return this.offsetX
},
 get$_offsetY: function() {
return this.offsetY
},
 is$MouseEvent: function() { return true; },
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MutationEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MutationObserver', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('MutationRecord', ["type?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('NamedNodeMap', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_NodeImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.callTypeCheck(element, 'is$Node'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$Node');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_NamedNodeMapImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$NamedNodeMap: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Navigator', [], {
 is$_NavigatorImpl: function() { return true; },
 is$Navigator: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('NavigatorUserMediaError', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Node', [], {
 remove$0: function() {
  if (!(this.get$parent() == null))
    $.callTypeCheck(this.get$parent(), 'is$_NodeImpl').$dom_removeChild$1(this);
  return this;
},
 get$$$dom_attributes: function() {
return this.attributes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  $.stringTypeCheck(value, 'is$String');
this.textContent = value;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_appendChild$1: function(newChild) {
  return this.appendChild($.callTypeCheck(newChild, 'is$_NodeImpl'));
},
 contains$1: function(other) {
  return this.contains($.callTypeCheck(other, 'is$_NodeImpl'));
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild($.callTypeCheck(oldChild, 'is$_NodeImpl'));
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,$.callTypeCheck(oldChild, 'is$_NodeImpl'));
},
 is$_NodeImpl: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('NodeFilter', [], {
 is$_NodeFilterImpl: function() { return true; },
 is$NodeFilter: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('NodeIterator', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('NodeList', ["_parent?", "length?"], {
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._parent.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._parent.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(collection, 'is$Collection')), t2 = this._parent; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._parent.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._parent.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.callTypeCheck(element, 'is$Node'), start, $.get$length(this));
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.UnsupportedOperationException$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$Node');
  throw $.$$throw($.UnsupportedOperationException$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 is$_NodeListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$NodeList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Notation', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Notification', [], {
 get$on: function() {
  return $._NotificationEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('NotificationCenter', [], {
 is$_NotificationCenterImpl: function() { return true; },
 is$NotificationCenter: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('OESStandardDerivatives', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('OESTextureFloat', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('OESVertexArrayObject', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLOListElement', ["type?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', ["height?", "name?", "type?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('OfflineAudioCompletionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLOptGroupElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', ["value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Oscillator', ["type?"], {
 noteOn$1: function(when) {
  return this.noteOn(when);
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLOutputElement', ["name?", "type?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('OverflowEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('PagePopupController', [], {
 is$_PagePopupControllerImpl: function() { return true; },
 is$PagePopupController: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('PageTransitionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLParagraphElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', ["name?", "type?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', [], {
 get$on: function() {
  return $._PeerConnection00EventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Performance', [], {
 is$_PerformanceImpl: function() { return true; },
 is$Performance: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('PerformanceNavigation', ["type?"], {
 is$_PerformanceNavigationImpl: function() { return true; },
 is$PerformanceNavigation: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('PerformanceTiming', [], {
 is$_PerformanceTimingImpl: function() { return true; },
 is$PerformanceTiming: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitPoint', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('PopStateEvent', ["state?"], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('PositionError', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLPreElement', ["width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLProgressElement', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ProgressEvent', ["loaded?"], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLQuoteElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('RGBColor', [], {
 is$_RGBColorImpl: function() { return true; },
 is$RGBColor: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RTCIceCandidate', [], {
 is$_RTCIceCandidateImpl: function() { return true; },
 is$RTCIceCandidate: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RTCIceCandidateEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RTCPeerConnection', [], {
 get$on: function() {
  return $._RTCPeerConnectionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RTCSessionDescription', ["type?"], {
 is$_RTCSessionDescriptionImpl: function() { return true; },
 is$RTCSessionDescription: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RadioNodeList', ["value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$NodeList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Range', [], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('RangeException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('RealtimeAnalyserNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Rect', ["left?", "top?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLError', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLException', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLResultSet', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLResultSetRowList', ["length?"], {
 is$_SQLResultSetRowListImpl: function() { return true; },
 is$SQLResultSetRowList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLTransaction', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLTransactionSync', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphDefElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphItemElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAngle', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$_SVGAngleImpl: function() { return true; },
 is$SVGAngle: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimateColorElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAnimateElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAnimateMotionElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAnimateTransformElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedAngle', [], {
 is$_SVGAnimatedAngleImpl: function() { return true; },
 is$SVGAnimatedAngle: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedBoolean', [], {
 is$_SVGAnimatedBooleanImpl: function() { return true; },
 is$SVGAnimatedBoolean: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedEnumeration', [], {
 is$_SVGAnimatedEnumerationImpl: function() { return true; },
 is$SVGAnimatedEnumeration: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedInteger', [], {
 is$_SVGAnimatedIntegerImpl: function() { return true; },
 is$SVGAnimatedInteger: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedLength', [], {
 is$_SVGAnimatedLengthImpl: function() { return true; },
 is$SVGAnimatedLength: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedLengthList', [], {
 is$_SVGAnimatedLengthListImpl: function() { return true; },
 is$SVGAnimatedLengthList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', [], {
 is$_SVGAnimatedNumberImpl: function() { return true; },
 is$SVGAnimatedNumber: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumberList', [], {
 is$_SVGAnimatedNumberListImpl: function() { return true; },
 is$SVGAnimatedNumberList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', [], {
 is$_SVGAnimatedPreserveAspectRatioImpl: function() { return true; },
 is$SVGAnimatedPreserveAspectRatio: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedRect', [], {
 is$_SVGAnimatedRectImpl: function() { return true; },
 is$SVGAnimatedRect: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedString', [], {
 is$_SVGAnimatedStringImpl: function() { return true; },
 is$SVGAnimatedString: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedTransformList', [], {
 is$_SVGAnimatedTransformListImpl: function() { return true; },
 is$SVGAnimatedTransformList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGCircleElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGClipPathElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGColor', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', ["type?"], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGCursorElement', ["x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGDefsElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGDescElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGDocument', [], {
 is$Document: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGElement', [], {
 get$id: function() {
return this.id;
},
 is$_SVGElementImpl: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGElementInstance', [], {
 get$on: function() {
  return $._SVGElementInstanceEventsImpl$(this);
},
 is$_SVGElementInstanceImpl: function() { return true; },
 is$SVGElementInstance: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGElementInstanceList', ["length?"], {
 is$_SVGElementInstanceListImpl: function() { return true; },
 is$SVGElementInstanceList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGEllipseElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGFEBlendElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEColorMatrixElement', ["type?", "height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEComponentTransferElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFECompositeElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEDisplacementMapElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEDistantLightElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEDropShadowElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEFloodElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncAElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncBElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncGElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncRElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEGaussianBlurElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEImageElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeNodeElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEMorphologyElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEOffsetElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEPointLightElement', ["x?", "y?"], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFESpecularLightingElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFESpotLightElement', ["x?", "y?"], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFETileElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFETurbulenceElement', ["type?", "height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFilterElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceFormatElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceNameElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceSrcElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceUriElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGForeignObjectElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGGElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGGlyphElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGGlyphRefElement', ["x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGGradientElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGHKernElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGImageElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGLength', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$_SVGLengthImpl: function() { return true; },
 is$SVGLength: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGLengthList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGLengthListImpl: function() { return true; },
 is$SVGLengthList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGLinearGradientElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGMPathElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGMarkerElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGMatrix', [], {
 translate$2: function(x, y) {
  return this.translate($.numTypeCheck(x, 'is$num'),$.numTypeCheck(y, 'is$num'));
},
 is$_SVGMatrixImpl: function() { return true; },
 is$SVGMatrix: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGMetadataElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGMissingGlyphElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGNumber', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGNumberList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGNumberListImpl: function() { return true; },
 is$SVGNumberList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPaint', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGPathSeg', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcAbs', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcRel', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegClosePath', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoAbs', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', ["x?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', ["x?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoRel', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', ["y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', ["y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGPathSegListImpl: function() { return true; },
 is$SVGPathSegList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoRel', ["x?", "y?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPatternElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGPoint', ["x?", "y?"], {
 is$_SVGPointImpl: function() { return true; },
 is$SVGPoint: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPointList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGPointListImpl: function() { return true; },
 is$SVGPointList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPolygonElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGPolylineElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGPreserveAspectRatio', [], {
 is$_SVGPreserveAspectRatioImpl: function() { return true; },
 is$SVGPreserveAspectRatio: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGRadialGradientElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGRect', ["height?", "width?", "x?", "y?"], {
 is$_SVGRectImpl: function() { return true; },
 is$SVGRect: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGRectElement', ["height?", "width?", "x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGRenderingIntent', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGSVGElement', ["height?", "width?", "x?", "y?"], {
 is$_SVGSVGElementImpl: function() { return true; },
 is$SVGSVGElement: function() { return true; },
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGScriptElement', ["type?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGSetElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGStopElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGStringList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGStringListImpl: function() { return true; },
 is$SVGStringList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', ["type?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGSwitchElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGSymbolElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTRefElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTSpanElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTextContentElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTextElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTextPathElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTextPositioningElement', ["x?", "y?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTitleElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTransform', ["type?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGTransformList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGTransformListImpl: function() { return true; },
 is$SVGTransformList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGUnitTypes', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGUseElement', ["height?", "width?", "x?", "y?"], {
 is$_SVGUseElementImpl: function() { return true; },
 is$SVGUseElement: function() { return true; },
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGVKernElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGViewElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGViewSpec', [], {
 is$_SVGViewSpecImpl: function() { return true; },
 is$SVGViewSpec: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGZoomEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Screen', ["height?", "width?"], {
 is$_ScreenImpl: function() { return true; },
 is$Screen: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLScriptElement', ["type?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ScriptProfile', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('ScriptProfileNode', [], {
 is$_ScriptProfileNodeImpl: function() { return true; },
 is$ScriptProfileNode: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLSelectElement', ["length?", "name?", "size?", "type?", "value?"], { set$length: function(v) { this.length = $.intTypeCheck(v, 'is$$int'); },
 set$size: function(v) { this.size = $.intTypeCheck(v, 'is$$int'); },
 set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SessionDescription', [], {
 is$_SessionDescriptionImpl: function() { return true; },
 is$SessionDescription: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLShadowElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SharedWorker', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SharedWorkerContext', ["name?"], {
 get$on: function() {
  return $._SharedWorkerContextEventsImpl$(this);
},
 is$WorkerContext: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SourceBuffer', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SourceBufferList', ["length?"], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_SourceBufferListImpl: function() { return true; },
 is$SourceBufferList: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', ["type?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechGrammarList', ["length?"], {
 is$_SpeechGrammarListImpl: function() { return true; },
 is$SpeechGrammarList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechInputResult', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', ["length?"], {
 is$_SpeechInputResultListImpl: function() { return true; },
 is$SpeechInputResultList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognition', [], {
 get$on: function() {
  return $._SpeechRecognitionEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionAlternative', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionError', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResult', ["length?"], {
 is$_SpeechRecognitionResultImpl: function() { return true; },
 is$SpeechRecognitionResult: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', ["length?"], {
 is$_SpeechRecognitionResultListImpl: function() { return true; },
 is$SpeechRecognitionResultList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Storage', [], {
 containsValue$1: function(value) {
  $.stringTypeCheck(value, 'is$String');
  return $.some(this.getValues$0(), new $._StorageImpl_containsValue_anon(value));
},
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1($.stringTypeCheck(key, 'is$String')) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1($.stringTypeCheck(key, 'is$String'));
},
 operator$indexSet$2: function(key, value) {
  return this.$dom_setItem$2($.stringTypeCheck(key, 'is$String'), $.stringTypeCheck(value, 'is$String'));
},
 putIfAbsent$2: function(key, ifAbsent) {
  $.stringTypeCheck(key, 'is$String');
  $.functionTypeCheck(ifAbsent, 'is$Function');
  if (!$.boolConversionCheck(this.containsKey$1(key), 'is$bool'))
    this.operator$indexSet$2(key, ifAbsent.call$0());
  return this.operator$index$1(key);
},
 remove$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  var value = this.operator$index$1(key);
  this.$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  for (var i = 0; true; ++i) {
    var key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 getKeys$0: function() {
  var keys = [];
  this.forEach$1(new $._StorageImpl_getKeys_anon(keys));
  return keys;
},
 getValues$0: function() {
  var values = [];
  this.forEach$1(new $._StorageImpl_getValues_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 isEmpty$0: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$_StorageImpl: function() { return true; },
 is$Storage: function() { return true; },
 is$Map: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('StorageEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('StorageInfo', [], {
 is$_StorageInfoImpl: function() { return true; },
 is$StorageInfo: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLStyleElement', ["type?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('StyleMedia', ["type?"], {
 is$_StyleMediaImpl: function() { return true; },
 is$StyleMedia: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('StyleSheet', ["type?"], {
 is$_StyleSheetImpl: function() { return true; },
 is$StyleSheet: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_StyleSheetImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'StyleSheet');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$StyleSheet');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$StyleSheet');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.callTypeCheck(element, 'is$StyleSheet'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$StyleSheet');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_StyleSheetListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$StyleSheetList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLTableCaptionElement', [], {
 is$_TableCaptionElementImpl: function() { return true; },
 is$TableCaptionElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', ["height?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', ["width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', ["width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', [], {
 is$_TableSectionElementImpl: function() { return true; },
 is$TableSectionElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Text', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', ["name?", "type?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('TextEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TextMetrics', ["width?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('TextTrack', [], {
 get$on: function() {
  return $._TextTrackEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_TextTrackImpl: function() { return true; },
 is$TextTrack: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TextTrackCue', ["id?", "size?", "text"], { set$size: function(v) { this.size = $.intTypeCheck(v, 'is$$int'); },
 set$text: function(v) { this.text = $.stringTypeCheck(v, 'is$String'); },

 get$on: function() {
  return $._TextTrackCueEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TextTrackCueList', ["length?"], {
 is$_TextTrackCueListImpl: function() { return true; },
 is$TextTrackCueList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TextTrackList', ["length?"], {
 get$on: function() {
  return $._TextTrackListEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$_TextTrackListImpl: function() { return true; },
 is$TextTrackList: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TimeRanges', ["length?"], {
 is$_TimeRangesImpl: function() { return true; },
 is$TimeRanges: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLTitleElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Touch', [], {
 is$_TouchImpl: function() { return true; },
 is$Touch: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TouchEvent', [], {
 is$TouchEvent: function() { return true; },
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TouchList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_TouchImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Touch');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Touch');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Touch');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.callTypeCheck(element, 'is$Touch'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$Touch');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_TouchListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$TouchList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('TrackEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitTransitionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TreeWalker', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('UIEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLUListElement', ["type?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Uint16Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.intTypeCheck(element, 'is$$int'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint32Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.intTypeCheck(element, 'is$$int'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC3);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC3);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 some$1: function(f) {
  return $._Collections_some(this, $.functionTypeCheck(f, 'is$Function'));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, $.intTypeCheck(element, 'is$$int'), start, $.get$length(this));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC5);
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  throw $.$$throw($.CTC39);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC31);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_Uint8ArrayImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Uint8Array: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', [], {
 is$_Uint8ClampedArrayImpl: function() { return true; },
 is$Uint8ClampedArray: function() { return true; },
 is$Uint8Array: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLUnknownElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ValidityState', [], {
 is$_ValidityStateImpl: function() { return true; },
 is$ValidityState: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLVideoElement', ["height?", "width?"], {
 is$MediaElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('WaveShaperNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WaveTable', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLActiveInfo', ["name?", "size?", "type?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLBuffer', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLCompressedTextureS3TC', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLContextAttributes', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLContextEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLDebugRendererInfo', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLDebugShaders', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLDepthTexture', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLFramebuffer', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLLoseContext', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLProgram', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLRenderbuffer', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLRenderingContext', [], {
 clear$1: function(mask) {
  return this.clear($.intTypeCheck(mask, 'is$$int'));
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLShader', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLShaderPrecisionFormat', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLTexture', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLUniformLocation', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLVertexArrayObjectOES', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitCSSFilterValue', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitNamedFlow', ["name?"], {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebSocket', [], {
 get$on: function() {
  return $._WebSocketEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WheelEvent', [], {
 is$MouseEvent: function() { return true; },
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMWindow', ["length?", "localStorage?", "name?"], {
 get$_top: function() {
return this.top;
},
 get$top: function() {
  return $._DOMWindowCrossFrameImpl__createSafe(this.get$_top());
},
 requestAnimationFrame$1: function(callback) {
  $.functionTypeCheck(callback, 'is$RequestAnimationFrameCallback');
  this._ensureRequestAnimationFrame$0();
  return this._requestAnimationFrame$1(callback);
},
 _requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 _ensureRequestAnimationFrame$0: function() {
   if (this.requestAnimationFrame && this.cancelAnimationFrame) return;
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !this.requestAnimationFrame; ++i) {
     this.requestAnimationFrame = this[vendors[i] + 'RequestAnimationFrame'];
     this.cancelAnimationFrame =
         this[vendors[i]+'CancelAnimationFrame'] ||
         this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if (this.requestAnimationFrame && this.cancelAnimationFrame) return;
   this.requestAnimationFrame = function(callback) {
       return window.setTimeout(callback, 16 /* 16ms ~= 60fps */);
   };
   this.cancelAnimationFrame = function(id) { clearTimeout(id); }

},
 get$on: function() {
  return $._WindowEventsImpl$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 clearInterval$1: function(handle) {
  return this.clearInterval($.intTypeCheck(handle, 'is$$int'));
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$TimeoutHandler'), 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$TimeoutHandler'), 0),timeout);
},
 is$_WindowImpl: function() { return true; },
 is$Window: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Worker', [], {
 get$on: function() {
  return $._WorkerEventsImpl$(this);
},
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WorkerContext', [], {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $._WorkerContextEventsImpl$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 clearInterval$1: function(handle) {
  return this.clearInterval($.intTypeCheck(handle, 'is$$int'));
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener($.stringTypeCheck(type, 'is$String'),$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$TimeoutHandler'), 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$TimeoutHandler'), 0),timeout);
},
 is$_WorkerContextImpl: function() { return true; },
 is$WorkerContext: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WorkerLocation', [], {
 toString$0: function() {
  return this.toString();
},
 is$_WorkerLocationImpl: function() { return true; },
 is$WorkerLocation: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WorkerNavigator', [], {
 is$_WorkerNavigatorImpl: function() { return true; },
 is$WorkerNavigator: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('XMLSerializer', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('XPathEvaluator', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('XPathException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('XPathExpression', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('XPathNSResolver', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('XPathResult', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('XSLTProcessor', [], {
 reset$0: function() {
  return this.reset();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('Worker', [], {
 get$id: function() {
return this.id;
},
 postMessage$1: function(msg) {
return this.postMessage(msg);
},
 is$_ManagerStub: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMWindow', [], {
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$_TimeoutHandler'), 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$_TimeoutHandler'), 0),timeout);
},
 clearInterval$1: function(handle) {
  return this.clearInterval($.intTypeCheck(handle, 'is$$int'));
}
});

// 521 dynamic classes.
// 522 classes
// 41 !leaf
(function(){
  var v0/*class(_Uint8ArrayImpl)*/ = 'Uint8Array|Uint8ClampedArray|Uint8ClampedArray';
  var v1/*class(_AudioSourceNodeImpl)*/ = 'AudioSourceNode|Oscillator|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode|Oscillator|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode';
  var v2/*class(_SVGColorImpl)*/ = 'SVGColor|SVGPaint|SVGPaint';
  var v3/*class(_CSSValueListImpl)*/ = 'CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSTransformValue';
  var v4/*class(_TextImpl)*/ = 'Text|CDATASection|CDATASection';
  var v5/*class(_SVGTextPositioningElementImpl)*/ = 'SVGTextPositioningElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement';
  var v6/*class(_SVGTextContentElementImpl)*/ = [v5/*class(_SVGTextPositioningElementImpl)*/,v5/*class(_SVGTextPositioningElementImpl)*/,'SVGTextContentElement|SVGTextPathElement|SVGTextPathElement'].join('|');
  var v7/*class(_SVGGradientElementImpl)*/ = 'SVGGradientElement|SVGRadialGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGLinearGradientElement';
  var v8/*class(_SVGComponentTransferFunctionElementImpl)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement';
  var v9/*class(_SVGAnimationElementImpl)*/ = 'SVGAnimationElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement';
  var v10/*class(_SVGElementImpl)*/ = [v6/*class(_SVGTextContentElementImpl)*/,v7/*class(_SVGGradientElementImpl)*/,v8/*class(_SVGComponentTransferFunctionElementImpl)*/,v9/*class(_SVGAnimationElementImpl)*/,v6/*class(_SVGTextContentElementImpl)*/,v7/*class(_SVGGradientElementImpl)*/,v8/*class(_SVGComponentTransferFunctionElementImpl)*/,v9/*class(_SVGAnimationElementImpl)*/,'SVGElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement'].join('|');
  var v11/*class(_MediaElementImpl)*/ = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLVideoElement|HTMLAudioElement';
  var v12/*class(_MouseEventImpl)*/ = 'MouseEvent|WheelEvent|WheelEvent';
  var v13/*class(_UIEventImpl)*/ = [v12/*class(_MouseEventImpl)*/,v12/*class(_MouseEventImpl)*/,'UIEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent'].join('|');
  var v14/*class(_ProgressEventImpl)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent|XMLHttpRequestProgressEvent';
  var v15/*class(_ElementImpl)*/ = [v10/*class(_SVGElementImpl)*/,v11/*class(_MediaElementImpl)*/,v10/*class(_SVGElementImpl)*/,v11/*class(_MediaElementImpl)*/,'Element|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement'].join('|');
  var v16/*class(_DocumentFragmentImpl)*/ = 'DocumentFragment|ShadowRoot|ShadowRoot';
  var v17/*class(_DocumentImpl)*/ = 'HTMLDocument|SVGDocument|SVGDocument';
  var v18/*class(_CharacterDataImpl)*/ = [v4/*class(_TextImpl)*/,v4/*class(_TextImpl)*/,'CharacterData|Comment|Comment'].join('|');
  var v19/*class(_WorkerContextImpl)*/ = 'WorkerContext|SharedWorkerContext|DedicatedWorkerContext|SharedWorkerContext|DedicatedWorkerContext';
  var v20/*class(_NodeImpl)*/ = [v15/*class(_ElementImpl)*/,v16/*class(_DocumentFragmentImpl)*/,v17/*class(_DocumentImpl)*/,v18/*class(_CharacterDataImpl)*/,v15/*class(_ElementImpl)*/,v16/*class(_DocumentFragmentImpl)*/,v17/*class(_DocumentImpl)*/,v18/*class(_CharacterDataImpl)*/,'Node|ProcessingInstruction|Notation|EntityReference|Entity|DocumentType|Attr|ProcessingInstruction|Notation|EntityReference|Entity|DocumentType|Attr'].join('|');
  var v21/*class(_MediaStreamImpl)*/ = 'MediaStream|LocalMediaStream|LocalMediaStream';
  var v22/*class(_IDBRequestImpl)*/ = 'IDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest';
  var v23/*class(_AbstractWorkerImpl)*/ = 'AbstractWorker|Worker|SharedWorker|Worker|SharedWorker';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['AbstractWorker', v23/*class(_AbstractWorkerImpl)*/],
    ['Uint8Array', v0/*class(_Uint8ArrayImpl)*/],
    ['ArrayBufferView', [v0/*class(_Uint8ArrayImpl)*/,v0/*class(_Uint8ArrayImpl)*/,'ArrayBufferView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView'].join('|')],
    ['AudioSourceNode', v1/*class(_AudioSourceNodeImpl)*/],
    ['AudioNode', [v1/*class(_AudioSourceNodeImpl)*/,v1/*class(_AudioSourceNodeImpl)*/,'AudioNode|WaveShaperNode|RealtimeAnalyserNode|JavaScriptAudioNode|DynamicsCompressorNode|DelayNode|ConvolverNode|BiquadFilterNode|AudioPannerNode|AudioGainNode|AudioDestinationNode|AudioChannelSplitter|AudioChannelMerger|WaveShaperNode|RealtimeAnalyserNode|JavaScriptAudioNode|DynamicsCompressorNode|DelayNode|ConvolverNode|BiquadFilterNode|AudioPannerNode|AudioGainNode|AudioDestinationNode|AudioChannelSplitter|AudioChannelMerger'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain|AudioGain'],
    ['Blob', 'Blob|File|File'],
    ['CSSRule', 'CSSRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule'],
    ['SVGColor', v2/*class(_SVGColorImpl)*/],
    ['CSSValueList', v3/*class(_CSSValueListImpl)*/],
    ['CSSValue', [v2/*class(_SVGColorImpl)*/,v3/*class(_CSSValueListImpl)*/,v2/*class(_SVGColorImpl)*/,v3/*class(_CSSValueListImpl)*/,'CSSValue|CSSPrimitiveValue|CSSPrimitiveValue'].join('|')],
    ['CanvasRenderingContext', 'CanvasRenderingContext|WebGLRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext|CanvasRenderingContext2D'],
    ['Text', v4/*class(_TextImpl)*/],
    ['CharacterData', v18/*class(_CharacterDataImpl)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList|DOMSettableTokenList'],
    ['HTMLDocument', v17/*class(_DocumentImpl)*/],
    ['DocumentFragment', v16/*class(_DocumentFragmentImpl)*/],
    ['SVGTextPositioningElement', v5/*class(_SVGTextPositioningElementImpl)*/],
    ['SVGTextContentElement', v6/*class(_SVGTextContentElementImpl)*/],
    ['SVGGradientElement', v7/*class(_SVGGradientElementImpl)*/],
    ['SVGComponentTransferFunctionElement', v8/*class(_SVGComponentTransferFunctionElementImpl)*/],
    ['SVGAnimationElement', v9/*class(_SVGAnimationElementImpl)*/],
    ['SVGElement', v10/*class(_SVGElementImpl)*/],
    ['HTMLMediaElement', v11/*class(_MediaElementImpl)*/],
    ['Element', v15/*class(_ElementImpl)*/],
    ['Entry', 'Entry|FileEntry|DirectoryEntry|FileEntry|DirectoryEntry'],
    ['EntrySync', 'EntrySync|FileEntrySync|DirectoryEntrySync|FileEntrySync|DirectoryEntrySync'],
    ['MouseEvent', v12/*class(_MouseEventImpl)*/],
    ['UIEvent', v13/*class(_UIEventImpl)*/],
    ['ProgressEvent', v14/*class(_ProgressEventImpl)*/],
    ['Event', [v13/*class(_UIEventImpl)*/,v14/*class(_ProgressEventImpl)*/,v13/*class(_UIEventImpl)*/,v14/*class(_ProgressEventImpl)*/,'Event|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBUpgradeNeededEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBUpgradeNeededEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent'].join('|')],
    ['WorkerContext', v19/*class(_WorkerContextImpl)*/],
    ['Node', v20/*class(_NodeImpl)*/],
    ['MediaStream', v21/*class(_MediaStreamImpl)*/],
    ['IDBRequest', v22/*class(_IDBRequestImpl)*/],
    ['EventTarget', [v19/*class(_WorkerContextImpl)*/,v20/*class(_NodeImpl)*/,v21/*class(_MediaStreamImpl)*/,v22/*class(_IDBRequestImpl)*/,v23/*class(_AbstractWorkerImpl)*/,v19/*class(_WorkerContextImpl)*/,v20/*class(_NodeImpl)*/,v21/*class(_MediaStreamImpl)*/,v22/*class(_IDBRequestImpl)*/,v23/*class(_AbstractWorkerImpl)*/,'EventTarget|DOMWindow|WebSocket|WebKitNamedFlow|TextTrackList|TextTrackCue|TextTrack|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext|DOMWindow|WebSocket|WebKitNamedFlow|TextTrackList|TextTrackCue|TextTrack|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue|IDBCursorWithValue'],
    ['NodeList', 'NodeList|RadioNodeList|RadioNodeList'],
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs'],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet|CSSStyleSheet']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  for (var cls in collectedClasses) {
    if (Object.prototype.hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    if (finishedClasses[cls]) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  var getter = new Function("{ return $." + fieldName + ";}");
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=sweeper_canvas.dart.js.map