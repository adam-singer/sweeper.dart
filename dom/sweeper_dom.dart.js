// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DateImplementation = {"":
 ["millisecondsSinceEpoch?", "isUtc"],
 "super": "Object",
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  var t1 = this.millisecondsSinceEpoch;
  var t2 = other.get$millisecondsSinceEpoch();
  return t1 == null ? t2 == null : t1 === t2;
},
 operator$lt$1: function(other) {
  $.propertyTypeCheck(other, 'is$Date');
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$le$1: function(other) {
  $.propertyTypeCheck(other, 'is$Date');
  return $.le(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  $.propertyTypeCheck(other, 'is$Date');
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  $.propertyTypeCheck(other, 'is$Date');
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 hashCode$0: function() {
  return this.millisecondsSinceEpoch;
},
 toString$0: function() {
  var t1 = new $.DateImplementation_toString_fourDigits();
  var t2 = new $.DateImplementation_toString_threeDigits();
  var t3 = new $.DateImplementation_toString_twoDigits();
  var y = $.stringTypeCheck(t1.call$1(this.get$year()), 'is$String');
  var m = $.stringTypeCheck(t3.call$1(this.get$month()), 'is$String');
  var d = $.stringTypeCheck(t3.call$1(this.get$day()), 'is$String');
  var h = $.stringTypeCheck(t3.call$1(this.get$hour()), 'is$String');
  var min = $.stringTypeCheck(t3.call$1(this.get$minute()), 'is$String');
  var sec = $.stringTypeCheck(t3.call$1(this.get$second()), 'is$String');
  var ms = $.stringTypeCheck(t2.call$1(this.get$millisecond()), 'is$String');
  if ($.boolConversionCheck(this.isUtc, 'is$bool'))
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms) + 'Z';
  else
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms);
},
 add$1: function(duration) {
  $.propertyTypeCheck(duration, 'is$Duration');
  return $.DateImplementation$fromMillisecondsSinceEpoch($.add($.intTypeCheck(this.millisecondsSinceEpoch, 'is$$int'), duration.get$inMilliseconds()), this.isUtc);
},
 difference$1: function(other) {
  $.propertyTypeCheck(other, 'is$Date');
  return $.DurationImplementation$(0, 0, 0, 0, $.sub($.intTypeCheck(this.millisecondsSinceEpoch, 'is$$int'), $.intTypeCheck(other.get$millisecondsSinceEpoch(), 'is$$int')));
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 DateImplementation$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.boolConversionCheck($.gt($.abs(t1), 8640000000000000), 'is$bool'))
    throw $.$$throw($.IllegalArgumentException$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.IllegalArgumentException$(t1));
},
 DateImplementation$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 is$Date: true,
 is$Object: function() { return true; }
};

$$.DurationImplementation = {"":
 ["inMilliseconds?"],
 "super": "Object",
 get$inHours: function() {
  return $.tdiv(this.inMilliseconds, 3600000);
},
 get$inMinutes: function() {
  return $.tdiv(this.inMilliseconds, 60000);
},
 get$inSeconds: function() {
  return $.tdiv(this.inMilliseconds, 1000);
},
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Duration))
    return false;
  var t1 = this.inMilliseconds;
  var t2 = other.get$inMilliseconds();
  return t1 == null ? t2 == null : t1 === t2;
},
 hashCode$0: function() {
  return $.hashCode(this.inMilliseconds);
},
 toString$0: function() {
  var t1 = new $.DurationImplementation_toString_threeDigits();
  var t2 = new $.DurationImplementation_toString_twoDigits();
  var t3 = this.inMilliseconds;
  if ($.boolConversionCheck($.lt(t3, 0), 'is$bool'))
    return '-' + $.S($.propertyTypeCheck($.DurationImplementation$(0, 0, 0, 0, $.neg(t3)), 'is$Duration'));
  var twoDigitMinutes = $.stringTypeCheck(t2.call$1($.remainder(this.get$inMinutes(), 60)), 'is$String');
  var twoDigitSeconds = $.stringTypeCheck(t2.call$1($.remainder(this.get$inSeconds(), 60)), 'is$String');
  var threeDigitMs = $.stringTypeCheck(t1.call$1($.remainder(t3, 1000)), 'is$String');
  return $.S(this.get$inHours()) + ':' + $.S(twoDigitMinutes) + ':' + $.S(twoDigitSeconds) + '.' + $.S(threeDigitMs);
},
 is$Duration: true,
 is$Object: function() { return true; }
};

$$.ExceptionImplementation = {"":
 ["_msg"],
 "super": "Object",
 toString$0: function() {
  var t1 = this._msg;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.FutureImpl = {"":
 ["_isComplete", "_lib0_value?", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (!$.boolConversionCheck(this.get$isComplete(), 'is$bool'))
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw(t1);
  return this._lib0_value;
},
 get$stackTrace: function() {
  if (!$.boolConversionCheck(this.get$isComplete(), 'is$bool'))
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return $.boolConversionCheck(this.get$isComplete(), 'is$bool') && this._exception == null;
},
 then$1: function(onSuccess) {
  $.functionTypeCheck(onSuccess, 'is$Function');
  if ($.boolConversionCheck(this.get$hasValue(), 'is$bool'))
    onSuccess.call$1(this.get$value());
  else {
    var t1 = $.boolConversionCheck(this.get$isComplete(), 'is$bool');
    if (typeof t1 !== 'boolean')
      return this.then$1$bailout(1, onSuccess, t1);
    if (!t1)
      this._successListeners.push(onSuccess);
    else {
      t1 = $.boolConversionCheck(this._exceptionHandled, 'is$bool');
      if (typeof t1 !== 'boolean')
        return this.then$1$bailout(2, t1, 0);
      if (!t1)
        throw $.$$throw(this._exception);
    }
  }
},
 then$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      var onSuccess = env0;
      t1 = env1;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state) {
    case 0:
      $.functionTypeCheck(onSuccess, 'is$Function');
    default:
      if (state === 0 && $.boolConversionCheck(this.get$hasValue(), 'is$bool'))
        onSuccess.call$1(this.get$value());
      else
        switch (state) {
          case 0:
            var t1 = $.boolConversionCheck(this.get$isComplete(), 'is$bool');
          case 1:
            state = 0;
          case 2:
            if (state === 0 && !t1)
              this._successListeners.push(onSuccess);
            else
              switch (state) {
                case 0:
                  t1 = $.boolConversionCheck(this._exceptionHandled, 'is$bool');
                case 2:
                  state = 0;
                  if (!t1)
                    throw $.$$throw(this._exception);
              }
        }
  }
},
 handleException$1: function(onException) {
  $.functionTypeCheck(onException, 'is$Function');
  if ($.boolConversionCheck(this._exceptionHandled, 'is$bool'))
    return;
  if ($.boolConversionCheck(this._isComplete, 'is$bool')) {
    var t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = $.boolTypeCheck(onException.call$1(t1), 'is$bool');
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function() {
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (var t1 = $.iterator(this._exceptionHandlers); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
        var handler = t1.next$0();
        if ($.boolConversionCheck($.eq(handler.call$1(this._exception), true), 'is$bool')) {
          this._exceptionHandled = true;
          break;
        }
      }
    if ($.boolConversionCheck(this.get$hasValue(), 'is$bool'))
      for (t1 = $.iterator(this._successListeners); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
        var listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if ($.boolConversionCheck(!$.boolConversionCheck(this._exceptionHandled, 'is$bool') && $.boolConversionCheck($.gt($.get$length(this._successListeners), 0), 'is$bool'), 'is$bool'))
      throw $.$$throw(this._exception);
  } finally {
    for (t1 = $.iterator(this._completionListeners); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
      var listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if ($.boolConversionCheck(this._isComplete, 'is$bool'))
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._lib0_value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.IllegalArgumentException$(null));
  if ($.boolConversionCheck(this._isComplete, 'is$bool'))
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
},
 is$FutureImpl: true,
 is$Future: true,
 is$Object: function() { return true; }
};

$$.CompleterImpl = {"":
 ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
},
 is$Completer: true,
 is$Object: function() { return true; }
};

$$.HashMapImplementation = {"":
 ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1 = $.hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1, 0, 0, 0);
  var t3 = $.get$length(this._keys);
  if (t3 !== (t3 | 0))
    return this._probeForAdding$1$bailout(2, key, t3, t1, 0, 0);
  var hash = (t1 & t3 - 1) >>> 0;
  for (var numberOfProbes = 1, insertionIndex = -1; true;) {
    var existingKey = $.index(this._keys, hash);
    if (existingKey == null) {
      if ($.boolConversionCheck($.lt(insertionIndex, 0), 'is$bool'))
        return hash;
      return insertionIndex;
    } else if ($.boolConversionCheck($.eq(existingKey, key), 'is$bool'))
      return hash;
    else if ($.boolConversionCheck($.lt(insertionIndex, 0), 'is$bool') && $.CTC15 === existingKey)
      insertionIndex = hash;
    var numberOfProbes0 = $.intTypeCheck($.add(numberOfProbes, 1), 'is$$int');
    if (numberOfProbes0 !== (numberOfProbes0 | 0))
      return this._probeForAdding$1$bailout(3, key, numberOfProbes0, insertionIndex, hash, numberOfProbes);
    hash = $.intTypeCheck($.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys)), 'is$$int');
    numberOfProbes = numberOfProbes0;
  }
},
 _probeForAdding$1$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var key = env0;
      t1 = env1;
      break;
    case 2:
      key = env0;
      t3 = env1;
      t1 = env2;
      break;
    case 3:
      key = env0;
      numberOfProbes0 = env1;
      insertionIndex = env2;
      hash = env3;
      numberOfProbes = env4;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.hashCode(key);
    case 1:
      state = 0;
      var t3 = $.get$length(this._keys);
    case 2:
      state = 0;
      $.intTypeCheck(t1, 'is$$int');
      $.intTypeCheck(t3, 'is$$int');
      var hash = $.intTypeCheck($.and(t1, $.sub(t3, 1)), 'is$$int');
      var numberOfProbes = 1;
      var insertionIndex = -1;
    case 3:
      L0:
        while (true)
          switch (state) {
            case 0:
              if (!true)
                break L0;
              var existingKey = $.index(this._keys, hash);
              if (existingKey == null) {
                if ($.boolConversionCheck($.lt(insertionIndex, 0), 'is$bool'))
                  return hash;
                return insertionIndex;
              } else if ($.boolConversionCheck($.eq(existingKey, key), 'is$bool'))
                return hash;
              else if ($.boolConversionCheck($.lt(insertionIndex, 0), 'is$bool') && $.CTC15 === existingKey)
                insertionIndex = hash;
              var numberOfProbes0 = $.intTypeCheck($.add(numberOfProbes, 1), 'is$$int');
            case 3:
              state = 0;
              hash = $.intTypeCheck($.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys)), 'is$$int');
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var t1 = $.hashCode(key);
  var t2 = $.get$length(this._keys);
  $.intTypeCheck(t1, 'is$$int');
  $.intTypeCheck(t2, 'is$$int');
  var hash = $.intTypeCheck($.and(t1, $.sub(t2, 1)), 'is$$int');
  for (var numberOfProbes = 1; true;) {
    var existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.boolConversionCheck($.eq(existingKey, key), 'is$bool'))
      return hash;
    var numberOfProbes0 = $.intTypeCheck($.add(numberOfProbes, 1), 'is$$int');
    hash = $.intTypeCheck($.HashMapImplementation__nextProbe(hash, numberOfProbes, $.get$length(this._keys)), 'is$$int');
    numberOfProbes = numberOfProbes0;
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries = $.intTypeCheck($.add(this._numberOfEntries, 1), 'is$$int');
  if ($.boolConversionCheck($.ge(newNumberOfEntries, this._loadLimit), 'is$bool')) {
    this._grow$1($.mul($.get$length(this._keys), 2));
    return;
  }
  var numberOfFree = $.intTypeCheck($.sub($.intTypeCheck($.sub($.intTypeCheck($.get$length(this._keys), 'is$$int'), newNumberOfEntries), 'is$$int'), this._numberOfDeleted), 'is$$int');
  if ($.boolConversionCheck($.gt(this._numberOfDeleted, numberOfFree), 'is$bool'))
    this._grow$1($.get$length(this._keys));
},
 _grow$1: function(newCapacity) {
  $.intTypeCheck(newCapacity, 'is$$int');
  $.assert($.eq($.and(newCapacity, $.sub(newCapacity, 1)), 0));
  var capacity = $.intTypeCheck($.get$length(this._keys), 'is$$int');
  if (capacity !== (capacity | 0))
    return this._grow$1$bailout(1, capacity, newCapacity);
  this._loadLimit = $.intTypeCheck($.tdiv($.mul(newCapacity, 3), 4), 'is$$int');
  var oldKeys = $.listTypeCheck(this._keys, 'is$List');
  var oldValues = $.listTypeCheck(this._values, 'is$List');
  this._keys = $.ListImplementation_List(newCapacity);
  var t2 = $.ListImplementation_List(newCapacity, $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(t2, { 'E': $.getRuntimeTypeInfo(this).V });
  this._values = t2;
  for (var i = 0; $.boolConversionCheck($.lt(i, capacity), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var key = $.index(oldKeys, i);
    if (key == null || key === $.CTC15)
      continue;
    var value = $.index(oldValues, i);
    var newIndex = $.intTypeCheck(this._probeForAdding$1(key), 'is$$int');
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 _grow$1$bailout: function(state, capacity, newCapacity) {
  this._loadLimit = $.intTypeCheck($.tdiv($.mul(newCapacity, 3), 4), 'is$$int');
  var oldKeys = $.listTypeCheck(this._keys, 'is$List');
  var oldValues = $.listTypeCheck(this._values, 'is$List');
  this._keys = $.ListImplementation_List(newCapacity);
  var t2 = $.ListImplementation_List(newCapacity, $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(t2, { 'E': $.getRuntimeTypeInfo(this).V });
  this._values = t2;
  for (var i = 0; $.boolConversionCheck($.lt(i, capacity), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var key = $.index(oldKeys, i);
    if (key == null || key === $.CTC15)
      continue;
    var value = $.index(oldValues, i);
    var newIndex = $.intTypeCheck(this._probeForAdding$1(key), 'is$$int');
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  var length$ = $.intTypeCheck($.get$length(this._keys), 'is$$int');
  if (length$ !== (length$ | 0))
    return this.clear$0$bailout(1, length$);
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 clear$0$bailout: function(state, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 operator$indexSet$2: function(key, value) {
  this._ensureCapacity$0();
  var index = $.intTypeCheck(this._probeForAdding$1(key), 'is$$int');
  if ($.index(this._keys, index) == null || $.index(this._keys, index) === $.CTC15) {
    var t1 = this._numberOfEntries;
    if (typeof t1 !== 'number')
      return this.operator$indexSet$2$bailout(1, index, value, key, t1);
    this._numberOfEntries = $.intTypeCheck(t1 + 1, 'is$$int');
  }
  $.indexSet(this._keys, index, key);
  $.indexSet(this._values, index, value);
},
 operator$indexSet$2$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      index = env0;
      var value = env1;
      var key = env2;
      t1 = env3;
      break;
  }
  switch (state) {
    case 0:
      this._ensureCapacity$0();
      var index = $.intTypeCheck(this._probeForAdding$1(key), 'is$$int');
    case 1:
      if (state === 1 || state === 0 && ($.index(this._keys, index) == null || $.index(this._keys, index) === $.CTC15))
        switch (state) {
          case 0:
            var t1 = this._numberOfEntries;
          case 1:
            state = 0;
            this._numberOfEntries = $.intTypeCheck($.add(t1, 1), 'is$$int');
        }
      $.indexSet(this._keys, index, key);
      $.indexSet(this._values, index, value);
  }
},
 operator$index$1: function(key) {
  var index = $.intTypeCheck(this._probeForLookup$1(key), 'is$$int');
  if ($.boolConversionCheck($.lt(index, 0), 'is$bool'))
    return;
  return $.index(this._values, index);
},
 remove$1: function(key) {
  var index = $.intTypeCheck(this._probeForLookup$1(key), 'is$$int');
  if ($.boolConversionCheck($.ge(index, 0), 'is$bool')) {
    this._numberOfEntries = $.intTypeCheck($.sub(this._numberOfEntries, 1), 'is$$int');
    var value = $.index(this._values, index);
    $.indexSet(this._values, index, null);
    $.indexSet(this._keys, index, $.CTC15);
    this._numberOfDeleted = $.intTypeCheck($.add(this._numberOfDeleted, 1), 'is$$int');
    return value;
  }
  return;
},
 isEmpty$0: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  var length$ = $.intTypeCheck($.get$length(this._keys), 'is$$int');
  if (length$ !== (length$ | 0))
    return this.forEach$1$bailout(1, f, length$);
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC15))
      f.call$2(key, $.index(this._values, i));
  }
},
 forEach$1$bailout: function(state, f, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC15))
      f.call$2(key, $.index(this._values, i));
  }
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).K);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).K });
  t1.i_10 = 0;
  this.forEach$1(new $.HashMapImplementation_getKeys__(list, t1));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).V });
  t1.i_1 = 0;
  this.forEach$1(new $.HashMapImplementation_getValues__(list, t1));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 HashMapImplementation$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $.HashMapImplementation__computeLoadLimit(8);
  this._keys = $.ListImplementation_List(8);
  var t1 = $.ListImplementation_List(8, $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(t1, { 'E': $.getRuntimeTypeInfo(this).V });
  this._values = t1;
},
 is$HashMap: true,
 is$Map: function() { return true; },
 is$Object: function() { return true; }
};

$$._DeletedKeySentinel = {"":
 [],
 "super": "Object",
 is$_DeletedKeySentinel: true
};

$$.KeyValuePair = {"":
 ["key?", "value="],
 "super": "Object",
 is$KeyValuePair: true
};

$$.LinkedHashMapImplementation = {"":
 ["_lib0_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  var t1 = this._map;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.operator$indexSet$2$bailout(1, key, value, t1);
  if ($.boolConversionCheck(t1.containsKey$1(key), 'is$bool')) {
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key].get$element().set$value(value);
  } else {
    var t2 = this._lib0_list;
    $.addLast(t2, $.KeyValuePair$(key, value, $.getRuntimeTypeInfo(this).K, $.getRuntimeTypeInfo(this).V));
    t2 = t2.lastEntry$0();
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1[key] = t2;
  }
},
 operator$indexSet$2$bailout: function(state, key, value, t1) {
  if ($.boolConversionCheck(t1.containsKey$1(key), 'is$bool'))
    $.index(t1, key).get$element().set$value(value);
  else {
    var t2 = this._lib0_list;
    $.addLast(t2, $.KeyValuePair$(key, value, $.getRuntimeTypeInfo(this).K, $.getRuntimeTypeInfo(this).V));
    $.indexSet(t1, key, t2.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.propertyTypeCheck($.index(this._map, key), 'is$DoubleLinkedQueueEntry');
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = $.propertyTypeCheck(this._map.remove$1(key), 'is$DoubleLinkedQueueEntry');
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 getKeys$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).K);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).K });
  t1.index_10 = 0;
  $.forEach(this._lib0_list, new $.LinkedHashMapImplementation_getKeys__(list, t1));
  $.assert($.eq(t1.index_10, $.get$length(this)));
  return list;
},
 getValues$0: function() {
  var t1 = {};
  var list = $.ListImplementation_List($.get$length(this), $.getRuntimeTypeInfo(this).V);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).V });
  t1.index_1 = 0;
  $.forEach(this._lib0_list, new $.LinkedHashMapImplementation_getValues__(list, t1));
  $.assert($.eq(t1.index_1, $.get$length(this)));
  return list;
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  $.forEach(this._lib0_list, new $.LinkedHashMapImplementation_forEach__(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 clear$0: function() {
  $.clear(this._map);
  $.clear(this._lib0_list);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 LinkedHashMapImplementation$0: function() {
  this._map = $.propertyTypeCheck($.HashMapImplementation$($.getRuntimeTypeInfo(this).K, 'DoubleLinkedQueueEntry<KeyValuePair<K, V>>'), 'is$HashMap');
  this._lib0_list = $.propertyTypeCheck($.DoubleLinkedQueue$('KeyValuePair<K, V>'), 'is$DoubleLinkedQueue');
},
 is$HashMap: true,
 is$Map: function() { return true; },
 is$Object: function() { return true; }
};

$$.DoubleLinkedQueueEntry = {"":
 ["_previous?", "_lib0_next?", "_lib0_element?"],
 "super": "Object",
 set$_previous: function(v) { this._previous = $.propertyTypeCheck(v, 'is$DoubleLinkedQueueEntry'); },
 set$_lib0_next: function(v) { this._lib0_next = $.propertyTypeCheck(v, 'is$DoubleLinkedQueueEntry'); },
 _link$2: function(p, n) {
  $.propertyTypeCheck(p, 'is$DoubleLinkedQueueEntry');
  $.propertyTypeCheck(n, 'is$DoubleLinkedQueueEntry');
  this._lib0_next = $.propertyTypeCheck(n, 'is$DoubleLinkedQueueEntry');
  this._previous = $.propertyTypeCheck(p, 'is$DoubleLinkedQueueEntry');
  p.set$_lib0_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e, $.getRuntimeTypeInfo(this).E)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._lib0_next;
  this._previous.set$_lib0_next(t1);
  t1 = this._previous;
  this._lib0_next.set$_previous(t1);
  this._lib0_next = null;
  this._previous = $.propertyTypeCheck(null, 'is$DoubleLinkedQueueEntry');
  return this._lib0_element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._lib0_element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._lib0_element = e;
},
 is$DoubleLinkedQueueEntry: true
};

$$._DoubleLinkedQueueEntrySentinel = {"":
 ["_previous", "_lib0_next", "_lib0_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.CTC33);
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.CTC33);
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
},
 is$_DoubleLinkedQueueEntrySentinel: true
};

$$.DoubleLinkedQueue = {"":
 ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this.addLast$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(collection, 'is$Collection')); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    this.add$1(t1.next$0());
},
 removeLast$0: function() {
  return this._sentinel.get$_previous().remove$0();
},
 removeFirst$0: function() {
  return this._sentinel.get$_lib0_next().remove$0();
},
 first$0: function() {
  return this._sentinel.get$_lib0_next().get$element();
},
 get$first: function() { return new $.BoundClosure(this, 'first$0'); },
 last$0: function() {
  return this._sentinel.get$_previous().get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length__(t1));
  return t1.counter_1;
},
 isEmpty$0: function() {
  var t1 = this._sentinel;
  var t2 = t1.get$_lib0_next();
  return t2 == null ? t1 == null : t2 === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1.set$_lib0_next(t1);
  t1.set$_previous(t1);
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  var t1 = this._sentinel;
  var entry = $.propertyTypeCheck(t1.get$_lib0_next(), 'is$DoubleLinkedQueueEntry');
  for (; !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = $.propertyTypeCheck(entry.get$_lib0_next(), 'is$DoubleLinkedQueueEntry');
    f.call$1(entry.get$_lib0_element());
    $.propertyTypeCheck(nextEntry, 'is$DoubleLinkedQueueEntry');
    entry = nextEntry;
  }
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  var other = $.propertyTypeCheck($.DoubleLinkedQueue$($.getRuntimeTypeInfo(this).E), 'is$Queue');
  var t1 = this._sentinel;
  var entry = $.propertyTypeCheck(t1.get$_lib0_next(), 'is$DoubleLinkedQueueEntry');
  for (; !(entry == null ? t1 == null : entry === t1);) {
    var nextEntry = $.propertyTypeCheck(entry.get$_lib0_next(), 'is$DoubleLinkedQueueEntry');
    if ($.boolConversionCheck(f.call$1(entry.get$_lib0_element()), 'is$bool'))
      other.addLast$1(entry.get$_lib0_element());
    $.propertyTypeCheck(nextEntry, 'is$DoubleLinkedQueueEntry');
    entry = nextEntry;
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel, $.getRuntimeTypeInfo(this).E);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $.propertyTypeCheck($._DoubleLinkedQueueEntrySentinel$($.getRuntimeTypeInfo(this).E), 'is$_DoubleLinkedQueueEntrySentinel');
},
 is$DoubleLinkedQueue: true,
 is$Queue: true,
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"":
 ["_sentinel", "_currentEntry"],
 "super": "Object",
 hasNext$0: function() {
  var t1 = this._currentEntry.get$_lib0_next();
  var t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC11);
  this._currentEntry = $.propertyTypeCheck(this._currentEntry.get$_lib0_next(), 'is$DoubleLinkedQueueEntry');
  return this._currentEntry.get$element();
},
 next$0$bailout: function(state, t1) {
  if (!t1)
    throw $.$$throw($.CTC11);
  this._currentEntry = $.propertyTypeCheck(this._currentEntry.get$_lib0_next(), 'is$DoubleLinkedQueueEntry');
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  $.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel');
  this._currentEntry = $.propertyTypeCheck(this._sentinel, 'is$DoubleLinkedQueueEntry');
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$.JSSyntaxRegExp = {"":
 ["_ignoreCase", "_multiLine", "_lib0_pattern"],
 "super": "Object",
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 get$pattern: function() {
  return this._lib0_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$RegExp: true,
 is$Object: function() { return true; }
};

$$.StringBufferImpl = {"":
 ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 isEmpty$0: function() {
  return this._length === 0;
},
 add$1: function(obj) {
  var str = $.stringTypeCheck($.toString(obj), 'is$String');
  if ($.boolConversionCheck(str == null || $.boolConversionCheck($.isEmpty(str), 'is$bool'), 'is$bool'))
    return this;
  $.add$1(this._buffer, str);
  var t1 = this._length;
  if (t1 !== (t1 | 0))
    return this.add$1$bailout(1, t1, str);
  var t3 = $.get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t1, t3);
  this._length = $.intTypeCheck(t1 + t3, 'is$$int');
  return this;
},
 add$1$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      str = env1;
      break;
    case 2:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      var str = $.stringTypeCheck($.toString(obj), 'is$String');
      if ($.boolConversionCheck(str == null || $.boolConversionCheck($.isEmpty(str), 'is$bool'), 'is$bool'))
        return this;
      $.add$1(this._buffer, str);
      var t1 = this._length;
    case 1:
      state = 0;
      var t3 = $.get$length(str);
    case 2:
      state = 0;
      this._length = $.intTypeCheck($.add(t1, t3), 'is$$int');
      return this;
  }
},
 addAll$1: function(objects) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(objects, 'is$Collection')); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  var t1 = $.ListImplementation_List(null, 'String');
  $.setRuntimeTypeInfo(t1, { 'E': 'String' });
  this._buffer = t1;
  this._length = 0;
  return this;
},
 toString$0: function() {
  if ($.get$length(this._buffer) === 0)
    return '';
  if ($.get$length(this._buffer) === 1)
    return $.index(this._buffer, 0);
  var t1 = this._buffer;
  $.listTypeCheck(t1, 'is$List');
  var result = $.stringJoinUnchecked($.StringImplementation__toJsStringArray(t1), '');
  $.clear(this._buffer);
  $.add$1(this._buffer, result);
  return result;
},
 StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
},
 is$StringBuffer: true,
 is$Object: function() { return true; }
};

$$.AssertionError = {"":
 [],
 "super": "Object",
 is$Object: function() { return true; }
};

$$.NoSuchMethodError = {"":
 ["_receiver", "_functionName", "_arguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var sb = $.propertyTypeCheck($.StringBufferImpl$(''), 'is$StringBuffer');
  for (var t1 = this._arguments, i = 0; $.boolConversionCheck($.lt(i, t1.length), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if ($.boolConversionCheck($.gt(i, 0), 'is$bool'))
      sb.add$1(', ');
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    sb.add$1(t1[i]);
  }
  t1 = this._existingArgumentNames;
  if (t1 == null)
    return 'NoSuchMethodError : method not found: \'' + $.S(this._functionName) + '\'\n' + 'Receiver: ' + this._receiver + '\n' + 'Arguments: [' + $.S(sb) + ']';
  else {
    var actualParameters = $.stringTypeCheck(sb.toString$0(), 'is$String');
    sb = $.propertyTypeCheck($.StringBufferImpl$(''), 'is$StringBuffer');
    for (i = 0; $.boolConversionCheck($.lt(i, $.get$length(t1)), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      if ($.boolConversionCheck($.gt(i, 0), 'is$bool'))
        sb.add$1(', ');
      sb.add$1($.index(t1, i));
    }
    var formalParameters = $.stringTypeCheck(sb.toString$0(), 'is$String');
    t1 = this._functionName;
    return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t1) + '\'\nReceiver: ' + this._receiver + '\n' + 'Tried calling: ' + $.S(t1) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t1) + '(' + $.S(formalParameters) + ')';
  }
},
 is$Object: function() { return true; }
};

$$.IndexOutOfRangeException = {"":
 ["_value?"],
 "super": "Object",
 toString$0: function() {
  return 'IndexOutOfRangeException: ' + $.S(this._value);
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.ObjectNotClosureException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Object is not closure';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.IllegalArgumentException = {"":
 ["_arg"],
 "super": "Object",
 toString$0: function() {
  return 'Illegal argument(s): ' + $.S(this._arg);
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.StackOverflowException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.FormatException = {"":
 ["message"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + $.S(this.message);
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.NullPointerException = {"":
 ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.NoMoreElementsException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'NoMoreElementsException';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.EmptyQueueException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'EmptyQueueException';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.UnsupportedOperationException = {"":
 ["_message"],
 "super": "Object",
 toString$0: function() {
  return 'UnsupportedOperationException: ' + this._message;
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.NotImplementedException = {"":
 ["_message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this._message;
  return !(t1 == null) ? 'NotImplementedException: ' + $.S(t1) : 'NotImplementedException';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.IllegalJSRegExpException = {"":
 ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.FutureNotCompleteException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.FutureAlreadyCompleteException = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.Object = {"":
 [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
},
 is$Object: function() { return true; }
};

$$.ListIterator = {"":
 ["i", "list"],
 "super": "Object",
 hasNext$0: function() {
  return $.lt(this.i, this.list.length);
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1, 0);
  if (!t1)
    throw $.$$throw($.NoMoreElementsException$());
  var value = this.list[this.i];
  t1 = this.i;
  if (t1 !== (t1 | 0))
    return this.next$0$bailout(2, value, t1);
  this.i = t1 + 1;
  return value;
},
 next$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      value = env0;
      t1 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
    case 1:
      state = 0;
      if (!t1)
        throw $.$$throw($.NoMoreElementsException$());
      var value = this.list[this.i];
      t1 = this.i;
    case 2:
      state = 0;
      this.i = $.intTypeCheck($.add(t1, 1), 'is$$int');
      return value;
  }
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$.StackTrace = {"":
 ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"":
 [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
},
 is$Function: true,
 is$Object: function() { return true; }
};

$$.TypeErrorImplementation = {"":
 ["msg"],
 "super": "Object",
 toString$0: function() {
  return this.msg;
},
 is$Object: function() { return true; }
};

$$.MetaInfo = {"":
 ["_tag?", "_tags", "_set?"],
 "super": "Object",
 is$MetaInfo: true
};

$$.FilteredElementList = {"":
 ["_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  return $.ListImplementation_List$from($.filter(this._childNodes, new $.FilteredElementList__filtered_anon()));
},
 get$first: function() {
  for (var t1 = $.iterator(this._childNodes); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    if (typeof t2 === 'object' && t2 !== null && t2.is$Element())
      return t2;
  }
  return;
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  $.forEach(this.get$_filtered(), f);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$Element');
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  $.intTypeCheck(newLength, 'is$$int');
  var len = $.get$length(this);
  if ($.boolConversionCheck($.ge(newLength, len), 'is$bool'))
    return;
  else if ($.boolConversionCheck($.lt(newLength, 0), 'is$bool'))
    throw $.$$throw($.CTC14);
  this.removeRange$2($.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Element');
  $.add$1(this._childNodes, value);
},
 get$add: function() { return new $.BoundClosure0(this, 'add$1'); },
 addAll$1: function(collection) {
  $.forEach($.listSuperNativeTypeCheck(collection, 'is$Collection'), this.get$add());
},
 addLast$1: function(value) {
  this.add$1($.callTypeCheck(value, 'is$Element'));
},
 removeRange$2: function(start, rangeLength) {
  $.intTypeCheck(start, 'is$$int');
  $.intTypeCheck(rangeLength, 'is$$int');
  $.forEach($.getRange(this.get$_filtered(), start, rangeLength), new $.FilteredElementList_removeRange_anon());
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  throw $.$$throw($.CTC22);
},
 clear$0: function() {
  $.clear(this._childNodes);
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    result.remove$0();
  return result;
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $.filter(this.get$_filtered(), f);
},
 isEmpty$0: function() {
  return $.isEmpty(this.get$_filtered());
},
 get$length: function() {
  return $.get$length(this.get$_filtered());
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  return $.iterator(this.get$_filtered());
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this.get$_filtered(), start, rangeLength);
},
 last$0: function() {
  return $.last(this.get$_filtered());
},
 is$ElementList: true,
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._ChildrenElementList = {"":
 ["_element?", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1 = this._childElements;
  var output = $.ListImplementation_List($.get$length(t1));
  var len = $.intTypeCheck($.get$length(t1), 'is$$int');
  if (len !== (len | 0))
    return this._toList$0$bailout(1, len, output, t1);
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var t2 = t1.operator$index$1(i);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state, len, output, t1) {
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var t2 = $.index(t1, i);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 get$first: function() {
  return this._element.get$$$dom_firstElementChild();
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  for (var t1 = $.iterator(this._childElements); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  var output = [];
  this.forEach$1(new $._ChildrenElementList_filter_anon(f, output));
  return $._FrozenElementList$_wrap(output);
},
 isEmpty$0: function() {
  return this._element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  return $.get$length(this._childElements);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  return $.index(this._childElements, index);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_ElementImpl');
  this._element.$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  $.intTypeCheck(newLength, 'is$$int');
  throw $.$$throw($.CTC13);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$_ElementImpl');
  this._element.$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  return this.add$1($.callTypeCheck(value, 'is$_ElementImpl'));
},
 iterator$0: function() {
  return $.iterator(this._toList$0());
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(collection, 'is$Collection')), t2 = this._element; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    t2.$dom_appendChild$1(t1.next$0());
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  throw $.$$throw($.CTC22);
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, rangeLength, []));
},
 clear$0: function() {
  this._element.set$text('');
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._element.$dom_removeChild$1(result);
  return result;
},
 last$0: function() {
  return this._element.get$$$dom_lastElementChild();
},
 is$ElementList: true,
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._FrozenElementList = {"":
 ["_nodeList"],
 "super": "Object",
 get$first: function() {
  return $.index(this._nodeList, 0);
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  var out = $._ElementList$([]);
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    if ($.boolConversionCheck(f.call$1(t2), 'is$bool'))
      out.add$1(t2);
  }
  return out;
},
 isEmpty$0: function() {
  return $.isEmpty(this._nodeList);
},
 get$length: function() {
  return $.get$length(this._nodeList);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  return $.index(this._nodeList, index);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$Element');
  throw $.$$throw($.CTC13);
},
 set$length: function(newLength) {
  $.intTypeCheck(newLength, 'is$$int');
  $.set$length(this._nodeList, newLength);
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Element');
  throw $.$$throw($.CTC13);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Element');
  throw $.$$throw($.CTC13);
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC13);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  throw $.$$throw($.CTC13);
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
},
 clear$0: function() {
  throw $.$$throw($.CTC13);
},
 removeLast$0: function() {
  throw $.$$throw($.CTC13);
},
 last$0: function() {
  return $.last(this._nodeList);
},
 is$_FrozenElementList: true,
 is$ElementList: true,
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._FrozenElementListIterator = {"":
 ["_list", "_index"],
 "super": "Object",
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1, 0);
  if (!t1)
    throw $.$$throw($.CTC11);
  t1 = this._list;
  var t2 = this._index;
  if (t2 !== (t2 | 0))
    return this.next$0$bailout(2, t1, t2);
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 next$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      t2 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
    case 1:
      state = 0;
      if (!t1)
        throw $.$$throw($.CTC11);
      t1 = this._list;
      var t2 = this._index;
    case 2:
      state = 0;
      this._index = $.intTypeCheck($.add(t2, 1), 'is$$int');
      return $.index(t1, t2);
  }
},
 hasNext$0: function() {
  return $.lt(this._index, $.get$length(this._list));
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$._ElementList = {"":
 ["_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  return $._ElementList$($._ListWrapper.prototype.filter$1.call(this, $.functionTypeCheck(f, 'is$Function')));
},
 getRange$2: function(start, rangeLength) {
  return $._ElementList$($._ListWrapper.prototype.getRange$2.call(this, start, rangeLength));
},
 is$ElementList: true,
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._ChildNodeListLazy = {"":
 ["_this"],
 "super": "Object",
 get$first: function() {
  return this._this.firstChild;
},
 last$0: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._this.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._this.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(collection, 'is$Collection')), t2 = this._this; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._this.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.set$text('');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._this.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  return $.iterator(this._this.get$$$dom_childNodes());
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$Node');
  throw $.$$throw($.UnsupportedOperationException$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 get$length: function() {
  return $.get$length(this._this.get$$$dom_childNodes());
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  return $.index(this._this.get$$$dom_childNodes(), index);
},
 is$NodeList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._ListWrapper = {"":
 [],
 "super": "Object",
 iterator$0: function() {
  return $.iterator(this._list);
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $.forEach(this._list, f);
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $.filter(this._list, f);
},
 isEmpty$0: function() {
  return $.isEmpty(this._list);
},
 get$length: function() {
  return $.get$length(this._list);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  return $.index(this._list, index);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.indexSet(this._list, index, value);
},
 set$length: function(newLength) {
  $.intTypeCheck(newLength, 'is$$int');
  $.set$length(this._list, newLength);
},
 add$1: function(value) {
  return $.add$1(this._list, value);
},
 addLast$1: function(value) {
  return $.addLast(this._list, value);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  return $.addAll(this._list, collection);
},
 clear$0: function() {
  return $.clear(this._list);
},
 removeLast$0: function() {
  return $.removeLast(this._list);
},
 last$0: function() {
  return $.last(this._list);
},
 getRange$2: function(start, rangeLength) {
  return $.getRange(this._list, start, rangeLength);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  return $.insertRange$3(this._list, start, rangeLength, initialValue);
},
 get$first: function() {
  return $.index(this._list, 0);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._NodeListWrapper = {"":
 ["_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._NodeListWrapper$($.filter(this._list, f));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($.getRange(this._list, start, rangeLength));
},
 is$NodeList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._FixedSizeListIterator = {"":
 ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 hasNext$0: function() {
  return $.gt(this._lib_length, this._pos);
}
};

$$._VariableSizeListIterator = {"":
 [],
 "super": "Object",
 hasNext$0: function() {
  var t1 = $.get$length(this._array);
  if (typeof t1 !== 'number')
    return this.hasNext$0$bailout(1, t1, 0);
  var t3 = this._pos;
  if (t3 !== (t3 | 0))
    return this.hasNext$0$bailout(2, t3, t1);
  return t1 > t3;
},
 hasNext$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env0;
      t1 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.get$length(this._array);
    case 1:
      state = 0;
      var t3 = this._pos;
    case 2:
      state = 0;
      return $.gt(t1, t3);
  }
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1, 0);
  if (!t1)
    throw $.$$throw($.CTC11);
  t1 = this._array;
  if (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior())
    return this.next$0$bailout(2, t1, 0);
  var t3 = this._pos;
  if (t3 !== (t3 | 0))
    return this.next$0$bailout(3, t1, t3);
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state, env0, env1) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
    case 3:
      t1 = env0;
      t3 = env1;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
    case 1:
      state = 0;
      if (!t1)
        throw $.$$throw($.CTC11);
      t1 = this._array;
    case 2:
      state = 0;
      var t3 = this._pos;
    case 3:
      state = 0;
      this._pos = $.intTypeCheck($.add(t3, 1), 'is$$int');
      return $.index(t1, t3);
  }
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$._Manager = {"":
 ["nextIsolateId?", "currentManagerId?", "nextManagerId", "currentContext?", "rootContext?", "topEventLoop?", "fromCommandLine?", "isWorker?", "supportsWorkers", "isolates?", "mainManager?", "managers?"],
 "super": "Object",
 set$nextIsolateId: function(v) { this.nextIsolateId = $.intTypeCheck(v, 'is$$int'); },
 set$currentContext: function(v) { this.currentContext = $.propertyTypeCheck(v, 'is$_IsolateContext'); },
 set$rootContext: function(v) { this.rootContext = $.propertyTypeCheck(v, 'is$_IsolateContext'); },
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
    this.isWorker = $isWorker;
    this.supportsWorkers = $supportsWorkers;
    this.fromCommandLine = typeof(window) == 'undefined';
  
},
 _nativeInitWorkerMessageHandler$0: function() {
    $globalThis.onmessage = function (e) {
      _IsolateNatives._processWorkerMessage(this.mainManager, e);
    }
  
},
 maybeCloseWorker$0: function() {
  if ($.boolConversionCheck($.isEmpty(this.isolates), 'is$bool'))
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.callTypeCheck($.HashMapImplementation$('int', '_IsolateContext'), 'is$Map');
  this.managers = $.callTypeCheck($.HashMapImplementation$('int', '_ManagerStub'), 'is$Map');
  if ($.boolConversionCheck(this.isWorker, 'is$bool')) {
    this.mainManager = $.callTypeCheck($._MainManagerStub$(), 'is$_ManagerStub');
    this._nativeInitWorkerMessageHandler$0();
  }
},
 is$_Manager: true
};

$$._IsolateContext = {"":
 ["id?", "ports?", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
$initGlobals(this);
},
 eval$1: function(code) {
  $.functionTypeCheck(code, 'is$Function');
  var old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  var result = null;
  try {
    result = code.call$0();
  } finally {
    var t1 = old;
    $._globalState().set$currentContext(t1);
    t1 = old;
    if (!(t1 == null))
      t1._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
$setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  $.intTypeCheck(portId, 'is$$int');
  $.propertyTypeCheck(port, 'is$ReceivePort');
  var t1 = this.ports;
  if ($.boolConversionCheck(t1.containsKey$1(portId), 'is$bool'))
    throw $.$$throw($.ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(t1, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  $.intTypeCheck(portId, 'is$$int');
  var t1 = this.ports;
  t1.remove$1(portId);
  if ($.boolConversionCheck($.isEmpty(t1), 'is$bool'))
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1 = $._globalState();
  var t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = $.intTypeCheck(t2, 'is$$int');
  this.ports = $.callTypeCheck($.HashMapImplementation$('int', 'ReceivePort'), 'is$Map');
  this.initGlobals$0();
},
 is$_IsolateContext: true
};

$$._EventLoop = {"":
 ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.boolConversionCheck($.isEmpty(t1), 'is$bool'))
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($.boolConversionCheck($._globalState().get$isWorker(), 'is$bool'))
      $._globalState().maybeCloseWorker$0();
    else {
      if (!($._globalState().get$rootContext() == null)) {
        if ($.boolConversionCheck($._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()), 'is$bool'))
          var t1 = $.boolConversionCheck($.boolConversionCheck($._globalState().get$fromCommandLine(), 'is$bool') && $.boolConversionCheck($.isEmpty($._globalState().get$rootContext().get$ports()), 'is$bool'), 'is$bool');
        else
          t1 = false;
        $.boolConversionCheck(t1, 'is$bool');
      } else
        t1 = false;
      if ($.boolConversionCheck(t1, 'is$bool'))
        throw $.$$throw($.ExceptionImplementation$('Program exited with open ReceivePorts.'));
    }
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; $.boolConversionCheck(this.runIteration$0(), 'is$bool');)
      ;
},
 run$0: function() {
  if (!$.boolConversionCheck($._globalState().get$isWorker(), 'is$bool'))
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      var t1 = $.unwrapException(exception);
      var e = t1;
      var trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

},
 is$_EventLoop: true
};

$$._IsolateEvent = {"":
 ["isolate", "fn", "message"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"":
 [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
$globalThis.postMessage(msg);
},
 is$_ManagerStub: function() { return true; },
 is$Object: function() { return true; }
};

$$._BaseSendPort = {"":
 ["_isolateId?"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  if (!(replyTo == null))
    var t1 = $.boolConversionCheck(!(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort), 'is$bool');
  else
    t1 = false;
  if ($.boolConversionCheck(t1, 'is$bool'))
    throw $.$$throw($.ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer = $.CompleterImpl$();
  var port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(port, completer));
  return completer.get$future();
},
 is$SendPort: true,
 is$Object: function() { return true; }
};

$$._NativeJsSendPort = {"":
 ["_receivePort?", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.boolConversionCheck($.eq(this._receivePort, other._receivePort), 'is$bool');
},
 hashCode$0: function() {
  return this._receivePort.get$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true,
 is$Object: function() { return true; }
};

$$._WorkerSendPort = {"":
 ["_workerId?", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $.propertyTypeCheck(replyTo, 'is$SendPort');
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
},
 operator$eq$1: function(other) {
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort) {
    var t1 = this._workerId;
    var t2 = other._workerId;
    if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
      t1 = this._isolateId;
      t2 = other._isolateId;
      if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
        t1 = this._receivePortId;
        t2 = other._receivePortId;
        t2 = $.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool');
        t1 = t2;
      } else
        t1 = false;
      $.boolConversionCheck(t1, 'is$bool');
    } else
      t1 = false;
    $.boolConversionCheck(t1, 'is$bool');
  } else
    t1 = false;
  return t1;
},
 hashCode$0: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true,
 is$Object: function() { return true; }
};

$$._ReceivePortImpl = {"":
 ["_id?", "_callback?"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = $.functionTypeCheck($.functionTypeCheck(onMessage, 'is$Function'), 'is$Function');
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._id, this);
},
 is$_ReceivePortImpl: true,
 is$ReceivePort: true,
 is$Object: function() { return true; }
};

$$._PendingSendPortFinder = {"":
 ["ports?", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  $.listTypeCheck(list, 'is$List');
  var t1 = this._visited;
  if (!($.index(t1, list) == null))
    return;
  $.indexSet(t1, list, true);
  $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  $.callTypeCheck(map, 'is$Map');
  var t1 = this._visited;
  if (!($.index(t1, map) == null))
    return;
  $.indexSet(t1, map, true);
  $.forEach(map.getValues$0(), new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._visited = $.propertyTypeCheck($._JsVisitedMap$(), 'is$_MessageTraverserVisitedMap');
}
};

$$._JsSerializer = {"":
 ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  $.propertyTypeCheck(x, 'is$SendPort');
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
},
 visitWorkerSendPort$1: function(port) {
  return ['sendport', port._workerId, port._isolateId, port._receivePortId];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $.propertyTypeCheck($._JsVisitedMap$(), 'is$_MessageTraverserVisitedMap');
}
};

$$._JsCopier = {"":
 ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  $.propertyTypeCheck(x, 'is$SendPort');
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $.propertyTypeCheck($._JsVisitedMap$(), 'is$_MessageTraverserVisitedMap');
}
};

$$._JsDeserializer = {"":
 ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  $.listTypeCheck(x, 'is$List');
  var managerId = $.intTypeCheck($.index(x, 1), 'is$$int');
  var isolateId = $.intTypeCheck($.index(x, 2), 'is$$int');
  var receivePortId = $.intTypeCheck($.index(x, 3), 'is$$int');
  var t1 = $._globalState().get$currentManagerId();
  if (managerId == null ? t1 == null : managerId === t1) {
    var isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"":
 ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return this._getAttachedInfo$1(object);
},
 operator$indexSet$2: function(object, info) {
  $.add$1(this.tagged, object);
  this._setAttachedInfo$2(object, info);
},
 reset$0: function() {
  $.assert(this.tagged == null);
  this.tagged = $.ListImplementation_List(null);
},
 cleanup$0: function() {
  var length$ = $.intTypeCheck($.get$length(this.tagged), 'is$$int');
  if (length$ !== (length$ | 0))
    return this.cleanup$0$bailout(1, length$);
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 cleanup$0$bailout: function(state, length$) {
  var i = 0;
  for (; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    this._clearAttachedInfo$1($.index(this.tagged, i));
  this.tagged = null;
},
 _clearAttachedInfo$1: function(o) {
o['__MessageTraverser__attached_info__'] = (void 0);
},
 _setAttachedInfo$2: function(o, info) {
o['__MessageTraverser__attached_info__'] = info;
},
 _getAttachedInfo$1: function(o) {
return o['__MessageTraverser__attached_info__'];
},
 is$_MessageTraverserVisitedMap: true,
 is$Object: function() { return true; }
};

$$._MessageTraverserVisitedMap = {"":
 [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
},
 is$_MessageTraverserVisitedMap: true
};

$$._MessageTraverser = {"":
 [],
 "super": "Object",
 traverse$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  var t1 = this._visited;
  t1.reset$0();
  var result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    t1.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if ($._MessageTraverser_isPrimitive(x))
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"":
 [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  $.listTypeCheck(list, 'is$List');
  var t1 = this._visited;
  var copy = $.listTypeCheck(t1.operator$index$1(list), 'is$List');
  if (!(copy == null))
    return copy;
  var len = $.intTypeCheck($.get$length(list), 'is$$int');
  if (len !== (len | 0))
    return this.visitList$1$bailout(1, len, list, t1);
  copy = $.ListImplementation_List(len);
  t1.operator$indexSet$2(list, copy);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitList$1$bailout: function(state, len, list, t1) {
  var copy = $.ListImplementation_List(len);
  $.indexSet(t1, list, copy);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1 = {};
  $.callTypeCheck(map, 'is$Map');
  var t2 = this._visited;
  t1.copy_10 = $.callTypeCheck($.index(t2, map), 'is$Map');
  var t3 = t1.copy_10;
  if (!(t3 == null))
    return t3;
  t1.copy_10 = $.callTypeCheck($.HashMapImplementation$(), 'is$Map');
  $.indexSet(t2, map, t1.copy_10);
  $.forEach(map, new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"":
 [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  $.listTypeCheck(list, 'is$List');
  var t1 = this._visited;
  var copyId = $.intTypeCheck($.index(t1, list), 'is$$int');
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = $.intTypeCheck($.add(id, 1), 'is$$int');
  $.intTypeCheck(id, 'is$$int');
  $.indexSet(t1, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  $.callTypeCheck(map, 'is$Map');
  var t1 = this._visited;
  var copyId = $.intTypeCheck($.index(t1, map), 'is$$int');
  if (!(copyId == null))
    return ['ref', copyId];
  var id = this._nextFreeRefId;
  this._nextFreeRefId = $.intTypeCheck($.add(id, 1), 'is$$int');
  $.intTypeCheck(id, 'is$$int');
  $.indexSet(t1, map, id);
  return ['map', id, this._serializeList$1(map.getKeys$0()), this._serializeList$1(map.getValues$0())];
},
 _serializeList$1: function(list) {
  $.listTypeCheck(list, 'is$List');
  var len = $.intTypeCheck($.get$length(list), 'is$$int');
  if (len !== (len | 0))
    return this._serializeList$1$bailout(1, list, len);
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
},
 _serializeList$1$bailout: function(state, list, len) {
  var result = $.ListImplementation_List(len);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var t1 = this._dispatch$1($.index(list, i));
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"":
 [],
 "super": "Object",
 deserialize$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  this._deserialized = $.callTypeCheck($.HashMapImplementation$(), 'is$Map');
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if ($._Deserializer_isPrimitive(x))
    return x;
  $.assert(typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()));
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.intTypeCheck($.index($.listTypeCheck(x, 'is$List'), 1), 'is$$int');
  var result = $.index(this._deserialized, id);
  $.assert(!(result == null));
  return result;
},
 _deserializeList$1: function(x) {
  $.listTypeCheck(x, 'is$List');
  var id = $.intTypeCheck($.index(x, 1), 'is$$int');
  var dartList = $.listTypeCheck($.index(x, 2), 'is$List');
  $.indexSet(this._deserialized, id, dartList);
  var len = $.intTypeCheck($.get$length(dartList), 'is$$int');
  if (len !== (len | 0))
    return this._deserializeList$1$bailout(1, len, dartList);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeList$1$bailout: function(state, len, dartList) {
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  $.listTypeCheck(x, 'is$List');
  var result = $.callTypeCheck($.HashMapImplementation$(), 'is$Map');
  var id = $.intTypeCheck($.index(x, 1), 'is$$int');
  $.indexSet(this._deserialized, id, result);
  var keys = $.listTypeCheck($.index(x, 2), 'is$List');
  var values = $.listTypeCheck($.index(x, 3), 'is$List');
  var len = $.intTypeCheck($.get$length(keys), 'is$$int');
  if (len !== (len | 0))
    return this._deserializeMap$1$bailout(1, len, keys, values, result);
  $.assert(len === $.get$length(values));
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
  return result;
},
 _deserializeMap$1$bailout: function(state, len, keys, values, result) {
  var t2 = $.get$length(values);
  $.assert(len == null ? t2 == null : len === t2);
  for (var i = 0; $.boolConversionCheck($.lt(i, len), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    result.operator$indexSet$2(this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
  return result;
},
 deserializeObject$1: function(x) {
  $.listTypeCheck(x, 'is$List');
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"":
 ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  $.intTypeCheck(milliSeconds, 'is$$int');
  $.functionTypeCheck(callback, 'is$Function');
  this._handle = $.intTypeCheck($._window().setInterval$2(new $.anon1(this, callback), milliSeconds), 'is$$int');
},
 _Timer$2: function(milliSeconds, callback) {
  $.intTypeCheck(milliSeconds, 'is$$int');
  $.functionTypeCheck(callback, 'is$Function');
  this._handle = $.intTypeCheck($._window().setTimeout$2(new $.anon0(this, callback), milliSeconds), 'is$$int');
},
 is$Object: function() { return true; }
};

$$._Random = {"":
 [],
 "super": "Object",
 nextInt$1: function(max) {
  if (max < 0)
    throw $.$$throw($.IllegalArgumentException$('negative max: ' + $.S(max)));
  if (max > 4294967295)
    max = 4294967295;
  return (Math.random() * max) >>> 0;
},
 is$Object: function() { return true; }
};

$$.Field = {"":
 ["mineCount?", "_adjacents", "width", "height", "_source"],
 "super": "Array2d",
 getAdjacentCount$2: function(x, y) {
  if ($.boolConversionCheck(this.get$2(x, y), 'is$bool'))
    return;
  var t1 = this._adjacents;
  var val = $.intTypeCheck(t1.get$2(x, y), 'is$$int');
  if (val == null) {
    for (var t2 = $.iterator(this.getAdjacentIndices$2(x, y)), val = 0; $.boolConversionCheck(t2.hasNext$0(), 'is$bool');)
      if ($.boolConversionCheck(this.operator$index$1(t2.next$0()), 'is$bool')) {
        val = $.intTypeCheck($.add(val, 1), 'is$$int');
        if (val !== (val | 0))
          return this.getAdjacentCount$2$bailout(1, x, y, t2, val, t1);
      }
    t1.set$3(x, y, val);
  }
  return val;
},
 getAdjacentCount$2$bailout: function(state, env0, env1, env2, env3, env4) {
  switch (state) {
    case 1:
      var x = env0;
      var y = env1;
      t2 = env2;
      val = env3;
      t1 = env4;
      break;
  }
  switch (state) {
    case 0:
      if ($.boolConversionCheck(this.get$2(x, y), 'is$bool'))
        return;
      var t1 = this._adjacents;
      var val = $.intTypeCheck(t1.get$2(x, y), 'is$$int');
    case 1:
      if (state === 1 || state === 0 && val == null)
        switch (state) {
          case 0:
            var t2 = $.iterator(this.getAdjacentIndices$2(x, y));
            val = 0;
          case 1:
            L0:
              while (true)
                switch (state) {
                  case 0:
                    if (!$.boolConversionCheck(t2.hasNext$0(), 'is$bool'))
                      break L0;
                  case 1:
                    if (state === 1 || state === 0 && $.boolConversionCheck(this.operator$index$1(t2.next$0()), 'is$bool'))
                      switch (state) {
                        case 0:
                          val = $.intTypeCheck($.add(val, 1), 'is$$int');
                        case 1:
                          state = 0;
                      }
                }
            t1.set$3(x, y, val);
        }
      return val;
  }
},
 Field$_internal$3: function(mineCount, cols, source) {
  $.intTypeCheck(cols, 'is$$int');
  $.propertyTypeCheck(source, 'is$ReadOnlyCollection');
  $.assert($.gt(this.width, 0));
  $.assert($.gt(this.height, 0));
  var t1 = this.mineCount;
  $.assert($.gt(t1, 0));
  $.assert($.lt(t1, $.get$length(this)));
  for (var t2 = $.iterator(this), count = 0; $.boolConversionCheck(t2.hasNext$0(), 'is$bool');)
    if ($.boolConversionCheck(t2.next$0(), 'is$bool'))
      count = $.intTypeCheck($.add(count, 1), 'is$$int');
  $.assert(count == null ? t1 == null : count === t1);
},
 is$Field: true
};

$$.Game = {"":
 ["field?", "_states", "_updatedEvent", "_gameStateEvent", "_state", "_minesLeft", "_revealsLeft", "_startTime", "_endTime"],
 "super": "Object",
 get$minesLeft: function() {
  return this._minesLeft;
},
 get$state: function() {
  return this._state;
},
 get$updated: function() {
  return this._updatedEvent;
},
 get$stateChanged: function() {
  return this._gameStateEvent;
},
 getSquareState$2: function(x, y) {
  return this._states.get$2(x, y);
},
 get$gameEnded: function() {
  return $.boolConversionCheck($.eq(this._state, $.CTC28), 'is$bool') || $.boolConversionCheck($.eq(this._state, $.CTC29), 'is$bool');
},
 get$duration: function() {
  if (this._startTime == null) {
    $.assert($.eq(this.get$state(), $.CTC19));
    return;
  } else {
    $.assert($.eq($.eq(this.get$state(), $.CTC20), this._endTime == null));
    var end = this._endTime;
    if (end == null)
      end = $.DateImplementation$now();
    return end.difference$1(this._startTime);
  }
},
 setFlag$3: function(x, y, value) {
  this._ensureStarted$0();
  $.assert(true);
  var t1 = this._states;
  var currentSS = t1.get$2(x, y);
  if (value) {
    $.require($.eq(currentSS, $.CTC17), '');
    t1.set$3(x, y, $.CTC18);
    this._minesLeft = $.intTypeCheck($.sub(this._minesLeft, 1), 'is$$int');
  } else {
    $.require($.eq(currentSS, $.CTC18), '');
    t1.set$3(x, y, $.CTC17);
    this._minesLeft = $.intTypeCheck($.add(this._minesLeft, 1), 'is$$int');
  }
  this._lib2_update$0();
},
 canReveal$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  this._ensureStarted$0();
  if ($.boolConversionCheck($.eq(this._states.get$2(x, y), $.CTC17), 'is$bool'))
    return true;
  else if ($.boolConversionCheck(this._canChord$2(x, y), 'is$bool'))
    return true;
  return false;
},
 reveal$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  this._ensureStarted$0();
  $.require(this.canReveal$2(x, y), 'Item cannot be revealed.');
  if ($.boolConversionCheck($.eq(this._states.get$2(x, y), $.CTC17), 'is$bool'))
    if ($.boolConversionCheck(this.field.get$2(x, y), 'is$bool')) {
      this._setLost$0();
      var reveals = [];
    } else
      reveals = $.listTypeCheck(this._doReveal$2(x, y), 'is$List');
  else
    reveals = $.boolConversionCheck(this._canChord$2(x, y), 'is$bool') ? $.listTypeCheck(this._doChord$2(x, y), 'is$List') : null;
  this._lib2_update$0();
  if ($.boolConversionCheck($.eq(this._state, $.CTC29), 'is$bool'))
    return;
  else
    return reveals;
},
 _canChord$2: function(x, y) {
  if ($.boolConversionCheck($.eq(this._states.get$2(x, y), $.CTC16), 'is$bool')) {
    var adjCount = this.field.getAdjacentCount$2(x, y);
    if ($.boolConversionCheck($.gt(adjCount, 0), 'is$bool'))
      if ($.boolConversionCheck($.gt(this._getAdjacentCount$3(x, y, $.CTC17), 0), 'is$bool'))
        if ($.boolConversionCheck($.eq(this._getAdjacentCount$3(x, y, $.CTC18), adjCount), 'is$bool'))
          return true;
  }
  return false;
},
 _doChord$2: function(x, y) {
  var t1 = this._states;
  $.assert($.eq(t1.get$2(x, y), $.CTC16));
  var flagged = $.ListImplementation_List(null, 'int');
  $.setRuntimeTypeInfo(flagged, { 'E': 'int' });
  var hidden = $.ListImplementation_List(null, 'int');
  $.setRuntimeTypeInfo(hidden, { 'E': 'int' });
  var t2 = this.field;
  var adjCount = t2.getAdjacentCount$2(x, y);
  $.assert($.gt(adjCount, 0));
  for (var t3 = $.iterator(t2.getAdjacentIndices$2(x, y)), failed = false; $.boolConversionCheck(t3.hasNext$0(), 'is$bool');) {
    var t4 = t3.next$0();
    if ($.boolConversionCheck($.eq($.index(t1, t4), $.CTC17), 'is$bool')) {
      hidden.push(t4);
      if ($.boolConversionCheck($.index(t2, t4), 'is$bool'))
        failed = true;
    } else if ($.boolConversionCheck($.eq($.index(t1, t4), $.CTC18), 'is$bool'))
      flagged.push(t4);
  }
  $.assert(flagged.length === adjCount);
  var reveals = [];
  if (failed)
    this._setLost$0();
  else
    for (t1 = $.iterator(hidden); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
      var c = t2.getCoordinate$1(t1.next$0());
      if ($.boolConversionCheck(this.canReveal$2(c.get$Item1(), c.get$Item2()), 'is$bool'))
        $.addAll(reveals, this.reveal$2(c.get$Item1(), c.get$Item2()));
    }
  return reveals;
},
 _doReveal$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  var t1 = this._states;
  $.assert($.eq(t1.get$2(x, y), $.CTC17));
  t1.set$3(x, y, $.CTC16);
  var t2 = this._revealsLeft;
  if (t2 !== (t2 | 0))
    return this._doReveal$2$bailout(1, t2, x, y, t1, 0, 0);
  this._revealsLeft = t2 - 1;
  $.assert($.ge(this._revealsLeft, 0));
  var reveals = [$.Coordinate$(x, y)];
  t2 = this._revealsLeft;
  if (t2 !== (t2 | 0))
    return this._doReveal$2$bailout(2, reveals, x, t2, y, t1, 0);
  if (t2 === 0)
    this._setWon$0();
  else {
    t2 = this.field;
    var t3 = t2.getAdjacentCount$2(x, y);
    if (typeof t3 !== 'number')
      return this._doReveal$2$bailout(3, x, y, t2, t3, reveals, t1);
    if (t3 === 0)
      for (t3 = $.iterator(t2.getAdjacentIndices$2(x, y)); $.boolConversionCheck(t3.hasNext$0(), 'is$bool');) {
        var t4 = t3.next$0();
        if ($.boolConversionCheck($.eq(t1.operator$index$1(t4), $.CTC17), 'is$bool')) {
          var c = t2.getCoordinate$1(t4);
          $.addAll(reveals, this._doReveal$2(c.get$Item1(), c.get$Item2()));
          t4 = $.boolConversionCheck($.eq(this.get$state(), $.CTC20), 'is$bool');
          if (typeof t4 !== 'boolean')
            return this._doReveal$2$bailout(4, t3, t4, reveals, t2, t1, 0);
          $.assert(t4 || $.boolConversionCheck($.eq(this.get$state(), $.CTC28), 'is$bool'));
        }
      }
  }
  return reveals;
},
 _doReveal$2$bailout: function(state, env0, env1, env2, env3, env4, env5) {
  switch (state) {
    case 1:
      t2 = env0;
      var x = env1;
      var y = env2;
      t1 = env3;
      break;
    case 2:
      reveals = env0;
      x = env1;
      t2 = env2;
      y = env3;
      t1 = env4;
      break;
    case 3:
      x = env0;
      y = env1;
      t2 = env2;
      t3 = env3;
      reveals = env4;
      t1 = env5;
      break;
    case 4:
      t3 = env0;
      t4 = env1;
      reveals = env2;
      t2 = env3;
      t1 = env4;
      break;
  }
  switch (state) {
    case 0:
      $.intTypeCheck(x, 'is$$int');
      $.intTypeCheck(y, 'is$$int');
      var t1 = this._states;
      $.assert($.eq(t1.get$2(x, y), $.CTC17));
      t1.set$3(x, y, $.CTC16);
      var t2 = this._revealsLeft;
    case 1:
      state = 0;
      this._revealsLeft = $.intTypeCheck($.sub(t2, 1), 'is$$int');
      $.assert($.ge(this._revealsLeft, 0));
      var reveals = [$.Coordinate$(x, y)];
      t2 = this._revealsLeft;
    case 2:
      state = 0;
    default:
      if (state === 0 && $.boolConversionCheck(t2 === 0, 'is$bool'))
        this._setWon$0();
      else
        switch (state) {
          case 0:
            t2 = this.field;
            var t3 = t2.getAdjacentCount$2(x, y);
          case 3:
            state = 0;
          case 4:
            if (state === 4 || state === 0 && $.boolConversionCheck($.eq(t3, 0), 'is$bool'))
              switch (state) {
                case 0:
                  t3 = $.iterator(t2.getAdjacentIndices$2(x, y));
                case 4:
                  L0:
                    while (true)
                      switch (state) {
                        case 0:
                          if (!$.boolConversionCheck(t3.hasNext$0(), 'is$bool'))
                            break L0;
                          var t4 = t3.next$0();
                        case 4:
                          if (state === 4 || state === 0 && $.boolConversionCheck($.eq($.index(t1, t4), $.CTC17), 'is$bool'))
                            switch (state) {
                              case 0:
                                var c = t2.getCoordinate$1(t4);
                                $.addAll(reveals, this._doReveal$2(c.get$Item1(), c.get$Item2()));
                                t4 = $.boolConversionCheck($.eq(this.get$state(), $.CTC20), 'is$bool');
                              case 4:
                                state = 0;
                                $.assert(t4 || $.boolConversionCheck($.eq(this.get$state(), $.CTC28), 'is$bool'));
                            }
                      }
              }
        }
      return reveals;
  }
},
 _setWon$0: function() {
  $.assert($.eq(this.get$state(), $.CTC20));
  for (var t1 = this.field, t2 = this._states, i = 0; $.boolConversionCheck($.lt(i, $.get$length(t1)), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    if ($.boolConversionCheck($.index(t1, i), 'is$bool'))
      $.indexSet(t2, i, $.CTC30);
  this._setState$1($.CTC28);
},
 _setLost$0: function() {
  $.assert($.eq(this.get$state(), $.CTC20));
  for (var t1 = this.field, t2 = this._states, i = 0; $.boolConversionCheck($.lt(i, $.get$length(t1)), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
    if ($.boolConversionCheck($.index(t1, i), 'is$bool'))
      $.indexSet(t2, i, $.CTC31);
  this._setState$1($.CTC29);
},
 _lib2_update$0: function() {
  return this._updatedEvent.fireEvent$1($.CTC27);
},
 _setState$1: function(value) {
  $.assert(true);
  $.assert(!(this._state === null));
  $.assert($.eq($.eq(this._state, $.CTC19), this._startTime == null));
  if (!$.eqB(this._state, value)) {
    this._state = value;
    if ($.boolConversionCheck($.eq(this._state, $.CTC20), 'is$bool'))
      this._startTime = $.propertyTypeCheck($.DateImplementation$now(), 'is$Date');
    else if ($.boolConversionCheck(this.get$gameEnded(), 'is$bool'))
      this._endTime = $.propertyTypeCheck($.DateImplementation$now(), 'is$Date');
    this._gameStateEvent.fireEvent$1(this._state);
  }
},
 _ensureStarted$0: function() {
  if ($.boolConversionCheck($.eq(this.get$state(), $.CTC19), 'is$bool')) {
    $.assert(this._startTime == null);
    this._setState$1($.CTC20);
  }
  $.assert($.eq(this.get$state(), $.CTC20));
  $.assert(!(this._startTime == null));
},
 _getAdjacentCount$3: function(x, y, state) {
  for (var t1 = $.iterator(this.field.getAdjacentIndices$2(x, y)), t2 = this._states, val = 0; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    if ($.boolConversionCheck($.eq($.index(t2, t1.next$0()), state), 'is$bool'))
      val = $.intTypeCheck($.add(val, 1), 'is$$int');
  return val;
},
 Game$1: function(field) {
  $.propertyTypeCheck(field, 'is$Field');
  $.assert(!(field == null));
  this._minesLeft = $.intTypeCheck(field.get$mineCount(), 'is$$int');
  this._revealsLeft = $.intTypeCheck($.sub($.get$length(field), field.get$mineCount()), 'is$$int');
},
 is$Game: true
};

$$.GameState = {"":
 ["name?"],
 "super": "Object",
 toString$0: function() {
  return 'GameState: ' + $.S(this.name);
},
 is$GameState: true
};

$$.SquareState = {"":
 ["name?"],
 "super": "Object",
 toString$0: function() {
  return 'SquareState: ' + $.S(this.name);
},
 is$SquareState: true
};

$$.DisposableImpl = {"":
 [],
 "super": "Object",
 get$isDisposed: function() {
  return this._disposed;
},
 is$Object: function() { return true; }
};

$$.GlobalId = {"":
 ["id?", "_hashCode"],
 "super": "Object",
 hashCode$0: function() {
  return this._hashCode;
},
 operator$eq$1: function(other) {
  $.propertyTypeCheck(other, 'is$GlobalId');
  return !(other == null) && $.boolConversionCheck($.eq(other.get$id(), this.id), 'is$bool');
},
 is$GlobalId: true,
 is$Object: function() { return true; }
};

$$.Tuple = {"":
 ["Item1?", "Item2?"],
 "super": "Object",
 operator$eq$1: function(other) {
  $.propertyTypeCheck(other, 'is$Tuple');
  if (!(other == null))
    var t1 = $.boolConversionCheck($.boolConversionCheck($.eq(this.Item1, other.get$Item1()), 'is$bool') && $.boolConversionCheck($.eq(this.Item2, other.get$Item2()), 'is$bool'), 'is$bool');
  else
    t1 = false;
  return t1;
},
 toString$0: function() {
  return 'Tuple: Item1: ' + $.S(this.Item1) + ', Item2: ' + $.S(this.Item2);
},
 is$Tuple: true
};

$$.NullArgumentException = {"":
 ["theArg", "_arg"],
 "super": "IllegalArgumentException",
 toString$0: function() {
  return 'Null argument(s): ' + this.theArg;
}
};

$$.InvalidOperationException = {"":
 ["message"],
 "super": "Object",
 is$Exception: true,
 is$Object: function() { return true; }
};

$$.DetailedIllegalArgumentException = {"":
 ["argument", "message", "_arg"],
 "super": "IllegalArgumentException",
 toString$0: function() {
  var t1 = this.message;
  var t2 = $.boolConversionCheck(t1 == null || $.boolConversionCheck($.eq($.get$length(t1), 0), 'is$bool'), 'is$bool');
  var t3 = this.argument;
  if (t2)
    return 'Illegal argument: ' + t3;
  else
    return 'Illegal argument: ' + t3 + ' -- ' + $.S(t1);
}
};

$$.Enumerable = {"":
 [],
 "super": "Object",
 join$1: function(separator) {
  var sb = $.propertyTypeCheck($.StringBufferImpl$(''), 'is$StringBuffer');
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    if ($.boolConversionCheck($.gt($.get$length(sb), 0), 'is$bool'))
      sb.add$1(separator);
    sb.add$1(t2);
  }
  return sb.toString$0();
},
 join$0: function() {
  return this.join$1(', ')
},
 first$1: function(f) {
  $.functionTypeCheck(f, 'is$Func1');
  if (f == null)
    f = $.functionTypeCheck(new $.Enumerable_first_anon(), 'is$Func1');
  var iter = $._WhereIterator$(this.iterator$0(), f, $.getRuntimeTypeInfo(this).T);
  if (!$.boolConversionCheck(iter.hasNext$0(), 'is$bool'))
    throw $.$$throw($.CTC25);
  return iter.next$0();
},
 get$first: function() { return new $.BoundClosure1(this, 'first$1'); },
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Action1');
  for (var t1 = $.iterator(this); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    f.call$1(t1.next$0());
},
 toString$0: function() {
  return '[' + $.S(this.join$0()) + ']';
},
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$._WhereIterator = {"":
 ["_source", "_func", "_next?", "_current"],
 "super": "Object",
 set$_next: function(v) { this._next = $.boolTypeCheck(v, 'is$bool'); },
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 hasNext$0: function() {
  if (this._next == null) {
    this._next = false;
    for (var t1 = this._source; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
      this._current = t1.next$0();
      if ($.boolConversionCheck(this._func$1(this._current), 'is$bool')) {
        this._next = true;
        break;
      }
    }
  }
  return this._next;
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC11);
  $.assert(this._func$1(this._current));
  this._next = null;
  return this._current;
},
 next$0$bailout: function(state, t1) {
  if (!t1)
    throw $.$$throw($.CTC11);
  $.assert(this._func$1(this._current));
  this._next = null;
  return this._current;
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$.IndexIterator = {"":
 ["_indexer", "_lib1_length", "_lib1_pos"],
 "super": "Object",
 hasNext$0: function() {
  return $.gt(this._lib1_length, this._lib1_pos);
},
 next$0: function() {
  var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
  if (typeof t1 !== 'boolean')
    return this.next$0$bailout(1, t1);
  if (!t1)
    throw $.$$throw($.CTC11);
  t1 = this._lib1_pos;
  if (t1 !== (t1 | 0))
    return this.next$0$bailout(2, t1);
  this._lib1_pos = t1 + 1;
  return this._indexer$1(t1);
},
 next$0$bailout: function(state, env0) {
  switch (state) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state) {
    case 0:
      var t1 = $.boolConversionCheck(this.hasNext$0(), 'is$bool');
    case 1:
      state = 0;
      if (!t1)
        throw $.$$throw($.CTC11);
      t1 = this._lib1_pos;
    case 2:
      state = 0;
      this._lib1_pos = $.intTypeCheck($.add(t1, 1), 'is$$int');
      return this._indexer$1(t1);
  }
},
 _indexer$1: function(arg0) { return this._indexer.call$1(arg0); },
 IndexIterator$2: function(length$, indexer) {
  $.intTypeCheck(length$, 'is$$int');
  $.functionTypeCheck(indexer, 'is$Func1');
  $.requireArgumentNotNull(this._indexer, '_indexer');
  $.assert($.ge(this._lib1_length, 0));
},
 is$Iterator: true,
 is$Object: function() { return true; }
};

$$.ListBase = {"":
 [],
 "super": "Enumerable",
 iterator$0: function() {
  return $.IndexIterator$($.get$length(this), new $.ListBase_iterator_anon(this), $.getRuntimeTypeInfo(this).T);
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  for (var i = 0; $.lt(i, $.get$length(this)); ++i)
    f.call$1(this.operator$index$1(i));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  var list = $.ListImplementation_List(null, $.getRuntimeTypeInfo(this).T);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).T });
  for (var i = 0; $.lt(i, $.get$length(this)); ++i) {
    var e = this.operator$index$1(i);
    if ($.boolConversionCheck(f.call$1(e), 'is$bool'))
      list.push(e);
  }
  return list;
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 get$length: function() {
  throw $.$$throw($.CTC26);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  throw $.$$throw($.CTC26);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 getRange$2: function(start, itemCount) {
  if (start !== (start | 0))
    return this.getRange$2$bailout(1, start, itemCount, 0);
  $.requireArgument($.ge(itemCount, 0), 'count', null);
  if (typeof itemCount !== 'number')
    throw $.iae(itemCount);
  var lastIndex = start + itemCount - 1;
  if (lastIndex !== (lastIndex | 0))
    return this.getRange$2$bailout(2, start, lastIndex, itemCount);
  if (itemCount > 0)
    if (start < 0)
      throw $.$$throw($.IndexOutOfRangeException$(start));
    else if ($.ge(lastIndex, $.get$length(this)))
      throw $.$$throw($.IndexOutOfRangeException$(lastIndex));
  var list = $.ListImplementation_List(null, $.getRuntimeTypeInfo(this).T);
  $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).T });
  for (var i = start; i <= lastIndex; ++i)
    list.push(this.operator$index$1(i));
  return list;
},
 getRange$2$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var start = env0;
      var itemCount = env1;
      break;
    case 2:
      start = env0;
      lastIndex = env1;
      itemCount = env2;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      $.requireArgument($.ge(itemCount, 0), 'count', null);
      var lastIndex = $.sub($.add(start, itemCount), 1);
    case 2:
      state = 0;
      if ($.boolConversionCheck($.gt(itemCount, 0), 'is$bool'))
        if ($.boolConversionCheck($.lt(start, 0), 'is$bool'))
          throw $.$$throw($.IndexOutOfRangeException$(start));
        else if ($.boolConversionCheck($.ge(lastIndex, $.get$length(this)), 'is$bool'))
          throw $.$$throw($.IndexOutOfRangeException$(lastIndex));
      var list = $.ListImplementation_List(null, $.getRuntimeTypeInfo(this).T);
      $.setRuntimeTypeInfo(list, { 'E': $.getRuntimeTypeInfo(this).T });
      for (var i = start; $.boolConversionCheck($.le(i, lastIndex), 'is$bool'); i = $.add(i, 1))
        list.push(this.operator$index$1(i));
      return list;
  }
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  throw $.$$throw($.CTC23);
},
 add$1: function(value) {
  throw $.$$throw($.CTC23);
},
 addLast$1: function(value) {
  throw $.$$throw($.CTC23);
},
 addAll$1: function(value) {
  $.listSuperNativeTypeCheck(value, 'is$Collection');
  throw $.$$throw($.CTC23);
},
 clear$0: function() {
  throw $.$$throw($.CTC23);
},
 removeLast$0: function() {
  throw $.$$throw($.CTC23);
},
 insertRange$3: function(start, length$, initialValue) {
  $.intTypeCheck(length$, 'is$$int');
  throw $.$$throw($.CTC23);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
};

$$.ReadOnlyCollection = {"":
 ["_items"],
 "super": "ListBase",
 get$length: function() {
  return this._items.length;
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  var t1 = this._items;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 is$ReadOnlyCollection: true
};

$$.Array2d = {"":
 ["width?", "height?", "_source"],
 "super": "ListBase",
 get$length: function() {
  return $.get$length(this._source);
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  return $.index(this._source, index);
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.indexSet(this._source, index, value);
},
 get$2: function(x, y) {
  return this.operator$index$1(this._getIndex$2(x, y));
},
 set$3: function(x, y, value) {
  this.operator$indexSet$2(this._getIndex$2(x, y), value);
},
 getAdjacentIndices$2: function(x, y) {
  if (x !== (x | 0))
    return this.getAdjacentIndices$2$bailout(1, x, y);
  if (y !== (y | 0))
    return this.getAdjacentIndices$2$bailout(1, x, y);
  var adj = $.ListImplementation_List(null, 'int');
  $.setRuntimeTypeInfo(adj, { 'E': 'int' });
  for (var k = $.intTypeCheck($.max(0, y - 1), 'is$$int'), t1 = this.height, t2 = this.width, t3 = y + 2, t4 = x - 1, t5 = x + 2; $.boolConversionCheck($.lt(k, $.min(t1, t3)), 'is$bool'); k = $.intTypeCheck($.add(k, 1), 'is$$int'))
    for (var j = $.intTypeCheck($.max(0, t4), 'is$$int'), t6 = !(k === y); $.boolConversionCheck($.lt(j, $.min(t2, t5)), 'is$bool'); j = $.intTypeCheck($.add(j, 1), 'is$$int'))
      if (!(j === x) || t6)
        adj.push(this._getIndex$2(j, k));
  return adj;
},
 getAdjacentIndices$2$bailout: function(state, x, y) {
  var adj = $.ListImplementation_List(null, 'int');
  $.setRuntimeTypeInfo(adj, { 'E': 'int' });
  for (var k = $.intTypeCheck($.max(0, $.sub(y, 1)), 'is$$int'), t1 = this.height, t2 = this.width; $.boolConversionCheck($.lt(k, $.min(t1, $.add(y, 2))), 'is$bool'); k = $.intTypeCheck($.add(k, 1), 'is$$int'))
    for (var j = $.intTypeCheck($.max(0, $.sub(x, 1)), 'is$$int'), t3 = !(k == null ? y == null : k === y); $.boolConversionCheck($.lt(j, $.min(t2, $.add(x, 2))), 'is$bool'); j = $.intTypeCheck($.add(j, 1), 'is$$int'))
      if (!(j == null ? x == null : j === x) || t3)
        adj.push(this._getIndex$2(j, k));
  return adj;
},
 getCoordinate$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
  if (index !== (index | 0))
    return this.getCoordinate$1$bailout(1, index, 0, 0, 0);
  var t2 = this.width;
  if (t2 !== (t2 | 0))
    return this.getCoordinate$1$bailout(2, index, t2, 0, 0);
  var x = $.mod(index, t2);
  var y = $.tdiv(index, t2);
  t2 = this._getIndex$2(x, y);
  if (typeof t2 !== 'number')
    return this.getCoordinate$1$bailout(3, y, t2, index, x);
  $.assert(t2 === index);
  return $.Tuple$(x, y, 'int', 'int');
},
 getCoordinate$1$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var index = env0;
      break;
    case 2:
      index = env0;
      t2 = env1;
      break;
    case 3:
      y = env0;
      t2 = env1;
      index = env2;
      x = env3;
      break;
  }
  switch (state) {
    case 0:
      $.intTypeCheck(index, 'is$$int');
    case 1:
      state = 0;
      var t2 = this.width;
    case 2:
      state = 0;
      var x = $.mod(index, t2);
      var y = $.tdiv(index, t2);
      t2 = this._getIndex$2(x, y);
    case 3:
      state = 0;
      $.assert($.eq(t2, index));
      return $.Tuple$(x, y, 'int', 'int');
  }
},
 _getIndex$2: function(x, y) {
  $.intTypeCheck(x, 'is$$int');
  if (x !== (x | 0))
    return this._getIndex$2$bailout(1, y, x, 0);
  $.intTypeCheck(y, 'is$$int');
  if (y !== (y | 0))
    return this._getIndex$2$bailout(2, x, y, 0);
  if (x >= 0) {
    var t1 = this.width;
    if (t1 !== (t1 | 0))
      return this._getIndex$2$bailout(3, t1, x, y);
    t1 = x < t1;
  } else
    t1 = false;
  $.assert(t1);
  if (y >= 0) {
    t1 = this.height;
    if (t1 !== (t1 | 0))
      return this._getIndex$2$bailout(4, x, y, t1);
    t1 = y < t1;
  } else
    t1 = false;
  $.assert(t1);
  t1 = this.width;
  if (t1 !== (t1 | 0))
    return this._getIndex$2$bailout(5, x, y, t1);
  return x + y * t1;
},
 _getIndex$2$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      var y = env0;
      var x = env1;
      break;
    case 2:
      x = env0;
      y = env1;
      break;
    case 3:
      t1 = env0;
      x = env1;
      y = env2;
      break;
    case 4:
      x = env0;
      y = env1;
      t1 = env2;
      break;
    case 5:
      x = env0;
      y = env1;
      t1 = env2;
      break;
  }
  switch (state) {
    case 0:
      $.intTypeCheck(x, 'is$$int');
    case 1:
      state = 0;
      $.intTypeCheck(y, 'is$$int');
    case 2:
      state = 0;
    case 3:
      if (state === 3 || state === 0 && $.boolConversionCheck($.ge(x, 0), 'is$bool'))
        switch (state) {
          case 0:
            var t1 = this.width;
          case 3:
            state = 0;
            t1 = $.boolConversionCheck($.lt(x, t1), 'is$bool');
        }
      else
        t1 = false;
      $.assert(t1);
    case 4:
      if (state === 4 || state === 0 && $.boolConversionCheck($.ge(y, 0), 'is$bool'))
        switch (state) {
          case 0:
            t1 = this.height;
          case 4:
            state = 0;
            t1 = $.boolConversionCheck($.lt(y, t1), 'is$bool');
        }
      else
        t1 = false;
      $.assert(t1);
      t1 = this.width;
    case 5:
      state = 0;
      return $.add(x, $.mul(y, t1));
  }
},
 Array2d$wrap$2: function(width, source) {
  $.intTypeCheck(width, 'is$$int');
  $.listTypeCheck(source, 'is$List');
  $.requireArgumentNotNull(width, 'width');
  $.requireArgumentNotNull(source, 'source');
  $.requireArgument($.ge(width, 0), 'width', 'width must be non-zero');
  var t1 = width === 0;
  var t2 = this._source;
  if (t1)
    $.requireArgument($.eq($.get$length(t2), 0), 'width', 'width must be greater than zero if the source is non-empty');
  else {
    $.requireArgument($.gt($.get$length(t2), 0), 'source', 'if width is non-zero, source must be non-empty');
    $.requireArgument($.eq($.mod($.get$length(t2), width), 0), 'width', 'width must evenly divide the source');
  }
},
 is$Array2d: true
};

$$.EventHandle = {"":
 ["_handlers", "_disposed"],
 "super": "DisposableImpl",
 fireEvent$1: function(args) {
  $.assert(!$.boolConversionCheck(this.get$isDisposed(), 'is$bool'));
  var t1 = this._handlers;
  if (!(t1 == null))
    $.forEach(t1, new $.EventHandle_fireEvent_anon(args));
},
 add$1: function(handler) {
  $.functionTypeCheck(handler, 'is$Action1');
  $.assert(!$.boolConversionCheck(this.get$isDisposed(), 'is$bool'));
  var id = $.GlobalId_GlobalId();
  if (this._handlers == null)
    this._handlers = $.propertyTypeCheck($.HashMapImplementation$('GlobalId', 'Action1<T>'), 'is$HashMap');
  $.indexSet(this._handlers, id, handler);
  return id;
},
 remove$1: function(id) {
  $.propertyTypeCheck(id, 'is$GlobalId');
  var t1 = this._handlers;
  if (!(t1 == null))
    return !(t1.remove$1(id) == null);
  else
    return false;
},
 is$EventHandle: true,
 is$Object: function() { return true; }
};

$$.EventArgs = {"":
 [],
 "super": "Object",
 is$EventArgs: true
};

$$.Coordinate = {"":
 ["x?", "y?"],
 "super": "Object",
 operator$sub$1: function(other) {
  return $.Coordinate_difference(this, $.propertyTypeCheck(other, 'is$Coordinate'));
},
 operator$add$1: function(other) {
  $.propertyTypeCheck(other, 'is$Vector');
  return $.Coordinate$($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 operator$eq$1: function(other) {
  $.propertyTypeCheck(other, 'is$Coordinate');
  if (!(other == null)) {
    var t1 = this.x;
    var t2 = other.get$x();
    if ($.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool')) {
      t1 = this.y;
      t2 = other.get$y();
      t2 = $.boolConversionCheck(t1 == null ? t2 == null : t1 === t2, 'is$bool');
      t1 = t2;
    } else
      t1 = false;
    $.boolConversionCheck(t1, 'is$bool');
  } else
    t1 = false;
  return t1;
},
 toString$0: function() {
  return '{x:' + $.S(this.x) + ', y:' + $.S(this.y) + '}';
},
 is$Coordinate: true
};

$$.Vector = {"":
 ["x", "y"],
 "super": "Coordinate",
 get$length: function() {
  var t1 = this.x;
  t1 = $.mul(t1, t1);
  var t2 = this.y;
  return $.sqrt($.add(t1, $.mul(t2, t2)));
},
 operator$add$1: function(other) {
  $.propertyTypeCheck(other, 'is$Coordinate');
  return $.Vector$($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 operator$mul$1: function(magnitude) {
  return this.scale$1($.numTypeCheck(magnitude, 'is$num'));
},
 scale$1: function(magnitude) {
  return $.Vector$($.mul(this.x, magnitude), $.mul(this.y, magnitude));
},
 is$Vector: true
};

$$.HighScoreView = {"":
 ["_width", "_height", "_mineCount", "_div", "_storage"],
 "super": "Object",
 _update$0: function() {
  var milliseconds = this._storage.getHighScore$3(this._width, this._height, this._mineCount);
  var t1 = !(milliseconds == null);
  var t2 = this._div;
  if (t1)
    t2.set$innerHTML($.DurationImplementation$(0, 0, 0, $.tdiv(milliseconds, 1000), 0).toString$0());
  else
    t2.set$innerHTML('');
},
 HighScoreView$5: function(_width, _height, _mineCount, _div, _storage) {
  $.assert(!(this._div == null));
  var t1 = this._storage;
  $.assert(!(t1 == null));
  $.add$1(t1.get$highScoreUpdated(), new $.anon(this));
  this._update$0();
}
};

$$.GameView = {"":
 ["_table", "_leftCountDiv", "_gameStateDiv", "_clockDiv", "_width", "_height", "_mineCount", "gameStorage", "game", "_updatedEventId", "_gameStateChangedId", "_setIntervalId"],
 "super": "GameManager",
 updateElement$0: function() {
  this.updateClock$0();
  var t1 = this.game.get$state().get$name();
  this._gameStateDiv.set$innerHTML(t1);
  t1 = $.toString(this.game.get$minesLeft());
  this._leftCountDiv.set$innerHTML(t1);
  t1 = this._table;
  if ($.boolConversionCheck($.eq($.get$length(t1.get$elements()), 0), 'is$bool'))
    for (var r = 0; $.boolConversionCheck($.lt(r, this.game.get$field().get$height()), 'is$bool'); r = $.intTypeCheck($.add(r, 1), 'is$$int')) {
      var row = $.callTypeCheck(t1.insertRow$1(-1), 'is$TableRowElement');
      for (var c = 0; $.boolConversionCheck($.lt(c, this.game.get$field().get$width()), 'is$bool'); c = $.intTypeCheck($.add(c, 1), 'is$$int')) {
        var cell = $.callTypeCheck(row.insertCell$1(-1), 'is$TableCellElement');
        $.add$1(cell.get$on().get$mouseDown(), this.get$_cellClick());
        $.indexSet(cell.get$dataAttributes(), 'x', $.toString(c));
        $.indexSet(cell.get$dataAttributes(), 'y', $.toString(r));
      }
    }
  for (r = 0; $.boolConversionCheck($.lt(r, this.game.get$field().get$height()), 'is$bool'); r = $.intTypeCheck($.add(r, 1), 'is$$int'))
    for (c = 0; $.boolConversionCheck($.lt(c, this.game.get$field().get$width()), 'is$bool'); c = $.intTypeCheck($.add(c, 1), 'is$$int')) {
      cell = $.callTypeCheck($.index($.callTypeCheck($.index(t1.get$rows(), r), 'is$TableRowElement').get$cells(), c), 'is$TableCellElement');
      $.clear(cell.get$classes());
      $.add$1(cell.get$classes(), 'game-square');
      var ss = this.game.getSquareState$2(c, r);
      $.add$1(cell.get$classes(), ss.get$name());
      if ($.boolConversionCheck($.eq(ss, $.CTC16), 'is$bool')) {
        var adj = this.game.get$field().getAdjacentCount$2(c, r);
        $.assert(!(adj == null));
        if ($.boolConversionCheck($.gt(adj, 0), 'is$bool'))
          cell.set$innerHTML($.toString(adj));
      }
    }
},
 newGame$0: function() {
  $.GameManager.prototype.newGame$0.call(this);
  $.clear(this._table.get$elements());
  this.updateElement$0();
},
 updateClock$0: function() {
  var t1 = this.game.get$duration() == null;
  var t2 = this._clockDiv;
  if (t1)
    t2.set$innerHTML('');
  else
    t2.set$innerHTML($.toString(this.game.get$duration().get$inSeconds()));
  $.GameManager.prototype.updateClock$0.call(this);
},
 _cellClick$1: function(args) {
  $.callTypeCheck(args, 'is$MouseEvent');
  if ($.boolConversionCheck($.boolConversionCheck($.eq(args.get$button(), 0), 'is$bool') && $.boolConversionCheck(this.get$_canClick(), 'is$bool'), 'is$bool')) {
    var cell = $.callTypeCheck(args.get$currentTarget(), 'is$TableCellElement');
    var xStr = $.index(cell.get$dataAttributes(), 'x');
    var yStr = $.index(cell.get$dataAttributes(), 'y');
    this._click$3($.parseInt(xStr), $.parseInt(yStr), args.get$shiftKey());
  }
},
 get$_cellClick: function() { return new $.BoundClosure0(this, '_cellClick$1'); },
 gameUpdated$1: function(args) {
  this.updateElement$0();
},
 get$gameUpdated: function() { return new $.BoundClosure0(this, 'gameUpdated$1'); }
};

$$.GameStorage = {"":
 ["_highScoreUpdated", "_storage"],
 "super": "Object",
 get$highScoreUpdated: function() {
  return this._highScoreUpdated;
},
 recordState$1: function(state) {
  $.assert(true);
  this._incrementIntValue$1(state.name);
},
 updateHighScore$1: function(game) {
  $.propertyTypeCheck(game, 'is$Game');
  $.assert(!(game == null));
  $.assert($.eq(game.get$state(), $.CTC28));
  var w = game.get$field().get$width();
  var h = game.get$field().get$height();
  var m = game.get$field().get$mineCount();
  var duration = game.get$duration().get$inMilliseconds();
  $.intTypeCheck(w, 'is$$int');
  $.intTypeCheck(h, 'is$$int');
  $.intTypeCheck(m, 'is$$int');
  var key = 'w' + $.S(w) + '-h' + $.S(h) + '-m' + $.S(m);
  var currentScore = this._getIntValue$2(key, null);
  if ($.boolConversionCheck(currentScore == null || $.boolConversionCheck($.gt(currentScore, duration), 'is$bool'), 'is$bool')) {
    this._setIntValue$2(key, duration);
    this._highScoreUpdated.fireEvent$1(null);
    return true;
  } else
    return false;
},
 getHighScore$3: function(width, height, mineCount) {
  $.intTypeCheck(width, 'is$$int');
  $.intTypeCheck(height, 'is$$int');
  $.intTypeCheck(mineCount, 'is$$int');
  return this._getIntValue$2('w' + $.S(width) + '-h' + $.S(height) + '-m' + $.S(mineCount), null);
},
 reset$0: function() {
  $.clear(this._storage);
},
 toString$0: function() {
  return $.Maps_mapToString(this._storage);
},
 _getIntValue$2: function(key, defaultValue) {
  $.assert(!(key == null));
  var strValue = $.index(this._storage, key);
  if (strValue == null)
    return defaultValue;
  else
    return $.parseInt(strValue);
},
 _getIntValue$1: function(key) {
  return this._getIntValue$2(key,0)
},
 _setIntValue$2: function(key, value) {
  $.intTypeCheck(value, 'is$$int');
  $.assert(!(key == null));
  var t1 = value == null;
  var t2 = this._storage;
  if (t1)
    $.indexSet(t2, key, null);
  else
    $.indexSet(t2, key, $.toString(value));
},
 _incrementIntValue$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  this._setIntValue$2(key, $.add(this._getIntValue$1(key), 1));
},
 is$GameStorage: true
};

$$.GameManager = {"":
 [],
 "super": "Object",
 newGame$0: function() {
  if (!(this._updatedEventId == null)) {
    $.assert(!(this.game == null));
    $.assert(!(this._gameStateChangedId == null));
    this.game.get$updated().remove$1(this._updatedEventId);
    this.game.get$stateChanged().remove$1(this._gameStateChangedId);
    this._gameStateChanged$1($.CTC19);
  }
  this.game = $.Game$($.Field_Field(this._mineCount, this._width, this._height, null));
  this._updatedEventId = $.propertyTypeCheck($.add$1(this.game.get$updated(), this.get$gameUpdated()), 'is$GlobalId');
  this._gameStateChangedId = $.propertyTypeCheck($.add$1(this.game.get$stateChanged(), this.get$_gameStateChanged()), 'is$GlobalId');
},
 _click$3: function(x, y, alt) {
  $.intTypeCheck(x, 'is$$int');
  $.intTypeCheck(y, 'is$$int');
  $.boolTypeCheck(alt, 'is$bool');
  var ss = this.game.getSquareState$2(x, y);
  if (alt) {
    if ($.boolConversionCheck($.eq(ss, $.CTC17), 'is$bool'))
      this.game.setFlag$3(x, y, true);
    else if ($.boolConversionCheck($.eq(ss, $.CTC18), 'is$bool'))
      this.game.setFlag$3(x, y, false);
    else if ($.boolConversionCheck($.eq(ss, $.CTC16), 'is$bool'))
      this.game.reveal$2(x, y);
  } else if ($.boolConversionCheck($.eq(ss, $.CTC17), 'is$bool'))
    this.game.reveal$2(x, y);
},
 updateClock$0: function() {
  if ($.boolConversionCheck(this._setIntervalId == null && $.boolConversionCheck($.eq(this.game.get$state(), $.CTC20), 'is$bool'), 'is$bool'))
    this._setIntervalId = $.intTypeCheck($.window().setInterval$2(this.get$_doClock(), 1000), 'is$$int');
  else if (!(this._setIntervalId == null) && !$.eqB(this.game.get$state(), $.CTC20)) {
    $.window().clearInterval$1(this._setIntervalId);
    this._setIntervalId = null;
  }
},
 _doClock$0: function() {
  this.updateClock$0();
},
 get$_doClock: function() { return new $.BoundClosure(this, '_doClock$0'); },
 get$_canClick: function() {
  return $.boolConversionCheck($.eq(this.game.get$state(), $.CTC19), 'is$bool') || $.boolConversionCheck($.eq(this.game.get$state(), $.CTC20), 'is$bool');
},
 _gameStateChanged$1: function(newState) {
  var t1 = this.gameStorage;
  t1.recordState$1(newState);
  if ($.boolConversionCheck($.eq(newState, $.CTC28), 'is$bool'))
    t1.updateHighScore$1(this.game);
  this.updateClock$0();
},
 get$_gameStateChanged: function() { return new $.BoundClosure0(this, '_gameStateChanged$1'); },
 GameManager$3: function(_width, _height, _mineCount) {
  this.newGame$0();
}
};

$$.main_anon = {"":
 ["gameView_0"],
 "super": "Closure",
 call$1: function(args) {
  return this.gameView_0.newGame$0();
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"":
 ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  var length$ = t1.length;
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_3.push(null);
  return length$;
},
 call$1$bailout: function(state, value, t1, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_3.push(null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"":
 ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  $.intTypeCheck(i, 'is$$int');
  var t1 = this.copies_4;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  return t1[i];
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"":
 ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.intTypeCheck(i, 'is$$int');
  var t1 = this.copies_5;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  t1[i] = x;
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"":
 [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"":
 ["writeSlot_8", "findSlot_7", "readSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.CTC3);
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.CTC4);
  if (typeof e === 'object' && e !== null && e.is$_FileImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$File())
    throw $.$$throw($.CTC5);
  if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    throw $.$$throw($.CTC6);
  if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$FileList())
    throw $.$$throw($.CTC7);
  if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    throw $.$$throw($.CTC7);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    throw $.$$throw($.CTC8);
  if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    throw $.$$throw($.CTC9);
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    var slot = this.findSlot_7.call$1(e);
    t1.copy_1 = this.readSlot_6.call$1(slot);
    var t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_8.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    var length$ = $.intTypeCheck($.get$length(e), 'is$$int');
    if (length$ !== (length$ | 0))
      return this.call$1$bailout(1, length$, e, 0, 0);
    slot = this.findSlot_7.call$1(e);
    t2 = this.readSlot_6;
    var copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_8.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    var t3 = this.writeSlot_8;
    if (t1) {
      t3.call$2(slot, true);
      for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
        var element = $.index(e, i);
        var elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          for (var j = 0; $.boolConversionCheck($.lt(j, i), 'is$bool'); j = $.intTypeCheck($.add(j, 1), 'is$$int'))
            $.indexSet(copy, j, $.index(e, j));
          $.indexSet(copy, i, elementCopy);
          i = $.intTypeCheck($.add(i, 1), 'is$$int');
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (i !== (i | 0))
      return this.call$1$bailout(2, length$, copy, i, e);
    for (; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
      $.indexSet(copy, i, this.call$1($.index(e, i)));
    return copy;
  }
  throw $.$$throw($.CTC10);
},
 call$1$bailout: function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      length$ = env0;
      var e = env1;
      break;
    case 2:
      length$ = env0;
      copy = env1;
      i = env2;
      e = env3;
      break;
  }
  switch (state) {
    case 0:
      var t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.CTC3);
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.CTC4);
      if (typeof e === 'object' && e !== null && e.is$_FileImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$File())
        throw $.$$throw($.CTC5);
      if (typeof e === 'object' && e !== null && e.is$_BlobImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        throw $.$$throw($.CTC6);
      if (typeof e === 'object' && e !== null && e.is$_FileListImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$FileList())
        throw $.$$throw($.CTC7);
      if (typeof e === 'object' && e !== null && e.is$_ImageDataImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        throw $.$$throw($.CTC7);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        throw $.$$throw($.CTC8);
      if (typeof e === 'object' && e !== null && e.is$_ArrayBufferViewImpl())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        throw $.$$throw($.CTC9);
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        var slot = this.findSlot_7.call$1(e);
        t1.copy_1 = this.readSlot_6.call$1(slot);
        var t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_8.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      if (state === 2 || state === 1 || state === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state) {
          case 0:
            var length$ = $.intTypeCheck($.get$length(e), 'is$$int');
          case 1:
            state = 0;
            slot = this.findSlot_7.call$1(e);
            t2 = this.readSlot_6;
            var copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_8.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            var t3 = this.writeSlot_8;
            if (t1) {
              t3.call$2(slot, true);
              for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
                var element = $.index(e, i);
                var elementCopy = this.call$1(element);
                if (!(elementCopy == null ? element == null : elementCopy === element)) {
                  copy = t2.call$1(slot);
                  if (true === copy) {
                    copy = new Array(length$);
                    t3.call$2(slot, copy);
                  }
                  for (var j = 0; $.boolConversionCheck($.lt(j, i), 'is$bool'); j = $.intTypeCheck($.add(j, 1), 'is$$int'))
                    $.indexSet(copy, j, $.index(e, j));
                  $.indexSet(copy, i, elementCopy);
                  i = $.intTypeCheck($.add(i, 1), 'is$$int');
                  break;
                }
              }
              if (copy == null) {
                t3.call$2(slot, e);
                copy = e;
              }
            } else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 2:
            state = 0;
            for (; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.CTC10);
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"":
 ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.Maps__emitMap_anon = {"":
 ["result_3", "box_0", "visiting_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.box_0;
  if (!$.boolConversionCheck(t1.first_1, 'is$bool'))
    $.add$1(this.result_3, ', ');
  t1.first_1 = false;
  t1 = this.result_3;
  var t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$.anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(args) {
  return this.this_0._update$0();
}
};

$$.FilteredElementList__filtered_anon = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$._ChildrenElementList_filter_anon = {"":
 ["f_1", "output_0"],
 "super": "Closure",
 call$1: function(element) {
  $.callTypeCheck(element, 'is$Element');
  if ($.boolConversionCheck(this.f_1.call$1(element), 'is$bool'))
    this.output_0.push(element);
}
};

$$.FilteredElementList_removeRange_anon = {"":
 [],
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.DurationImplementation_toString_threeDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  $.intTypeCheck(n, 'is$$int');
  if ($.boolConversionCheck($.ge(n, 100), 'is$bool'))
    return $.S(n);
  if ($.boolConversionCheck($.gt(n, 10), 'is$bool'))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$.DurationImplementation_toString_twoDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  $.intTypeCheck(n, 'is$$int');
  if ($.boolConversionCheck($.ge(n, 10), 'is$bool'))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$.invokeClosure_anon = {"":
 ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"":
 ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"":
 ["closure_5", "arg1_4", "arg2_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_5.call$2(this.arg1_4, this.arg2_3);
}
};

$$.Enumerable_first_anon = {"":
 [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.ListBase_iterator_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.this_0, i);
}
};

$$.DateImplementation_toString_fourDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  $.intTypeCheck(n, 'is$$int');
  var absN = $.intTypeCheck($.abs(n), 'is$$int');
  var sign = $.boolConversionCheck($.lt(n, 0), 'is$bool') ? '-' : '';
  if ($.boolConversionCheck($.ge(absN, 1000), 'is$bool'))
    return $.S(n);
  if ($.boolConversionCheck($.ge(absN, 100), 'is$bool'))
    return sign + '0' + $.S(absN);
  if ($.boolConversionCheck($.ge(absN, 10), 'is$bool'))
    return sign + '00' + $.S(absN);
  return sign + '000' + $.S(absN);
}
};

$$.DateImplementation_toString_threeDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  $.intTypeCheck(n, 'is$$int');
  if ($.boolConversionCheck($.ge(n, 100), 'is$bool'))
    return $.S(n);
  if ($.boolConversionCheck($.ge(n, 10), 'is$bool'))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$.DateImplementation_toString_twoDigits = {"":
 [],
 "super": "Closure",
 call$1: function(n) {
  $.intTypeCheck(n, 'is$$int');
  if ($.boolConversionCheck($.ge(n, 10), 'is$bool'))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$.EventHandle_fireEvent_anon = {"":
 ["args_0"],
 "super": "Closure",
 call$2: function(id, handler) {
  $.propertyTypeCheck(id, 'is$GlobalId');
  $.functionTypeCheck(handler, 'is$Action1').call$1(this.args_0);
}
};

$$.startRootIsolate_anon = {"":
 [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $.functionTypeCheck($._timerFactory, 'is$_TimerFactoryClosure');
  return;
}
};

$$.DoubleLinkedQueue_length__ = {"":
 ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.intTypeCheck($.add(t1.counter_1, 1), 'is$$int');
}
};

$$._convertNativeToDart_AcceptStructuredClone_findSlot = {"":
 ["copies_1", "values_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_0;
  var length$ = t1.length;
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_1.push(null);
  return length$;
},
 call$1$bailout: function(state, value, t1, length$) {
  for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    var t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t1.push(value);
  this.copies_1.push(null);
  return length$;
}
};

$$._convertNativeToDart_AcceptStructuredClone_readSlot = {"":
 ["copies_2"],
 "super": "Closure",
 call$1: function(i) {
  $.intTypeCheck(i, 'is$$int');
  var t1 = this.copies_2;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  return t1[i];
}
};

$$._convertNativeToDart_AcceptStructuredClone_writeSlot = {"":
 ["copies_3"],
 "super": "Closure",
 call$2: function(i, x) {
  $.intTypeCheck(i, 'is$$int');
  var t1 = this.copies_3;
  if (i !== (i | 0))
    throw $.iae(i);
  if (i < 0 || i >= t1.length)
    throw $.ioore(i);
  t1[i] = x;
}
};

$$._convertNativeToDart_AcceptStructuredClone_walk = {"":
 ["writeSlot_6", "findSlot_5", "readSlot_4"],
 "super": "Closure",
 call$1: function(e) {
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (e instanceof Date)
    throw $.$$throw($.CTC3);
  if (e instanceof RegExp)
    throw $.$$throw($.CTC4);
  if ($._isJavaScriptSimpleObject(e)) {
    var slot = this.findSlot_5.call$1(e);
    var copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    copy = $.makeLiteralMap([]);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, copy, e, slot);
    this.writeSlot_6.call$2(slot, copy);
    for (var t1 = $.iterator(Object.keys(e)); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
      var t2 = t1.next$0();
      var t3 = this.call$1(e[t2]);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= copy.length)
        throw $.ioore(t2);
      copy[t2] = t3;
    }
    return copy;
  }
  if (e instanceof Array) {
    slot = this.findSlot_5.call$1(e);
    copy = this.readSlot_4.call$1(slot);
    if (!(copy == null))
      return copy;
    this.writeSlot_6.call$2(slot, e);
    var length$ = $.intTypeCheck($.get$length(e), 'is$$int');
    if (length$ !== (length$ | 0))
      return this.call$1$bailout(2, e, length$, 0);
    for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
      $.indexSet(e, i, this.call$1($.index(e, i)));
    return e;
  }
  return e;
},
 call$1$bailout: function(state, env0, env1, env2) {
  switch (state) {
    case 1:
      copy = env0;
      var e = env1;
      slot = env2;
      break;
    case 2:
      e = env0;
      length$ = env1;
      break;
  }
  switch (state) {
    case 0:
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (e instanceof Date)
        throw $.$$throw($.CTC3);
      if (e instanceof RegExp)
        throw $.$$throw($.CTC4);
    case 1:
      if (state === 1 || state === 0 && $._isJavaScriptSimpleObject(e))
        switch (state) {
          case 0:
            var slot = this.findSlot_5.call$1(e);
            var copy = this.readSlot_4.call$1(slot);
            if (!(copy == null))
              return copy;
            copy = $.makeLiteralMap([]);
          case 1:
            state = 0;
            this.writeSlot_6.call$2(slot, copy);
            for (var t1 = $.iterator(Object.keys(e)); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
              var t2 = t1.next$0();
              $.indexSet(copy, t2, this.call$1(e[t2]));
            }
            return copy;
        }
    case 2:
      if (state === 2 || state === 0 && e instanceof Array)
        switch (state) {
          case 0:
            slot = this.findSlot_5.call$1(e);
            copy = this.readSlot_4.call$1(slot);
            if (!(copy == null))
              return copy;
            this.writeSlot_6.call$2(slot, e);
            var length$ = $.intTypeCheck($.get$length(e), 'is$$int');
          case 2:
            state = 0;
            for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
              $.indexSet(e, i, this.call$1($.index(e, i)));
            return e;
        }
      return e;
  }
}
};

$$.LinkedHashMapImplementation_forEach__ = {"":
 ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  $.propertyTypeCheck(entry, 'is$KeyValuePair');
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$._BaseSendPort_call_anon = {"":
 ["port_1", "completer_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  this.port_1.close$0();
  var t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  var t2 = this.completer_0;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"":
 ["this_2", "message_1", "replyTo_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_2;
  var t2 = this.replyTo_0;
  t1._checkReplyTo$1(t2);
  var workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_1, 'replyTo', t2]));
  if ($.boolConversionCheck($._globalState().get$isWorker(), 'is$bool'))
    $._globalState().get$mainManager().postMessage$1(workerMessage);
  else
    $.index($._globalState().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"":
 ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"":
 ["completer_5", "pos_4", "box_0", "result_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1 = this.values_2;
  var t2 = this.pos_4;
  if (t2 !== (t2 | 0))
    throw $.iae(t2);
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  t1[t2] = value;
  t2 = this.box_0;
  var remaining = $.intTypeCheck($.sub(t2.remaining_1, 1), 'is$$int');
  t2.remaining_1 = remaining;
  if (remaining === 0 && !$.boolConversionCheck(this.result_3.get$isComplete(), 'is$bool'))
    this.completer_5.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"":
 ["future_8", "completer_7", "result_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (!$.boolConversionCheck(this.result_6.get$isComplete(), 'is$bool'))
    this.completer_7.completeException$2(exception, this.future_8.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitList_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._PendingSendPortFinder_visitMap_anon = {"":
 ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._StorageImpl_getValues_anon = {"":
 ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return this.values_0.push(v);
}
};

$$.HashMapImplementation_getValues__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_1;
  t2.i_1 = $.intTypeCheck($.add(t3, 1), 'is$$int');
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = value;
}
};

$$.LinkedHashMapImplementation_getValues__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  $.propertyTypeCheck(entry, 'is$KeyValuePair');
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_1;
  t2.index_1 = $.intTypeCheck($.add(t3, 1), 'is$$int');
  t2 = entry.get$value();
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = t2;
}
};

$$._NativeJsSendPort_send_anon = {"":
 ["this_5", "message_4", "replyTo_3"],
 "super": "Closure",
 call$0: function() {
  var t1 = {};
  var t2 = this.this_5;
  var t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  var isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  var shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  var msg = this.message_4;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send_anon0(t2, t1, shouldSerialize), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send_anon0 = {"":
 ["this_7", "box_0", "shouldSerialize_6"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if ($.boolConversionCheck(this.shouldSerialize_6, 'is$bool')) {
      var t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._StorageImpl_getKeys_anon = {"":
 ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return this.keys_0.push(k);
}
};

$$.HashMapImplementation_getKeys__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.i_10;
  t2.i_10 = $.intTypeCheck($.add(t3, 1), 'is$$int');
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = key;
}
};

$$.LinkedHashMapImplementation_getKeys__ = {"":
 ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  $.propertyTypeCheck(entry, 'is$KeyValuePair');
  var t1 = this.list_2;
  var t2 = this.box_0;
  var t3 = t2.index_10;
  t2.index_10 = $.intTypeCheck($.add(t3, 1), 'is$$int');
  t2 = entry.get$key();
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  t1[t3] = t2;
}
};

$$._Copier_visitMap_anon = {"":
 ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1 = this.box_0.copy_10;
  var t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"":
 ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (!$.boolConversionCheck(this.this_0.runIteration$0(), 'is$bool'))
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon0 = {"":
 ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon1 = {"":
 ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.BoundClosure = {'':
 ['self', 'target'],
 'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure0 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure1 = {'':
 ['self', 'target'],
 'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1(null)
}
};
$.startsWith = function(receiver, other) {
  $.checkString(other);
  var length$ = other.length;
  if ($.boolConversionCheck(length$ > receiver.length, 'is$bool'))
    return false;
  return other == receiver.substring(0, length$);
};

$.getRange = function(receiver, start, length$) {
  if (!$.isJsArray(receiver))
    return receiver.getRange$2(start, length$);
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.IllegalArgumentException$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.IllegalArgumentException$(length$));
  var t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.IllegalArgumentException$(length$));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var end = start + length$;
  if ($.gt(end, $.get$length(receiver)))
    throw $.$$throw($.IndexOutOfRangeException$(length$));
  if (t1)
    throw $.$$throw($.IllegalArgumentException$(length$));
  return receiver.slice(start, end);
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  if (start !== (start | 0))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  $.listTypeCheck(a, 'is$List');
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $._Lists_getRange$bailout(2, start, length$, accumulator, a);
  if ($.boolConversionCheck($.lt(length$, 0), 'is$bool'))
    throw $.$$throw($.IllegalArgumentException$('length'));
  if (start < 0)
    throw $.$$throw($.IndexOutOfRangeException$(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  var end = $.intTypeCheck(start + length$, 'is$$int');
  if (end !== (end | 0))
    return $._Lists_getRange$bailout(3, start, accumulator, a, end);
  if (end > a.length)
    throw $.$$throw($.IndexOutOfRangeException$(end));
  for (var i = start; $.boolConversionCheck($.lt(i, end), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.IllegalArgumentException$(newLength));
    if (newLength < 0)
      throw $.$$throw($.IndexOutOfRangeException$(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.IllegalArgumentException$(value));
  }
  return value;
};

$.convertDartClosureToJS = function(closure, arity) {
  if (closure == null)
    return;
  var function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.ObjectNotClosureException$ = function() {
  return new $.ObjectNotClosureException();
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.clear = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.clear$0();
  $.set$length(receiver, 0);
};

$.Primitives_objectTypeName = function(object) {
  var name$ = $.stringTypeCheck($.constructorNameFallback(object), 'is$String');
  if (name$ === 'Object') {
    var decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.charCodeAt(name$, 0) === 36 ? $.stringTypeCheck($.substring$1(name$, 1), 'is$String') : name$;
};

$.remainder = function(a, b) {
  if ($.checkNumbers(a, b))
    return a % b;
  else
    return a.remainder$1(b);
};

$.IndexIterator$ = function(length$, indexer, T) {
  $.intTypeCheck(length$, 'is$$int');
  $.functionTypeCheck(indexer, 'is$Func1');
  var t1 = new $.IndexIterator($.functionTypeCheck(indexer, 'is$Func1'), length$, 0);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  t1.IndexIterator$2(length$, indexer);
  return t1;
};

$._fillStatics = function(context) {
  $globals = context.isolateStatics;
  $static_init();

};

$.forEach = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.forEach$1(f);
  else
    return $.Collections_forEach(receiver, f);
};

$.Collections_forEach = function(iterable, f) {
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f, 'is$Function');
  for (var t1 = $.iterator(iterable); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    f.call$1(t1.next$0());
};

$.ListIterator$ = function(list, T) {
  var t1 = new $.ListIterator(0, $.listTypeCheck($.listTypeCheck(list, 'is$List'), 'is$List'));
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$.isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.isEmpty$0();
};

$.StackOverflowException$ = function() {
  return new $.StackOverflowException();
};

$._Collections_forEach = function(iterable, f) {
  $.listSuperNativeTypeCheck(iterable, 'is$Iterable');
  $.functionTypeCheck(f, 'is$Function');
  for (var t1 = $.iterator(iterable); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    f.call$1(t1.next$0());
};

$.dynamicFunction = function(name$) {
  var f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  var methods = {};
  var dartMethod = Object.getPrototypeOf($.CTC32)[name$];
  if (!(dartMethod == null))
    $.propertySet(methods, 'Object', dartMethod);
  var bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.buildDynamicMetadata = function(inputTable) {
  $.listTypeCheck(inputTable, 'is$List');
  var result = [];
  for (var i = 0; $.listTypeCheck(inputTable, 'is$List'), $.boolConversionCheck($.lt(i, inputTable.length), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    $.listTypeCheck(inputTable, 'is$List');
    var t1 = inputTable[i];
    $.listTypeCheck(t1, 'is$List');
    var tag = t1[0];
    var array = inputTable[i];
    $.listTypeCheck(array, 'is$List');
    var tags = array[1];
    var set = {};
    var tagNames = $.listTypeCheck(tags.split('|'), 'is$List');
    for (var j = 0, index = 1; $.listTypeCheck(tagNames, 'is$List'), $.boolConversionCheck($.lt(j, tagNames.length), 'is$bool'); j = $.intTypeCheck($.add(j, 1), 'is$$int')) {
      $.listTypeCheck(tagNames, 'is$List');
      $.propertySet(set, tagNames[j], true);
      index = j;
      array = tagNames;
    }
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.ListImplementation_List$from = function(other, E) {
  $.listSuperNativeTypeCheck(other, 'is$Iterable');
  $.listSuperNativeTypeCheck(other, 'is$Iterable');
  var result = $.ListImplementation_List(null);
  for (var t1 = $.iterator(other); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    result.push(t1.next$0());
  return result;
};

$._Timer$repeating = function(milliSeconds, callback) {
  $.functionTypeCheck(callback, 'is$Function');
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$._convertNativeToDart_AcceptStructuredClone = function(object) {
  var values = [];
  var copies = [];
  var t1 = new $._convertNativeToDart_AcceptStructuredClone_findSlot(copies, values);
  var t2 = new $._convertNativeToDart_AcceptStructuredClone_readSlot(copies);
  return new $._convertNativeToDart_AcceptStructuredClone_walk(new $._convertNativeToDart_AcceptStructuredClone_writeSlot(copies), t1, t2).call$1(object);
};

$.max = function(a, b) {
  $.numTypeCheck(b, 'is$num');
  if (typeof b === 'number') {
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === 'number') {
      if (typeof a === 'number')
        if (a === 0)
          return a + b;
      if ($.boolConversionCheck($.isNaN(b), 'is$bool'))
        return b;
      return a;
    }
    if ($.boolConversionCheck(b === 0 && $.boolConversionCheck($.isNegative(a), 'is$bool'), 'is$bool'))
      return b;
    return a;
  }
  throw $.$$throw($.IllegalArgumentException$(b));
  throw $.$$throw($.IllegalArgumentException$(a));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList($.listTypeCheck(_nodeList, 'is$List'));
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values = [];
  var copies = [];
  var t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  var t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  var t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  var t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  var copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t3, t1, t2).call$1(value);
  t4.call$0();
  return copy;
};

$.floor = function(receiver) {
  return Math.floor(receiver);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if ($.contains(userAgent, 'Chrome') || $.contains(userAgent, 'DumpRenderTree'))
    return $.typeNameInChrome;
  else if ($.contains(userAgent, 'Firefox'))
    return $.typeNameInFirefox;
  else if ($.contains(userAgent, 'MSIE'))
    return $.typeNameInIE;
  else if ($.contains(userAgent, 'Opera'))
    return $.typeNameInOpera;
  else if ($.contains(userAgent, 'Safari'))
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.IllegalArgumentException$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$._convertDartToNative_SerializedScriptValue = function(value) {
  return $._convertDartToNative_PrepareForStructuredClone(value);
};

$._deserializeMessage = function(message) {
  if ($.boolConversionCheck($._globalState().get$needSerialization(), 'is$bool'))
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$.indexSet$slow = function(a, index, value) {
  if ($.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.IllegalArgumentException$(index));
    if ($.boolConversionCheck(index < 0 || $.ge(index, $.get$length(a)), 'is$bool'))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  if (!(target == null))
    target.builtin$typeInfo = typeInfo;
};

$.hashCode = function(receiver) {
  if (typeof receiver === 'number')
    return receiver & 0x1FFFFFFF;
  if (!(typeof receiver === 'string'))
    return receiver.hashCode$0();
  var length$ = receiver.length;
  for (var hash = 0, i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var t1 = $.add(hash, receiver.charCodeAt(i));
    if (typeof t1 !== 'number')
      throw $.iae(t1);
    hash = 536870911 & t1;
    var hash0 = 536870911 & hash + 524287 & hash << 10;
    hash0 = $.intTypeCheck((hash0 ^ $.shr(hash0, 6)) >>> 0, 'is$$int');
    hash = hash0;
  }
  if (typeof hash !== 'number')
    throw $.iae(hash);
  hash0 = 536870911 & hash + 67108863 & hash << 3;
  hash0 = $.intTypeCheck((hash0 ^ $.shr(hash0, 11)) >>> 0, 'is$$int');
  if (typeof hash0 !== 'number')
    throw $.iae(hash0);
  return 536870911 & hash0 + 16383 & hash0 << 15;
};

$.FutureImpl_FutureImpl$immediate = function(value, T) {
  var res = $.FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$._waitForPendingPorts = function(message, callback) {
  $.functionTypeCheck(callback, 'is$Function');
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.HighScoreView$ = function(_width, _height, _mineCount, _div, _storage) {
  var t1 = new $.HighScoreView(_width, _height, _mineCount, _div, $.propertyTypeCheck(_storage, 'is$GameStorage'));
  t1.HighScoreView$5(_width, _height, _mineCount, _div, _storage);
  return t1;
};

$.GameStorage$ = function() {
  var t1 = $.EventHandle$();
  var t2 = $.window().get$localStorage();
  return new $.GameStorage($.propertyTypeCheck(t1, 'is$EventHandle'), $.callTypeCheck(t2, 'is$Storage'));
};

$.charCodeAt = function(receiver, index) {
  if (typeof receiver === 'string') {
    if (index < 0)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    if (index >= receiver.length)
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return receiver.charCodeAt(index);
  } else
    return receiver.charCodeAt$1(index);
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.functionTypeCheck($.getFunctionForTypeNameOf(), 'is$Function');
  return $._getTypeNameOf.call$1(obj);
};

$.ListImplementation_List = function(length$, E) {
  return $.Primitives_newList($.intTypeCheck(length$, 'is$$int'));
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$.contains$1 = function(receiver, other) {
  return $.contains$2(receiver, other, 0);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($.boolConversionCheck($._Device_isFirefox(), 'is$bool'))
      $._cachedBrowserPrefix = '-moz-';
    else if ($.boolConversionCheck($._Device_isIE(), 'is$bool'))
      $._cachedBrowserPrefix = '-ms-';
    else if ($.boolConversionCheck($._Device_isOpera(), 'is$bool'))
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.negate$0();
};

$.NoSuchMethodError$ = function(_receiver, _functionName, _arguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, $.stringTypeCheck(_functionName, 'is$String'), _arguments, existingArgumentNames);
};

$.parseInt = function(string) {
  return $.int_parse($.stringTypeCheck(string, 'is$String'));
};

$.Primitives_parseInt = function(string) {
  $.checkString(string);
  var match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  var base = !($.index(match, 1) == null) ? 16 : 10;
  var result = parseInt(string, base);
  if ($.boolConversionCheck($.isNaN(result), 'is$bool'))
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.add$1 = function(receiver, value) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'add');
    receiver.push(value);
    return;
  }
  return receiver.add$1(value);
};

$._Timer$ = function(milliSeconds, callback) {
  $.functionTypeCheck(callback, 'is$Function');
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  $.stringTypeCheck(name$, 'is$String');
  $.listTypeCheck(arguments$, 'is$List');
  var tag = $.stringTypeCheck($.getTypeNameOf(obj), 'is$String');
  var method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (var i = 0; t1 = $._dynamicMetadata0(), $.listTypeCheck(t1, 'is$List'), $.boolConversionCheck($.lt(i, t1.length), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      var t1 = $._dynamicMetadata0();
      $.listTypeCheck(t1, 'is$List');
      var entry = $.propertyTypeCheck(t1[i], 'is$MetaInfo');
      if (entry.get$_set()[tag]) {
        t1 = entry.get$_tag();
        $.stringTypeCheck(t1, 'is$String');
        method = methods[t1];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods['Object'];
  var proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.isNaN = function(receiver) {
  return isNaN(receiver);
};

$.int_parse = function(string) {
  return $.Primitives_parseInt(string);
};

$.regExpMakeNative = function(regExp, global) {
  var pattern = $.stringTypeCheck(regExp.get$pattern(), 'is$String');
  var multiLine = $.boolTypeCheck(regExp.get$multiLine(), 'is$bool');
  var ignoreCase = $.boolTypeCheck(regExp.get$ignoreCase(), 'is$bool');
  $.checkString(pattern);
  var sb = $.propertyTypeCheck($.StringBufferImpl$(''), 'is$StringBuffer');
  if (multiLine)
    $.add$1(sb, 'm');
  if (ignoreCase)
    $.add$1(sb, 'i');
  if (global)
    $.add$1(sb, 'g');
  try {
    return new RegExp(pattern, $.toString(sb));
  } catch (exception) {
    var t1 = $.unwrapException(exception);
    var e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.main = function() {
  var gameView = $.GameView$(16, 16, 40, $.callTypeCheck($.query('#sweeperTable'), 'is$TableElement'), $.callTypeCheck($.query('#minesLeft'), 'is$Element'), $.callTypeCheck($.query('#gameState'), 'is$Element'), $.callTypeCheck($.query('#clock'), 'is$Element'));
  $.HighScoreView$(16, 16, 40, $.callTypeCheck($.query('#highScore'), 'is$DivElement'), gameView.gameStorage);
  $.add$1($.callTypeCheck($.query('#newGame'), 'is$ButtonElement').get$on().get$click(), new $.main_anon(gameView));
};

$.ceil = function(receiver) {
  return Math.ceil(receiver);
};

$.Primitives_getYear = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCFullYear() : $.Primitives_lazyAsJsDate(receiver).getFullYear();
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$.Primitives_getHours = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCHours() : $.Primitives_lazyAsJsDate(receiver).getHours();
};

$.boolTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'boolean')
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement bool'));
};

$.Maps_mapToString = function(m) {
  $.callTypeCheck(m, 'is$Map');
  var result = $.StringBufferImpl$('');
  $.Maps__emitMap(m, result, $.ListImplementation_List(null));
  return result.toString$0();
};

$.GlobalId$_internal = function(value) {
  $.intTypeCheck(value, 'is$$int');
  return new $.GlobalId(value, $.Util_getHashCode([value]));
};

$.UnsupportedOperationException$ = function(_message) {
  return new $.UnsupportedOperationException(_message);
};

$.removeLast = function(receiver) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'removeLast');
    if ($.get$length(receiver) === 0)
      throw $.$$throw($.IndexOutOfRangeException$(-1));
    return receiver.pop();
  }
  return receiver.removeLast$0();
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  $.functionTypeCheck(closure, 'is$Function');
  $.intTypeCheck(numberOfArguments, 'is$$int');
  if (numberOfArguments === 0)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (numberOfArguments === 1)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (numberOfArguments === 2)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  $.intTypeCheck(isolateId, 'is$$int');
  return new $._NativeJsSendPort($.propertyTypeCheck(_receivePort, 'is$_ReceivePortImpl'), isolateId);
};

$.Field_Field = function(mineCount, cols, rows, seed) {
  if (typeof mineCount !== 'number')
    return $.Field_Field$bailout(1, mineCount, cols, rows, seed);
  var squares = $.ListImplementation_List(null, 'bool');
  $.setRuntimeTypeInfo(squares, { 'E': 'bool' });
  $.insertRange$3(squares, 0, $.mul(rows, cols), false);
  $.assert(mineCount < squares.length);
  $.assert(mineCount > 0);
  var rnd = $.Random_Random(seed);
  for (var i = 0; $.boolConversionCheck($.lt(i, mineCount), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var index = null;
    do {
      index = $.intTypeCheck(rnd.nextInt$1(squares.length), 'is$$int');
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= squares.length)
        throw $.ioore(index);
    } while ($.boolConversionCheck(squares[index], 'is$bool'));
    squares[index] = true;
  }
  return $.Field$_internal(mineCount, cols, $.ReadOnlyCollection$(squares, 'bool'));
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.addLast = function(receiver, value) {
  if (!$.isJsArray(receiver))
    return receiver.addLast$1(value);
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
};

$._isJavaScriptSimpleObject = function(value) {
  return Object.getPrototypeOf(value) === Object.prototype;
};

$.ioore = function(index) {
  throw $.$$throw($.IndexOutOfRangeException$(index));
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.Array2d$wrap = function(width, source, T) {
  if ($.boolConversionCheck(!(width == null) && $.boolConversionCheck($.gt(width, 0), 'is$bool') && true, 'is$bool')) {
    var t1 = source.length;
    if (typeof width !== 'number')
      throw $.iae(width);
    t1 = $.tdiv(t1, width);
  } else
    t1 = 0;
  var t2 = new $.Array2d(width, $.intTypeCheck(t1, 'is$$int'), source);
  $.setRuntimeTypeInfo(t2, { 'T': T });
  t2.Array2d$wrap$2(width, source);
  return t2;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.abs = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.abs$0();
  return Math.abs(receiver);
};

$._callInIsolate = function(isolate, function$) {
  $.propertyTypeCheck(isolate, 'is$_IsolateContext').eval$1($.functionTypeCheck(function$, 'is$Function'));
  $._globalState().get$topEventLoop().run$0();
};

$.Primitives_getMilliseconds = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() : $.Primitives_lazyAsJsDate(receiver).getMilliseconds();
};

$.DateImplementation$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateImplementation($.intTypeCheck(millisecondsSinceEpoch, 'is$$int'), $.boolTypeCheck(isUtc, 'is$bool'));
  t1.DateImplementation$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.mod = function(a, b) {
  if ($.checkNumbers(a, b)) {
    var result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$.boolConversionCheck = function(value) {
  $.boolTypeCheck(value);
  $.assert(!(value == null));
  return value;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata($.listTypeCheck(inputTable, 'is$List'));
  $._dynamicMetadata(t1);
};

$.ExceptionImplementation$ = function(msg) {
  return new $.ExceptionImplementation(msg);
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document')
    return 'HTMLDocument';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.Collections_collectionToString = function(c) {
  $.listSuperNativeTypeCheck(c, 'is$Collection');
  var result = $.StringBufferImpl$('');
  $.Collections__emitCollection(c, result, $.ListImplementation_List(null));
  return result.toString$0();
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  else {
    $.checkNull(element);
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.numTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number')
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement num'));
};

$.Primitives_newList = function(length$) {
  if (length$ == null)
    return new Array();
  if ($.boolConversionCheck(!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0, 'is$bool'))
    throw $.$$throw($.IllegalArgumentException$(length$));
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$.DoubleLinkedQueue$ = function(E) {
  var t1 = new $.DoubleLinkedQueue(null);
  $.setRuntimeTypeInfo(t1, { 'E': E });
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$._globalState = function() {
return $globalState;
};

$._globalState0 = function(val) {
  $.propertyTypeCheck(val, 'is$_Manager');
$globalState = val;
};

$.substring$2 = function(receiver, startIndex, endIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$2(startIndex, endIndex);
  $.checkNum(startIndex);
  var length$ = receiver.length;
  if (endIndex == null)
    endIndex = length$;
  $.checkNum(endIndex);
  if (startIndex < 0)
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.gt(startIndex, endIndex))
    throw $.$$throw($.IndexOutOfRangeException$(startIndex));
  if ($.boolConversionCheck($.gt(endIndex, length$), 'is$bool'))
    throw $.$$throw($.IndexOutOfRangeException$(endIndex));
  return $.substringUnchecked(receiver, startIndex, endIndex);
};

$.require = function(truth, message) {
  if (!$.boolTypeCheck(truth, 'is$bool'))
    throw $.$$throw($.ExceptionImplementation$(message));
};

$.StringBufferImpl$ = function(content$) {
  var t1 = new $.StringBufferImpl(null, null);
  t1.StringBufferImpl$1(content$);
  return t1;
};

$.getRuntimeTypeInfo = function(target) {
  if (target == null)
    return;
  var res = target.builtin$typeInfo;
  return res == null ? {} : res;
};

$.window = function() {
return window;
};

$.callTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value[property]())
    return value;
  $.propertyTypeError(value, property);
};

$.HashMapImplementation$ = function(K, V) {
  var t1 = $.intTypeCheck(null, 'is$$int');
  t1 = new $.HashMapImplementation(null, null, t1, t1, t1);
  $.setRuntimeTypeInfo(t1, { 'K': K, 'V': V });
  t1.HashMapImplementation$0();
  return t1;
};

$.Primitives_getMinutes = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCMinutes() : $.Primitives_lazyAsJsDate(receiver).getMinutes();
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getDay = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCDate() : $.Primitives_lazyAsJsDate(receiver).getDate();
};

$._FixedSizeListIterator$ = function(array, T) {
  $.listTypeCheck(array, 'is$List');
  var t1 = new $._FixedSizeListIterator($.intTypeCheck($.get$length(array), 'is$$int'), $.listTypeCheck(array, 'is$List'), 0);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.DetailedIllegalArgumentException$ = function(arg, message) {
  return new $.DetailedIllegalArgumentException(arg, message, '');
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.regExpTest = function(regExp, str) {
  $.stringTypeCheck(str, 'is$String');
  return $.regExpGetNative(regExp).test(str);
};

$.HashMapImplementation__nextProbe = function(currentProbe, numberOfProbes, length$) {
  $.intTypeCheck(length$, 'is$$int');
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.Coordinate$ = function(x, y) {
  return new $.Coordinate($.numTypeCheck(x, 'is$num'), $.numTypeCheck(y, 'is$num'));
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator = $.propertyTypeCheck($.iterator(keyValuePairs), 'is$Iterator');
  var result = $.callTypeCheck($.LinkedHashMapImplementation$(), 'is$Map');
  for (; $.boolConversionCheck(iterator.hasNext$0(), 'is$bool');)
    result.operator$indexSet$2($.stringTypeCheck(iterator.next$0(), 'is$String'), iterator.next$0());
  return result;
};

$.Tuple$ = function(Item1, Item2, T1, T2) {
  var t1 = new $.Tuple(Item1, Item2);
  $.setRuntimeTypeInfo(t1, { 'T1': T1, 'T2': T2 });
  return t1;
};

$.CompleterImpl$ = function(T) {
  var t1 = new $.CompleterImpl($.propertyTypeCheck($.FutureImpl$(), 'is$FutureImpl'));
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$.HashMapImplementation__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$.NoMoreElementsException$ = function() {
  return new $.NoMoreElementsException();
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.iae = function(argument) {
  throw $.$$throw($.IllegalArgumentException$(argument));
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.Collections__emitCollection = function(c, result, visiting) {
  $.listSuperNativeTypeCheck(c, 'is$Collection');
  $.propertyTypeCheck(result, 'is$StringBuffer');
  $.listTypeCheck(visiting, 'is$List');
  $.add$1(visiting, c);
  var isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  $.add$1(result, isList ? '[' : '{');
  for (var t1 = $.iterator(c), first = true; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    if (!first)
      $.add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
    first = false;
  }
  $.add$1(result, isList ? ']' : '}');
  $.removeLast(visiting);
};

$.FilteredElementList$ = function(node) {
  $.callTypeCheck(node, 'is$Node');
  return new $.FilteredElementList(node, $.callTypeCheck(node.get$nodes(), 'is$NodeList'));
};

$._document = function() {
return document;
};

$.addAll = function(receiver, collection) {
  if (!$.isJsArray(receiver))
    return receiver.addAll$1(collection);
  var iterator = $.iterator(collection);
  for (; $.boolConversionCheck(iterator.hasNext$0(), 'is$bool');)
    $.add$1(receiver, iterator.next$0());
};

$.StringImplementation__toJsStringArray = function(strings) {
  $.listTypeCheck(strings, 'is$List');
  if (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior())
    return $.StringImplementation__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  var length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      var string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
      if (i < 0 || i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.listInsertRange = function(receiver, start, length$, initialValue) {
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.IllegalArgumentException$(length$));
  if (length$ < 0)
    throw $.$$throw($.IllegalArgumentException$(length$));
  var receiverLength = receiver.length;
  if ($.boolConversionCheck(start < 0 || start > receiverLength, 'is$bool'))
    throw $.$$throw($.IndexOutOfRangeException$(start));
  var t1 = receiverLength + length$;
  $.set$length(receiver, t1);
  var t2 = start + length$;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (var i = start; $.boolConversionCheck($.lt(i, t2), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
      $.indexSet(receiver, i, initialValue);
  $.set$length(receiver, t1);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException($.stringTypeCheck(_pattern, 'is$String'), _errmsg);
};

$._timerFactory = function(millis, callback, repeating) {
  $.intTypeCheck(millis, 'is$$int');
  $.functionTypeCheck(callback, 'is$Function');
  return $.boolTypeCheck(repeating, 'is$bool') ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.listSuperNativeTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()))
    return value;
  if (value[property]())
    return value;
  $.propertyTypeError(value, property);
};

$.Array2d_Array2d = function(width, height, initialValue, T) {
  $.intTypeCheck(width, 'is$$int');
  $.intTypeCheck(height, 'is$$int');
  $.requireArgumentNotNull(width, 'width');
  $.requireArgumentNotNull(height, 'height');
  $.requireArgument($.gt(width, 0), 'width', null);
  $.requireArgument($.gt(height, 0), 'height', null);
  var s = $.ListImplementation_List(null, T);
  $.setRuntimeTypeInfo(s, { 'E': T });
  $.insertRange$3(s, 0, $.mul(width, height), initialValue);
  return $.Array2d$wrap(width, s);
};

$.query = function(selector) {
  return $._document().query$1(selector);
};

$.TypeErrorImplementation$ = function(msg) {
  return new $.TypeErrorImplementation(msg);
};

$.constructorNameFallback = function(obj) {
  var constructor$ = obj.constructor;
  if (typeof(constructor$) === 'function') {
    var name$ = constructor$.name;
    if (typeof name$ === 'string')
      var t1 = $.boolConversionCheck(!(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype'), 'is$bool');
    else
      t1 = false;
    if ($.boolConversionCheck(t1, 'is$bool'))
      return name$;
  }
  var string = Object.prototype.toString.call(obj);
  return string.substring(8, string.length - 1);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.callTypeCheck(element.get$$$dom_children(), 'is$_HTMLCollectionImpl'));
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$.unwrapException = function(ex) {
  if ("dartException" in ex)
    return ex.dartException;
  var message = ex.message;
  if (ex instanceof TypeError) {
    var type = ex.type;
    var name$ = ex.arguments ? ex.arguments[0] : "";
    if (!$.boolConversionCheck($.eq(type, 'property_not_function'), 'is$bool')) {
      if (!$.boolConversionCheck($.eq(type, 'called_non_callable'), 'is$bool'))
        var t1 = $.boolConversionCheck($.boolConversionCheck($.eq(type, 'non_object_property_call'), 'is$bool') || $.boolConversionCheck($.eq(type, 'non_object_property_load'), 'is$bool'), 'is$bool');
      else
        t1 = true;
      $.boolConversionCheck(t1, 'is$bool');
    } else
      t1 = true;
    if ($.boolConversionCheck(t1, 'is$bool'))
      if ($.boolConversionCheck(typeof name$ === 'string' && $.boolConversionCheck($.startsWith(name$, 'call$'), 'is$bool'), 'is$bool'))
        return $.ObjectNotClosureException$();
      else
        return $.NullPointerException$(null, $.CTC1);
    else if ($.boolConversionCheck($.eq(type, 'undefined_method'), 'is$bool'))
      if ($.boolConversionCheck(typeof name$ === 'string' && $.boolConversionCheck($.startsWith(name$, 'call$'), 'is$bool'), 'is$bool'))
        return $.ObjectNotClosureException$();
      else
        return $.NoSuchMethodError$('', name$, [], null);
    var ieErrorCode = ex.number & 0xffff;
    var ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string') {
      if (!$.boolConversionCheck($.endsWith(message, 'is null'), 'is$bool'))
        t1 = $.boolConversionCheck($.boolConversionCheck($.endsWith(message, 'is undefined'), 'is$bool') || $.boolConversionCheck($.endsWith(message, 'is null or undefined'), 'is$bool'), 'is$bool');
      else
        t1 = true;
      if ($.boolConversionCheck(t1, 'is$bool'))
        return $.NullPointerException$(null, $.CTC1);
      else {
        if (!$.boolConversionCheck($.contains$1(message, ' is not a function'), 'is$bool'))
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if ($.boolConversionCheck(t1, 'is$bool'))
          return $.NoSuchMethodError$('', '<unknown>', [], null);
      }
    }
    return $.ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if ($.boolConversionCheck(typeof message === 'string' && $.boolConversionCheck($.contains$1(message, 'call stack'), 'is$bool'), 'is$bool'))
      return $.StackOverflowException$();
    return $.IllegalArgumentException$('');
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if ($.boolConversionCheck(typeof message === 'string' && message === 'too much recursion', 'is$bool'))
      return $.StackOverflowException$();
  return ex;
};

$.GlobalId_GlobalId = function() {
  var t1 = $.GlobalId__globalId;
  $.GlobalId__globalId = $.intTypeCheck($.add(t1, 1), 'is$$int');
  return $.GlobalId$_internal(t1);
};

$.Vector$ = function(x, y) {
  return new $.Vector($.numTypeCheck(x, 'is$num'), $.numTypeCheck(y, 'is$num'));
};

$.filter = function(receiver, predicate) {
  if (!$.isJsArray(receiver))
    return receiver.filter$1(predicate);
  else
    return $.Collections_filter(receiver, [], predicate);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.IllegalArgumentException$(b));
    }
  return false;
};

$.Collections_filter = function(source, destination, f) {
  $.listSuperNativeTypeCheck(source, 'is$Iterable');
  $.functionTypeCheck(f, 'is$Function');
  for (var t1 = $.iterator(source); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    if ($.boolConversionCheck(f.call$1(t2), 'is$bool'))
      destination.push(t2);
  }
  return destination;
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.intTypeCheck($.add(t1, 1), 'is$$int');
  var t2 = new $._ReceivePortImpl($.intTypeCheck(t1, 'is$$int'), null);
  t2._ReceivePortImpl$0();
  return t2;
};

$._NodeListWrapper$ = function(list) {
  return new $._NodeListWrapper($.listTypeCheck($.listTypeCheck(list, 'is$List'), 'is$List'));
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  $.intTypeCheck(isolateId, 'is$$int');
  return new $._WorkerSendPort($.intTypeCheck(_workerId, 'is$$int'), $.intTypeCheck(_receivePortId, 'is$$int'), isolateId);
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.IllegalArgumentException$(value));
  return res;
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.IllegalArgumentException$(value));
  }
  return value;
};

$._DoubleLinkedQueueIterator$ = function(_sentinel, E) {
  $.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel');
  var t1 = new $._DoubleLinkedQueueIterator($.propertyTypeCheck(_sentinel, 'is$_DoubleLinkedQueueEntrySentinel'), null);
  $.setRuntimeTypeInfo(t1, { 'E': E });
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  $.listTypeCheck(a, 'is$List');
  if (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior())
    return $.Arrays_indexOf$bailout(1, element, startIndex, endIndex, a);
  $.intTypeCheck(endIndex, 'is$$int');
  if (endIndex !== (endIndex | 0))
    return $.Arrays_indexOf$bailout(2, element, startIndex, a, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (var i = startIndex; $.boolConversionCheck($.lt(i, endIndex), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.eq(a[i], element), 'is$bool'))
      return i;
  }
  return -1;
};

$._Collections_filter = function(source, destination, f) {
  $.listSuperNativeTypeCheck(source, 'is$Iterable');
  $.functionTypeCheck(f, 'is$Function');
  for (var t1 = $.iterator(source); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    if ($.boolConversionCheck(f.call$1(t2), 'is$bool'))
      destination.push(t2);
  }
  return destination;
};

$._WhereIterator$ = function(_source, _func, T) {
  var t1 = new $._WhereIterator($.propertyTypeCheck(_source, 'is$Iterator'), $.functionTypeCheck(_func, 'is$Func1'), null, null);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$._Device_isIE = function() {
  return !$.boolConversionCheck($._Device_isOpera(), 'is$bool') && $.boolConversionCheck($.contains$2($._Device_userAgent(), 'MSIE', 0), 'is$bool');
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$.EventHandle$ = function(T) {
  var t1 = new $.EventHandle(null, false);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$._ElementFactoryProvider_Element$tag = function(tag) {
return document.createElement(tag)
};

$.startRootIsolate = function(entry) {
  var t1 = $._Manager$();
  $._globalState0(t1);
  if ($.boolConversionCheck($._globalState().get$isWorker(), 'is$bool'))
    return;
  var rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $._fillStatics(rootContext);
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.Collections__emitObject = function(o, result, visiting) {
  $.propertyTypeCheck(result, 'is$StringBuffer');
  $.listTypeCheck(visiting, 'is$List');
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add$1(result, o == null ? 'null' : o);
};

$.requireArgumentNotNull = function(argument, argName) {
  if (argument == null)
    throw $.$$throw($.NullArgumentException$(argName));
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$._EventLoop$ = function() {
  return new $._EventLoop($.propertyTypeCheck($.DoubleLinkedQueue$('_IsolateEvent'), 'is$Queue'));
};

$.Field$_internal = function(mineCount, cols, source) {
  $.intTypeCheck(cols, 'is$$int');
  $.propertyTypeCheck(source, 'is$ReadOnlyCollection');
  var t1 = $.Array2d_Array2d(cols, $.tdiv($.get$length(source), cols), null, 'int');
  var t2 = $.boolConversionCheck(!(cols == null) && $.boolConversionCheck($.gt(cols, 0), 'is$bool') && !(source == null), 'is$bool') ? $.tdiv($.get$length(source), cols) : 0;
  var t3 = new $.Field($.intTypeCheck(mineCount, 'is$$int'), $.propertyTypeCheck(t1, 'is$Array2d'), cols, $.intTypeCheck(t2, 'is$$int'), $.listTypeCheck(source, 'is$List'));
  t3.Array2d$wrap$2(cols, source);
  t3.Field$_internal$3(mineCount, cols, source);
  return t3;
};

$.toString = function(value) {
  if (typeof value == "object" && value !== null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$.intTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'number' && Math.floor(value) === value)
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement int'));
};

$.substringUnchecked = function(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};

$.propertyTypeCheck = function(value, property) {
  if (value == null)
    return value;
  if (!!value[property])
    return value;
  $.propertyTypeError(value, property);
};

$.listTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()))
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement List'));
};

$.contains = function(userAgent, name$) {
  return !(userAgent.indexOf(name$) === -1);
};

$._convertNativeToDart_IDBAny = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object);
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.Random_Random = function(seed) {
  return $.CTC24;
};

$.endsWith = function(receiver, other) {
  $.checkString(other);
  var receiverLength = receiver.length;
  var otherLength = other.length;
  if ($.boolConversionCheck(otherLength > receiverLength, 'is$bool'))
    return false;
  return other === $.substring$1(receiver, receiverLength - otherLength);
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.assert = function(condition) {
  if (typeof condition === 'function' || typeof condition === 'object' && condition !== null && !!condition.is$Function)
    condition = condition.call$0();
  if (!(typeof condition === 'boolean'))
    throw $.$$throw($.TypeErrorImplementation$($.S(condition) + ' does not implement bool'));
  if (!condition)
    throw $.$$throw($.AssertionError$());
};

$.GameView$ = function(width, height, mineCount, _table, _leftCountDiv, _gameStateDiv, _clockDiv) {
  var t1 = new $.GameView(_table, _leftCountDiv, _gameStateDiv, _clockDiv, width, height, mineCount, $.GameStorage$(), null, null, null, $.intTypeCheck(null, 'is$$int'));
  t1.GameManager$3(width, height, mineCount);
  return t1;
};

$.Primitives_getMonth = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = $.listTypeCheck(table, 'is$List');
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.Primitives_getSeconds = function(receiver) {
  return $.boolConversionCheck(receiver.isUtc, 'is$bool') ? $.Primitives_lazyAsJsDate(receiver).getUTCSeconds() : $.Primitives_lazyAsJsDate(receiver).getSeconds();
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.isNegative = function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
};

$.Util_getHashCode = function(source) {
  for (var t1 = $.iterator(source), hash = 0; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    t2 = $.add(hash, $.intTypeCheck(t2 == null ? 0 : $.hashCode(t2), 'is$$int'));
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    hash = 536870911 & t2;
    var hash0 = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    hash0 = $.intTypeCheck((hash0 ^ $.shr(hash0, 6)) >>> 0, 'is$$int');
    hash = hash0;
  }
  if (typeof hash !== 'number')
    throw $.iae(hash);
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = $.intTypeCheck((hash0 ^ $.shr(hash0, 11)) >>> 0, 'is$$int');
  if (typeof hash0 !== 'number')
    throw $.iae(hash0);
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
};

$.IllegalArgumentException$ = function(arg) {
  return new $.IllegalArgumentException(arg);
};

$.functionTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'function' || typeof value === 'object' && value !== null && !!value.is$Function)
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement Function'));
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1 = {};
  $.listTypeCheck(futures, 'is$List');
  if (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior())
    return $.Futures_wait$bailout(1, t1, futures);
  if ($.boolConversionCheck($.isEmpty(futures), 'is$bool'))
    return $.FutureImpl_FutureImpl$immediate($.CTC1, 'List');
  var completer = $.propertyTypeCheck($.CompleterImpl$('List'), 'is$Completer');
  var result = $.propertyTypeCheck(completer.get$future(), 'is$Future');
  t1.remaining_1 = futures.length;
  var values = $.ListImplementation_List(futures.length);
  for (var i = 0; $.boolConversionCheck($.lt(i, futures.length), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= futures.length)
      throw $.ioore(i);
    var future = $.propertyTypeCheck(futures[i], 'is$Future');
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC1));
  return object;
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  $.listTypeCheck(src, 'is$List');
  $.listTypeCheck(dst, 'is$List');
  $.intTypeCheck(count, 'is$$int');
  if (srcStart < dstStart) {
    if (typeof count !== 'number')
      throw $.iae(count);
    var i = $.intTypeCheck(srcStart + count - 1, 'is$$int');
    if (i !== (i | 0))
      return $.Arrays_copy$bailout(1, srcStart, count, src, i, dst, dstStart);
    var j = $.intTypeCheck(dstStart + count - 1, 'is$$int');
    if (j !== (j | 0))
      return $.Arrays_copy$bailout(2, dst, srcStart, j, src, i, 0);
    for (; $.boolConversionCheck($.ge(i, srcStart), 'is$bool'); i = $.intTypeCheck($.sub(i, 1), 'is$$int'), j = $.intTypeCheck($.sub(j, 1), 'is$$int'))
      $.indexSet(dst, j, $.index(src, i));
  } else {
    i = srcStart;
    j = dstStart;
    while (true) {
      if (typeof count !== 'number')
        throw $.iae(count);
      if (!$.boolConversionCheck($.lt(i, srcStart + count), 'is$bool'))
        break;
      $.indexSet(dst, j, $.index(src, i));
      i = $.intTypeCheck($.add(i, 1), 'is$$int');
      j = $.intTypeCheck($.add(j, 1), 'is$$int');
    }
  }
};

$.DateImplementation$now = function() {
  var t1 = new $.DateImplementation($.intTypeCheck($.Primitives_dateNow(), 'is$$int'), false);
  t1.DateImplementation$now$0();
  return t1;
};

$.indexSet = function(a, index, value) {
  if (a.constructor === Array && !a.immutable$list) {
    var key = index >>> 0;
    if ($.boolConversionCheck(key === index && key < a.length, 'is$bool')) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.index$slow = function(a, index) {
  if (typeof a === 'string' || $.isJsArray(a)) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.IllegalArgumentException$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.IllegalArgumentException$(index));
    }
    if ($.boolConversionCheck($.boolConversionCheck($.lt(index, 0), 'is$bool') || $.boolConversionCheck($.ge(index, $.get$length(a)), 'is$bool'), 'is$bool'))
      throw $.$$throw($.IndexOutOfRangeException$(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.AssertionError$ = function() {
  return new $.AssertionError();
};

$.Collections__containsRef = function(c, ref) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(c, 'is$Collection')); $.boolConversionCheck(t1.hasNext$0(), 'is$bool');) {
    var t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.stringTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === 'string')
    return value;
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement String'));
};

$.Game$ = function(field) {
  $.propertyTypeCheck(field, 'is$Field');
  var t1 = $.EventHandle$('EventArgs');
  var t2 = $.EventHandle$('GameState');
  var t3 = new $.Game(field, $.propertyTypeCheck($.Array2d_Array2d(field.get$width(), field.get$height(), $.CTC17, 'SquareState'), 'is$Array2d'), $.propertyTypeCheck(t1, 'is$EventHandle'), $.propertyTypeCheck(t2, 'is$EventHandle'), $.CTC19, null, null, null, null);
  t3.Game$1(field);
  return t3;
};

$.$$throw = function(ex) {
  if (ex == null)
    ex = $.CTC0;
  var jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent($.propertyTypeCheck(isolate, 'is$_IsolateContext'), $.functionTypeCheck(fn, 'is$Function'), message);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.callTypeCheck(m, 'is$Map');
  $.propertyTypeCheck(result, 'is$StringBuffer');
  $.listTypeCheck(visiting, 'is$List');
  $.add$1(visiting, m);
  $.add$1(result, '{');
  t1.first_1 = true;
  $.forEach(m, new $.Maps__emitMap_anon(result, t1, visiting));
  $.add$1(result, '}');
  $.removeLast(visiting);
};

$._MessageTraverser_isPrimitive = function(x) {
  if (!(x == null))
    var t1 = $.boolConversionCheck(typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean', 'is$bool');
  else
    t1 = true;
  return t1;
};

$._Deserializer_isPrimitive = function(x) {
  if (!(x == null))
    var t1 = $.boolConversionCheck(typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean', 'is$bool');
  else
    t1 = true;
  return t1;
};

$.propertySet = function(object, property, value) {
  object[$.stringTypeCheck(property, 'is$String')] = value;
};

$.ReadOnlyCollection$ = function(source, T) {
  var t1 = $.ListImplementation_List$from(source, $.getRuntimeTypeInfo(this).T);
  $.setRuntimeTypeInfo(t1, { 'E': $.getRuntimeTypeInfo(this).T });
  t1 = new $.ReadOnlyCollection(t1);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$.min = function(a, b) {
  $.numTypeCheck(a, 'is$num');
  $.numTypeCheck(b, 'is$num');
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if ($.boolConversionCheck($.boolConversionCheck(a === 0 && $.boolConversionCheck($.isNegative(b), 'is$bool'), 'is$bool') || $.boolConversionCheck($.isNaN(b), 'is$bool'), 'is$bool'))
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.IllegalArgumentException$(b));
  }
  throw $.$$throw($.IllegalArgumentException$(a));
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedOperationException$(reason));
};

$.propertyTypeError = function(value, property) {
  var name$ = $.stringTypeCheck($.substring$2(property, 3, $.get$length(property)), 'is$String');
  throw $.$$throw($.TypeErrorImplementation$($.S(value) + ' does not implement ' + $.S(name$)));
};

$.sqrt = function(value) {
  return Math.sqrt($.checkNum($.numTypeCheck(value, 'is$num')));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedOperationException$(reason));
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$._serializeMessage = function(message) {
  if ($.boolConversionCheck($._globalState().get$needSerialization(), 'is$bool'))
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$.index = function(a, index) {
  if (typeof a == "string" || a.constructor === Array) {
    var key = index >>> 0;
    if ($.boolConversionCheck(key === index && key < a.length, 'is$bool'))
      return a[key];
  }
  return $.index$slow(a, index);
};

$.IndexOutOfRangeException$ = function(_value) {
  return new $.IndexOutOfRangeException(_value);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.KeyValuePair$ = function(key, value, K, V) {
  var t1 = new $.KeyValuePair(key, value);
  $.setRuntimeTypeInfo(t1, { 'K': K, 'V': V });
  return t1;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'FormData')
    return 'DOMFormData';
  return name$;
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.substring$1 = function(receiver, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$1(startIndex);
  return $.substring$2(receiver, startIndex, null);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.NullArgumentException$ = function(arg) {
  return new $.NullArgumentException(arg, arg);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.DurationImplementation$ = function(days, hours, minutes, seconds, milliseconds) {
  $.intTypeCheck(seconds, 'is$$int');
  $.intTypeCheck(milliseconds, 'is$$int');
  var t1 = days * 86400000 + hours * 3600000 + minutes * 60000;
  var t2 = $.mul(seconds, 1000);
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  t2 = t1 + t2;
  if (typeof milliseconds !== 'number')
    throw $.iae(milliseconds);
  return new $.DurationImplementation($.intTypeCheck(t2 + milliseconds, 'is$$int'));
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.last$0();
  return $.index(receiver, $.sub($.get$length(receiver), 1));
};

$.LinkedHashMapImplementation$ = function(K, V) {
  var t1 = new $.LinkedHashMapImplementation(null, null);
  $.setRuntimeTypeInfo(t1, { 'K': K, 'V': V });
  t1.LinkedHashMapImplementation$0();
  return t1;
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$._DoubleLinkedQueueEntrySentinel$ = function(E) {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  $.setRuntimeTypeInfo(t1, { 'E': E });
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.FutureImpl$ = function(T) {
  var t1 = new $.FutureImpl(false, null, null, null, false, [], [], []);
  $.setRuntimeTypeInfo(t1, { 'T': T });
  return t1;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$._ElementList$ = function(list) {
  return new $._ElementList($.listTypeCheck($.listTypeCheck(list, 'is$List'), 'is$List'));
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, $.stringTypeCheck(property, 'is$String'),
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  return !($.indexOf$2(receiver, other, startIndex) === -1);
};

$.requireArgument = function(truth, arg, message) {
  if (!$.boolTypeCheck(truth, 'is$bool'))
    if (!(message == null))
      throw $.$$throw($.DetailedIllegalArgumentException$(arg, message));
    else
      throw $.$$throw($.IllegalArgumentException$(arg));
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.IllegalArgumentException$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.insertRange$3 = function(receiver, start, length$, initialValue) {
  if (!$.isJsArray(receiver))
    return receiver.insertRange$3(start, length$, initialValue);
  return $.listInsertRange(receiver, start, length$, initialValue);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$._Manager$ = function() {
  var t1 = $.boolTypeCheck(null, 'is$bool');
  t1 = new $._Manager(0, 0, 1, null, null, null, t1, t1, t1, $.callTypeCheck(null, 'is$Map'), $.callTypeCheck(null, 'is$_ManagerStub'), $.callTypeCheck(null, 'is$Map'));
  t1._Manager$0();
  return t1;
};

$.Coordinate_difference = function(a, b) {
  return $.Vector$($.sub(a.x, b.get$x()), $.sub(a.y, b.get$y()));
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.DoubleLinkedQueueEntry$ = function(e, E) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  $.setRuntimeTypeInfo(t1, { 'E': E });
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.Arrays_copy$bailout = function(state, env0, env1, env2, env3, env4, env5) {
  switch (state) {
    case 1:
      var srcStart = env0;
      var count = env1;
      var src = env2;
      i = env3;
      var dst = env4;
      var dstStart = env5;
      break;
    case 2:
      dst = env0;
      srcStart = env1;
      j = env2;
      src = env3;
      i = env4;
      break;
  }
  switch (state) {
    case 0:
      $.listTypeCheck(src, 'is$List');
      $.listTypeCheck(dst, 'is$List');
      $.intTypeCheck(count, 'is$$int');
    default:
      if (state === 2 || state === 1 || state === 0 && srcStart < dstStart)
        switch (state) {
          case 0:
            if (typeof count !== 'number')
              throw $.iae(count);
            var i = $.intTypeCheck(srcStart + count - 1, 'is$$int');
          case 1:
            state = 0;
            var j = $.intTypeCheck(dstStart + count - 1, 'is$$int');
          case 2:
            state = 0;
            for (; $.boolConversionCheck($.ge(i, srcStart), 'is$bool'); i = $.intTypeCheck($.sub(i, 1), 'is$$int'), j = $.intTypeCheck($.sub(j, 1), 'is$$int'))
              $.indexSet(dst, j, $.index(src, i));
        }
      else {
        i = srcStart;
        j = dstStart;
        while (true) {
          if (typeof count !== 'number')
            throw $.iae(count);
          if (!$.boolConversionCheck($.lt(i, srcStart + count), 'is$bool'))
            break;
          $.indexSet(dst, j, $.index(src, i));
          i = $.intTypeCheck($.add(i, 1), 'is$$int');
          j = $.intTypeCheck($.add(j, 1), 'is$$int');
        }
      }
  }
};

$.Arrays_indexOf$bailout = function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var element = env0;
      var startIndex = env1;
      var endIndex = env2;
      var a = env3;
      break;
    case 2:
      element = env0;
      startIndex = env1;
      a = env2;
      endIndex = env3;
      break;
  }
  switch (state) {
    case 0:
      $.listTypeCheck(a, 'is$List');
    case 1:
      state = 0;
      $.intTypeCheck(endIndex, 'is$$int');
    case 2:
      state = 0;
      if ($.ge(startIndex, $.get$length(a)))
        return -1;
      if (startIndex < 0)
        startIndex = 0;
      for (var i = startIndex; $.boolConversionCheck($.lt(i, endIndex), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
        if ($.boolConversionCheck($.eq($.index(a, i), element), 'is$bool'))
          return i;
      return -1;
  }
};

$.Field_Field$bailout = function(state, mineCount, cols, rows, seed) {
  var squares = $.ListImplementation_List(null, 'bool');
  $.setRuntimeTypeInfo(squares, { 'E': 'bool' });
  $.insertRange$3(squares, 0, $.mul(rows, cols), false);
  $.assert($.lt(mineCount, squares.length));
  $.assert($.gt(mineCount, 0));
  var rnd = $.Random_Random(seed);
  for (var i = 0; $.boolConversionCheck($.lt(i, mineCount), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var index = null;
    do {
      index = $.intTypeCheck(rnd.nextInt$1(squares.length), 'is$$int');
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= squares.length)
        throw $.ioore(index);
    } while ($.boolConversionCheck(squares[index], 'is$bool'));
    squares[index] = true;
  }
  return $.Field$_internal(mineCount, cols, $.ReadOnlyCollection$(squares, 'bool'));
};

$._Lists_getRange$bailout = function(state, env0, env1, env2, env3) {
  switch (state) {
    case 1:
      var a = env0;
      var start = env1;
      var length$ = env2;
      var accumulator = env3;
      break;
    case 2:
      start = env0;
      length$ = env1;
      accumulator = env2;
      a = env3;
      break;
    case 3:
      start = env0;
      accumulator = env1;
      a = env2;
      end = env3;
      break;
  }
  switch (state) {
    case 0:
    case 1:
      state = 0;
      $.listTypeCheck(a, 'is$List');
    case 2:
      state = 0;
      if ($.boolConversionCheck($.lt(length$, 0), 'is$bool'))
        throw $.$$throw($.IllegalArgumentException$('length'));
      if ($.boolConversionCheck($.lt(start, 0), 'is$bool'))
        throw $.$$throw($.IndexOutOfRangeException$(start));
      var end = $.intTypeCheck($.add(start, length$), 'is$$int');
    case 3:
      state = 0;
      if ($.boolConversionCheck($.gt(end, $.get$length(a)), 'is$bool'))
        throw $.$$throw($.IndexOutOfRangeException$(end));
      for (var i = start; $.boolConversionCheck($.lt(i, end), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int'))
        accumulator.push($.index(a, i));
      return accumulator;
  }
};

$.StringImplementation__toJsStringArray$bailout = function(state, strings) {
  $.checkNull(strings);
  var length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (var i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      var string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
    }
    var array = strings;
  } else {
    array = $.ListImplementation_List(length$);
    for (i = 0; $.boolConversionCheck($.lt(i, length$), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.IllegalArgumentException$(string));
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.Futures_wait$bailout = function(state, t1, futures) {
  if ($.boolConversionCheck($.isEmpty(futures), 'is$bool'))
    return $.FutureImpl_FutureImpl$immediate($.CTC1, 'List');
  var completer = $.propertyTypeCheck($.CompleterImpl$('List'), 'is$Completer');
  var result = $.propertyTypeCheck(completer.get$future(), 'is$Future');
  t1.remaining_1 = $.intTypeCheck($.get$length(futures), 'is$$int');
  var values = $.ListImplementation_List($.get$length(futures));
  for (var i = 0; $.boolConversionCheck($.lt(i, $.get$length(futures)), 'is$bool'); i = $.intTypeCheck($.add(i, 1), 'is$$int')) {
    var future = $.propertyTypeCheck($.index(futures, i), 'is$Future');
    future.then$1(new $.Futures_wait_anon(completer, i, t1, result, values));
    future.handleException$1(new $.Futures_wait_anon0(future, completer, result));
  }
  return result;
};

$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC1 = Isolate.makeConstantList([]);
$.CTC34 = 'revealed';
$.CTC16 = new Isolate.$isolateProperties.SquareState('revealed');
$.CTC35 = 'structured clone of ArrayBufferView';
$.CTC9 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBufferView');
$.CTC36 = null;
$.CTC22 = new Isolate.$isolateProperties.NotImplementedException(null);
$.CTC37 = false;
$.CTC38 = '^#[_a-zA-Z]\\w*$';
$.CTC = new Isolate.$isolateProperties.JSSyntaxRegExp(false, false, '^#[_a-zA-Z]\\w*$');
$.CTC39 = 'structured clone of ArrayBuffer';
$.CTC8 = new Isolate.$isolateProperties.NotImplementedException('structured clone of ArrayBuffer');
$.CTC40 = 'flagged';
$.CTC18 = new Isolate.$isolateProperties.SquareState('flagged');
$.CTC15 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC41 = 'reset';
$.CTC19 = new Isolate.$isolateProperties.GameState('reset');
$.CTC42 = 'Mutation operations are not supported';
$.CTC23 = new Isolate.$isolateProperties.UnsupportedOperationException('Mutation operations are not supported');
$.CTC43 = 'structured clone of Date';
$.CTC3 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Date');
$.CTC44 = 'safe';
$.CTC30 = new Isolate.$isolateProperties.SquareState('safe');
$.CTC45 = 'must be implemented by subclass';
$.CTC26 = new Isolate.$isolateProperties.NotImplementedException('must be implemented by subclass');
$.CTC32 = new Isolate.$isolateProperties.Object();
$.CTC46 = 'Cannot add to immutable List.';
$.CTC2 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot add to immutable List.');
$.CTC33 = new Isolate.$isolateProperties.EmptyQueueException();
$.CTC47 = 'Cannot insertRange on immutable List.';
$.CTC21 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot insertRange on immutable List.');
$.CTC48 = 'mine';
$.CTC31 = new Isolate.$isolateProperties.SquareState('mine');
$.CTC49 = 'structured clone of Blob';
$.CTC6 = new Isolate.$isolateProperties.NotImplementedException('structured clone of Blob');
$.CTC50 = 'hidden';
$.CTC17 = new Isolate.$isolateProperties.SquareState('hidden');
$.CTC27 = new Isolate.$isolateProperties.EventArgs();
$.CTC51 = 'structured clone of RegExp';
$.CTC4 = new Isolate.$isolateProperties.NotImplementedException('structured clone of RegExp');
$.CTC52 = 'structured clone of FileList';
$.CTC7 = new Isolate.$isolateProperties.NotImplementedException('structured clone of FileList');
$.CTC53 = 'The input sequence is empty.';
$.CTC25 = new Isolate.$isolateProperties.InvalidOperationException('The input sequence is empty.');
$.CTC24 = new Isolate.$isolateProperties._Random();
$.CTC54 = 'started';
$.CTC20 = new Isolate.$isolateProperties.GameState('started');
$.CTC55 = 'won';
$.CTC28 = new Isolate.$isolateProperties.GameState('won');
$.CTC56 = 'lost';
$.CTC29 = new Isolate.$isolateProperties.GameState('lost');
$.CTC57 = 'structured clone of File';
$.CTC5 = new Isolate.$isolateProperties.NotImplementedException('structured clone of File');
$.CTC58 = 'structured clone of other type';
$.CTC10 = new Isolate.$isolateProperties.NotImplementedException('structured clone of other type');
$.CTC0 = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC1);
$.CTC59 = 'Invalid list length';
$.CTC14 = new Isolate.$isolateProperties.IllegalArgumentException('Invalid list length');
$.CTC60 = '';
$.CTC13 = new Isolate.$isolateProperties.UnsupportedOperationException('');
$.CTC11 = new Isolate.$isolateProperties.NoMoreElementsException();
$.CTC61 = 'Cannot removeLast on immutable List.';
$.CTC12 = new Isolate.$isolateProperties.UnsupportedOperationException('Cannot removeLast on immutable List.');
$.Duration_MILLISECONDS_PER_DAY = 86400000;
$.SquareState_mine = Isolate.$isolateProperties.CTC31;
$.Duration_HOURS_PER_DAY = 24;
$.HashMapImplementation__DELETED_KEY = Isolate.$isolateProperties.CTC15;
$.DateImplementation__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$.GameState_won = Isolate.$isolateProperties.CTC28;
$.SquareState_hidden = Isolate.$isolateProperties.CTC17;
$.GameView__yKey = 'y';
$.GameView__xKey = 'x';
$.HashMapImplementation__INITIAL_CAPACITY = 8;
$.SquareState_flagged = Isolate.$isolateProperties.CTC18;
$.Duration_MINUTES_PER_HOUR = 60;
$.Duration_SECONDS_PER_MINUTE = 60;
$.GlobalId__globalId = 0;
$._ReceivePortImpl__nextFreeId = 1;
$._TimerFactory__factory = null;
$._cachedBrowserPrefix = null;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.Duration_MILLISECONDS_PER_MINUTE = 60000;
$.GameState_lost = Isolate.$isolateProperties.CTC29;
$.SquareState_revealed = Isolate.$isolateProperties.CTC16;
$.GameState_reset = Isolate.$isolateProperties.CTC19;
$.Duration_MILLISECONDS_PER_SECOND = 1000;
$.Duration_MILLISECONDS_PER_HOUR = 3600000;
$.SquareState_safe = Isolate.$isolateProperties.CTC30;
$.GameState_started = Isolate.$isolateProperties.CTC20;
$._getTypeNameOf = null;
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, fields, methods) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], methods);
  }
  for (var method in methods) {
    $.dynamicFunction(method)[cls] = methods[method];
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$_DOMFileSystemSyncImpl: function() { return false; },
 is$_AudioContextImpl: function() { return false; },
 is$_SpeechGrammarListImpl: function() { return false; },
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$_NodeFilterImpl: function() { return false; },
 is$SessionDescription: function() { return false; },
 is$StyleSheet: function() { return false; },
 is$_ImageDataImpl: function() { return false; },
 is$RTCSessionDescription: function() { return false; },
 is$SVGElement: function() { return false; },
 is$_IDBDatabaseImpl: function() { return false; },
 is$_TouchListImpl: function() { return false; },
 is$SVGAnimatedRect: function() { return false; },
 is$_SpeechRecognitionResultListImpl: function() { return false; },
 is$_EventImpl: function() { return false; },
 is$_BarInfoImpl: function() { return false; },
 is$MediaController: function() { return false; },
 is$WorkerLocation: function() { return false; },
 is$Object: function() { return false; },
 is$_SVGAngleImpl: function() { return false; },
 is$_MediaErrorImpl: function() { return false; },
 is$SVGElementInstance: function() { return false; },
 is$CanvasRenderingContext2D: function() { return false; },
 is$_MediaStreamTrackListImpl: function() { return false; },
 is$ScriptProfileNode: function() { return false; },
 is$_StyleMediaImpl: function() { return false; },
 is$_MediaListImpl: function() { return false; },
 is$DOMPluginArray: function() { return false; },
 is$BatteryManager: function() { return false; },
 is$MediaError: function() { return false; },
 is$Document: function() { return false; },
 is$_SVGAnimatedNumberImpl: function() { return false; },
 is$IDBDatabase: function() { return false; },
 is$Event: function() { return false; },
 is$_DOMPluginArrayImpl: function() { return false; },
 is$Window: function() { return false; },
 is$MediaStream: function() { return false; },
 is$Location: function() { return false; },
 is$_RTCSessionDescriptionImpl: function() { return false; },
 is$SpeechRecognitionResult: function() { return false; },
 is$_SVGAnimatedLengthImpl: function() { return false; },
 is$SVGLengthList: function() { return false; },
 is$HttpRequestUpload: function() { return false; },
 is$_IDBObjectStoreImpl: function() { return false; },
 is$_WorkerContextImpl: function() { return false; },
 is$_HeadElementImpl: function() { return false; },
 is$_SVGStringListImpl: function() { return false; },
 is$NodeFilter: function() { return false; },
 is$_DOMErrorImpl: function() { return false; },
 is$SVGPreserveAspectRatio: function() { return false; },
 is$_JavaScriptCallFrameImpl: function() { return false; },
 is$Node: function() { return false; },
 is$_SVGAnimatedIntegerImpl: function() { return false; },
 is$_TextTrackImpl: function() { return false; },
 is$Touch: function() { return false; },
 is$SVGAngle: function() { return false; },
 is$_SVGRectImpl: function() { return false; },
 is$NodeList: function() { return false; },
 is$_Uint8ArrayImpl: function() { return false; },
 is$MediaList: function() { return false; },
 is$_WindowImpl: function() { return false; },
 is$_TextTrackListImpl: function() { return false; },
 is$MediaStreamList: function() { return false; },
 is$_DOMMimeTypeArrayImpl: function() { return false; },
 is$TextTrackCueList: function() { return false; },
 is$_SVGUseElementImpl: function() { return false; },
 is$MediaStreamTrack: function() { return false; },
 is$_CryptoImpl: function() { return false; },
 is$Storage: function() { return false; },
 is$_SVGAnimatedEnumerationImpl: function() { return false; },
 is$SVGAnimatedLengthList: function() { return false; },
 is$SVGAnimatedInteger: function() { return false; },
 is$SVGAnimatedNumberList: function() { return false; },
 is$DirectoryEntrySync: function() { return false; },
 is$History: function() { return false; },
 is$SVGAnimatedAngle: function() { return false; },
 is$PagePopupController: function() { return false; },
 is$_CSSStyleDeclarationImpl: function() { return false; },
 is$_CSSStyleSheetImpl: function() { return false; },
 is$_TextTrackCueListImpl: function() { return false; },
 is$_DOMSettableTokenListImpl: function() { return false; },
 is$RTCIceCandidate: function() { return false; },
 is$SVGAnimatedNumber: function() { return false; },
 is$WorkerNavigator: function() { return false; },
 is$_SVGNumberListImpl: function() { return false; },
 is$CSSRule: function() { return false; },
 is$_TouchImpl: function() { return false; },
 is$Screen: function() { return false; },
 is$_SVGAnimatedLengthListImpl: function() { return false; },
 is$SVGPointList: function() { return false; },
 is$_ClipboardImpl: function() { return false; },
 is$_SVGAnimatedNumberListImpl: function() { return false; },
 is$DOMSettableTokenList: function() { return false; },
 is$_HTMLOptionsCollectionImpl: function() { return false; },
 is$_SVGAnimatedBooleanImpl: function() { return false; },
 is$_NamedNodeMapImpl: function() { return false; },
 is$Navigator: function() { return false; },
 is$SVGAnimatedPreserveAspectRatio: function() { return false; },
 is$_StyleSheetListImpl: function() { return false; },
 is$_HistoryImpl: function() { return false; },
 is$_MediaStreamImpl: function() { return false; },
 is$Blob: function() { return false; },
 is$FileError: function() { return false; },
 is$_FormElementImpl: function() { return false; },
 is$HTMLCollection: function() { return false; },
 is$SVGPoint: function() { return false; },
 is$Uint8Array: function() { return false; },
 is$_DocumentImpl: function() { return false; },
 is$_AudioBufferImpl: function() { return false; },
 is$SVGAnimatedLength: function() { return false; },
 is$IDBTransaction: function() { return false; },
 is$_Uint8ClampedArrayImpl: function() { return false; },
 is$SVGSVGElement: function() { return false; },
 is$CSSRuleList: function() { return false; },
 is$HTMLOptionsCollection: function() { return false; },
 is$StorageInfo: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$NamedNodeMap: function() { return false; },
 is$DOMError: function() { return false; },
 is$Geolocation: function() { return false; },
 is$TextTrackList: function() { return false; },
 is$_MediaControllerImpl: function() { return false; },
 is$TimeRanges: function() { return false; },
 is$_CanvasElementImpl: function() { return false; },
 is$CSSPrimitiveValue: function() { return false; },
 is$TableElement: function() { return false; },
 is$SVGAnimatedEnumeration: function() { return false; },
 is$TextTrack: function() { return false; },
 is$SpeechRecognitionResultList: function() { return false; },
 is$_SVGElementImpl: function() { return false; },
 is$SVGRect: function() { return false; },
 is$SQLResultSetRowList: function() { return false; },
 is$RGBColor: function() { return false; },
 is$Map: function() { return false; },
 is$_ArrayBufferImpl: function() { return false; },
 is$MessagePort: function() { return false; },
 is$_FileErrorImpl: function() { return false; },
 is$MouseEvent: function() { return false; },
 is$FileList: function() { return false; },
 is$TableSectionElement: function() { return false; },
 is$AudioParam: function() { return false; },
 is$_DOMPluginImpl: function() { return false; },
 is$_NodeImpl: function() { return false; },
 is$SpeechInputResultList: function() { return false; },
 is$_SVGElementInstanceListImpl: function() { return false; },
 is$_WorkerNavigatorImpl: function() { return false; },
 is$SourceBufferList: function() { return false; },
 is$_CSSRuleImpl: function() { return false; },
 is$_SVGTransformListImpl: function() { return false; },
 is$AudioGain: function() { return false; },
 is$_RTCIceCandidateImpl: function() { return false; },
 is$DOMFileSystem: function() { return false; },
 is$_PerformanceTimingImpl: function() { return false; },
 is$_Float32ArrayImpl: function() { return false; },
 is$HeadElement: function() { return false; },
 is$CSSStyleSheet: function() { return false; },
 is$ImageData: function() { return false; },
 is$List: function() { return false; },
 is$MediaStreamTrackList: function() { return false; },
 is$MediaElement: function() { return false; },
 is$NotificationCenter: function() { return false; },
 is$_SpeechRecognitionResultImpl: function() { return false; },
 is$CSSStyleDeclaration: function() { return false; },
 is$DirectoryEntry: function() { return false; },
 is$PerformanceTiming: function() { return false; },
 is$Iterable: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$EventTarget: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$_SVGAnimatedRectImpl: function() { return false; },
 is$_AudioGainImpl: function() { return false; },
 is$_SVGAnimatedPreserveAspectRatioImpl: function() { return false; },
 is$_ElementImpl: function() { return false; },
 is$_MessagePortImpl: function() { return false; },
 is$StyleMedia: function() { return false; },
 is$_WorkerLocationImpl: function() { return false; },
 is$DOMPlugin: function() { return false; },
 is$AudioDestinationNode: function() { return false; },
 is$_TableSectionElementImpl: function() { return false; },
 is$_AudioListenerImpl: function() { return false; },
 is$_BatteryManagerImpl: function() { return false; },
 is$_SVGPreserveAspectRatioImpl: function() { return false; },
 is$IDBObjectStore: function() { return false; },
 is$ValidityState: function() { return false; },
 is$_PerformanceImpl: function() { return false; },
 is$File: function() { return false; },
 is$StyleSheetList: function() { return false; },
 is$_MediaElementImpl: function() { return false; },
 is$Uint8ClampedArray: function() { return false; },
 is$_DirectoryEntryImpl: function() { return false; },
 is$SVGAnimatedTransformList: function() { return false; },
 is$MemoryInfo: function() { return false; },
 is$_MediaStreamListImpl: function() { return false; },
 is$_HTMLCollectionImpl: function() { return false; },
 is$_SVGViewSpecImpl: function() { return false; },
 is$_NodeListImpl: function() { return false; },
 is$SVGUseElement: function() { return false; },
 is$SpeechGrammarList: function() { return false; },
 is$_PagePopupControllerImpl: function() { return false; },
 is$_ScreenImpl: function() { return false; },
 is$SVGViewSpec: function() { return false; },
 is$_SVGAnimatedAngleImpl: function() { return false; },
 is$_GeolocationImpl: function() { return false; },
 is$_AudioParamImpl: function() { return false; },
 is$_EventTargetImpl: function() { return false; },
 is$_IDBFactoryImpl: function() { return false; },
 is$PerformanceNavigation: function() { return false; },
 is$WorkerContext: function() { return false; },
 is$_SVGPointImpl: function() { return false; },
 is$_SVGAnimatedStringImpl: function() { return false; },
 is$SVGNumberList: function() { return false; },
 is$TableRowElement: function() { return false; },
 is$Console: function() { return false; },
 is$DOMFileSystemSync: function() { return false; },
 is$SVGAnimatedString: function() { return false; },
 is$AudioContext: function() { return false; },
 is$_EntryArrayImpl: function() { return false; },
 is$_DOMFileSystemImpl: function() { return false; },
 is$_AudioDestinationNodeImpl: function() { return false; },
 is$_SVGAnimatedTransformListImpl: function() { return false; },
 is$_StorageInfoImpl: function() { return false; },
 is$ButtonElement: function() { return false; },
 is$_ConsoleImpl: function() { return false; },
 is$_FileListImpl: function() { return false; },
 is$MediaKeyError: function() { return false; },
 is$_ScriptProfileNodeImpl: function() { return false; },
 is$IDBFactory: function() { return false; },
 is$Crypto: function() { return false; },
 is$DivElement: function() { return false; },
 is$TouchList: function() { return false; },
 is$_CSSPrimitiveValueImpl: function() { return false; },
 is$_RGBColorImpl: function() { return false; },
 is$_SVGElementInstanceImpl: function() { return false; },
 is$_SVGSVGElementImpl: function() { return false; },
 is$_SourceBufferListImpl: function() { return false; },
 is$_TimeRangesImpl: function() { return false; },
 is$_ValidityStateImpl: function() { return false; },
 is$_FileImpl: function() { return false; },
 is$_ArrayBufferViewImpl: function() { return false; },
 is$DataTransferItemList: function() { return false; },
 is$Coordinates: function() { return false; },
 is$TableCellElement: function() { return false; },
 is$CanvasElement: function() { return false; },
 is$SVGAnimatedBoolean: function() { return false; },
 is$_SVGMatrixImpl: function() { return false; },
 is$FormElement: function() { return false; },
 is$_TableCaptionElementImpl: function() { return false; },
 is$Element: function() { return false; },
 is$_StorageImpl: function() { return false; },
 is$_SpeechInputResultListImpl: function() { return false; },
 is$AudioBuffer: function() { return false; },
 is$SVGMatrix: function() { return false; },
 is$SVGLength: function() { return false; },
 is$SVGTransformList: function() { return false; },
 is$_MemoryInfoImpl: function() { return false; },
 is$_SVGPointListImpl: function() { return false; },
 is$DOMApplicationCache: function() { return false; },
 is$DOMMimeTypeArray: function() { return false; },
 is$_MediaKeyErrorImpl: function() { return false; },
 is$_BlobImpl: function() { return false; },
 is$_IDBTransactionImpl: function() { return false; },
 is$BarInfo: function() { return false; },
 is$Clipboard: function() { return false; },
 is$SVGStringList: function() { return false; },
 is$_HttpRequestUploadImpl: function() { return false; },
 is$Collection: function() { return false; },
 is$_DOMApplicationCacheImpl: function() { return false; },
 is$_CSSRuleListImpl: function() { return false; },
 is$_PerformanceNavigationImpl: function() { return false; },
 is$SVGPathSegList: function() { return false; },
 is$Performance: function() { return false; },
 is$SVGElementInstanceList: function() { return false; },
 is$_SVGPathSegListImpl: function() { return false; },
 is$TableCaptionElement: function() { return false; },
 is$_SessionDescriptionImpl: function() { return false; },
 is$_SQLResultSetRowListImpl: function() { return false; },
 is$_CoordinatesImpl: function() { return false; },
 is$AudioListener: function() { return false; },
 is$_SVGLengthImpl: function() { return false; },
 is$JavaScriptCallFrame: function() { return false; },
 is$Float32Array: function() { return false; },
 is$_SVGLengthListImpl: function() { return false; },
 is$_StyleSheetImpl: function() { return false; },
 is$_MediaStreamTrackImpl: function() { return false; },
 is$_NavigatorImpl: function() { return false; },
 is$_DataTransferItemListImpl: function() { return false; },
 is$EntryArray: function() { return false; },
 is$_ManagerStub: function() { return false; },
 is$_DirectoryEntrySyncImpl: function() { return false; },
 is$_NotificationCenterImpl: function() { return false; }
});

$.$defineNativeClass('AbstractWorker', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLAnchorElement', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitAnimation', ["duration?", "name?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLAppletElement', ["height?", "name?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', [], {
 is$_ArrayBufferImpl: function() { return true; },
 is$ArrayBuffer: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', [], {
 is$_ArrayBufferViewImpl: function() { return true; },
 is$ArrayBufferView: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Attr', ["name?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioBuffer', ["duration?", "length?"], {
 is$_AudioBufferImpl: function() { return true; },
 is$AudioBuffer: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioBufferSourceNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioChannelMerger', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioChannelSplitter', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioContext', [], {
 is$_AudioContextImpl: function() { return true; },
 is$AudioContext: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioDestinationNode', [], {
 is$_AudioDestinationNodeImpl: function() { return true; },
 is$AudioDestinationNode: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLAudioElement', [], {
 is$MediaElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('AudioGain', [], {
 is$_AudioGainImpl: function() { return true; },
 is$AudioGain: function() { return true; },
 is$AudioParam: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioGainNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioListener', [], {
 is$_AudioListenerImpl: function() { return true; },
 is$AudioListener: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioPannerNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioParam', ["name?", "value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$_AudioParamImpl: function() { return true; },
 is$AudioParam: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioProcessingEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('AudioSourceNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLBRElement', [], {
 clear$0: function() { return this.clear.call$0(); },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('BarInfo', [], {
 is$_BarInfoImpl: function() { return true; },
 is$BarInfo: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLBaseElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('BatteryManager', [], {
 is$_BatteryManagerImpl: function() { return true; },
 is$BatteryManager: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('BeforeLoadEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('BiquadFilterNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Blob', [], {
 is$_BlobImpl: function() { return true; },
 is$Blob: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', ["name?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$ButtonElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('CDATASection', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSCharsetRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSFontFaceRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSImportRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitCSSKeyframeRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitCSSKeyframesRule', ["name?"], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitCSSMatrix', [], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSMediaRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSPageRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSPrimitiveValue', [], {
 is$_CSSPrimitiveValueImpl: function() { return true; },
 is$CSSPrimitiveValue: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSRule', [], {
 is$_CSSRuleImpl: function() { return true; },
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSRuleList', ["length?"], {
 is$_CSSRuleListImpl: function() { return true; },
 is$CSSRuleList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSStyleDeclaration', ["length?"], {
 getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'filter');
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); },
 get$height: function() {
  return this.getPropertyValue$1('height');
},
 get$width: function() {
  return this.getPropertyValue$1('width');
},
 is$_CSSStyleDeclarationImpl: function() { return true; },
 is$CSSStyleDeclaration: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSStyleRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSStyleSheet', [], {
 is$_CSSStyleSheetImpl: function() { return true; },
 is$CSSStyleSheet: function() { return true; },
 is$StyleSheet: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitCSSTransformValue', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSUnknownRule', [], {
 is$CSSRule: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSValue', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('CSSValueList', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLCanvasElement', ["height?", "width?"], {
 is$_CanvasElementImpl: function() { return true; },
 is$CanvasElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('CanvasGradient', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('CanvasPattern', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('CanvasRenderingContext2D', [], {
 is$CanvasRenderingContext2D: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CanvasRenderingContext', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('CharacterData', ["length?"], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('ClientRect', ["height?", "width?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('ClientRectList', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Clipboard', [], {
 is$_ClipboardImpl: function() { return true; },
 is$Clipboard: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CloseEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Comment', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CompositionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

_ConsoleImpl = (typeof console == 'undefined' ? {} : console);
$.$defineNativeClass('HTMLContentElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ConvolverNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Coordinates', [], {
 is$_CoordinatesImpl: function() { return true; },
 is$Coordinates: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Counter', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Crypto', [], {
 is$_CryptoImpl: function() { return true; },
 is$Crypto: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('CustomEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLDListElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', [], {
 is$_DOMApplicationCacheImpl: function() { return true; },
 is$DOMApplicationCache: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMError', ["name?"], {
 is$_DOMErrorImpl: function() { return true; },
 is$DOMError: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMFileSystem', ["name?"], {
 is$_DOMFileSystemImpl: function() { return true; },
 is$DOMFileSystem: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMFileSystemSync', ["name?"], {
 is$_DOMFileSystemSyncImpl: function() { return true; },
 is$DOMFileSystemSync: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMImplementation', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMMimeTypeArray', ["length?"], {
 is$_DOMMimeTypeArrayImpl: function() { return true; },
 is$DOMMimeTypeArray: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMMimeType', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMParser', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMPluginArray', ["length?"], {
 is$_DOMPluginArrayImpl: function() { return true; },
 is$DOMPluginArray: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMPlugin', ["length?", "name?"], {
 is$_DOMPluginImpl: function() { return true; },
 is$DOMPlugin: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMSelection', [], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMSettableTokenList', ["value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$_DOMSettableTokenListImpl: function() { return true; },
 is$DOMSettableTokenList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMStringList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'String');
},
 add$1: function(value) {
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.stringTypeCheck(initialValue, 'is$String');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('DOMTokenList', ["length?"], {
 add$1: function(token) {
  return this.add($.stringTypeCheck(token, 'is$String'));
},
 remove$1: function(token) {
  return this.remove($.stringTypeCheck(token, 'is$String'));
},
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMURL', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLDataListElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DataTransferItemList', ["length?"], {
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
},
 is$_DataTransferItemListImpl: function() { return true; },
 is$DataTransferItemList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DataView', [], {
 is$ArrayBufferView: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Database', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DatabaseSync', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DedicatedWorkerContext', [], {
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
},
 is$WorkerContext: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DelayNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLDetailsElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DeviceMotionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DeviceOrientationEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLDirectoryElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DirectoryEntry', [], {
 is$_DirectoryEntryImpl: function() { return true; },
 is$DirectoryEntry: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DirectoryEntrySync', [], {
 is$_DirectoryEntrySyncImpl: function() { return true; },
 is$DirectoryEntrySync: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DirectoryReader', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('DirectoryReaderSync', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLDivElement', [], {
 is$DivElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DocumentFragment', [], {
 get$elements: function() {
  if (this._elements == null)
    this._elements = $.propertyTypeCheck($.FilteredElementList$(this), 'is$ElementList');
  return this._elements;
},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 set$innerHTML: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$innerHTML')) {
  {
  $.stringTypeCheck(value, 'is$String');
  $.clear(this.get$nodes());
  var e = $._ElementFactoryProvider_Element$tag('div');
  e.set$innerHTML(value);
  var nodes = $.ListImplementation_List$from(e.get$nodes());
  $.addAll(this.get$nodes(), nodes);
}
  } else {
    return Object.prototype.set$innerHTML.call(this, value);
  }

},
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 click$0: function() {
},
 get$click: function() { return new $.BoundClosure(this, 'click$0'); },
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', [], {
 $dom_getElementById$1: function(elementId) {
  return this.getElementById($.stringTypeCheck(elementId, 'is$String'));
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 query$1: function(selectors) {
  if ($.boolConversionCheck($.CTC.hasMatch$1(selectors), 'is$bool'))
    return this.$dom_getElementById$1($.substring$1(selectors, 1));
  return this.$dom_querySelector$1(selectors);
},
 is$_DocumentImpl: function() { return true; },
 is$Document: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DocumentType', ["name?"], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DynamicsCompressorNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('EXTTextureFilterAnisotropic', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Element', ["id?", "innerHTML"], { set$innerHTML: function(v) { this.innerHTML = $.stringTypeCheck(v, 'is$String'); },

 set$elements: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$elements')) {
  {
  $.listSuperNativeTypeCheck(value, 'is$Collection');
  var elements = this.get$elements();
  $.clear(elements);
  $.addAll(elements, value);
}
  } else {
    return Object.prototype.set$elements.call(this, value);
  }

},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$$$dom_children: function() {
return this.children;
},
 click$0: function() {
  return this.click();
},
 get$click: function() { return new $.BoundClosure(this, 'click$0'); },
 get$$$dom_firstElementChild: function() {
return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
return this.lastElementChild;
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$_ElementImpl: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', ["height?", "name?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Entity', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('EntityReference', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('EntryArray', ["length?"], {
 is$_EntryArrayImpl: function() { return true; },
 is$EntryArray: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Entry', ["name?"], {
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS($.functionTypeCheck(successCallback, 'is$VoidCallback'), 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('EntrySync', ["name?"], {
 remove$0: function() {
  return this.remove();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('ErrorEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('EventException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('Event', [], {
 is$_EventImpl: function() { return true; },
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('EventSource', [], {
 close$0: function() {
  return this.close();
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('EventTarget', [], {
 is$_EventTargetImpl: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLFieldSetElement', ["elements?", "name?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('FileEntry', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileEntrySync', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileError', [], {
 is$_FileErrorImpl: function() { return true; },
 is$FileError: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('File', ["name?"], {
 is$_FileImpl: function() { return true; },
 is$File: function() { return true; },
 is$Blob: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_FileImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'File');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$File');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$File');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$File');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('FileReader', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileReaderSync', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileWriter', ["length?"], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('FileWriterSync', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Float32Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.numTypeCheck(value, 'is$num');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'num');
},
 add$1: function(value) {
  $.numTypeCheck(value, 'is$num');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.numTypeCheck(value, 'is$num');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.numTypeCheck(initialValue, 'is$num');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_Float32ArrayImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Float32Array: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Float64Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.numTypeCheck(value, 'is$num');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'num');
},
 add$1: function(value) {
  $.numTypeCheck(value, 'is$num');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.numTypeCheck(value, 'is$num');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.numTypeCheck(initialValue, 'is$num');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('DOMFormData', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', ["length?", "name?"], {
 reset$0: function() {
  return this.reset();
},
 is$_FormElementImpl: function() { return true; },
 is$FormElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', ["height?", "name?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', ["rows?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Gamepad', ["id?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('GamepadList', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Geolocation', [], {
 is$_GeolocationImpl: function() { return true; },
 is$Geolocation: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Geoposition', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLHRElement', ["width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', ["length?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_NodeImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$Node');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_HTMLCollectionImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$HTMLCollection: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', [], {
 get$length: function() {
return this.length;
},
 set$length: function(value) {
  $.intTypeCheck(value, 'is$$int');
this.length = value;
},
 remove$1: function(index) {
  return this.remove($.intTypeCheck(index, 'is$$int'));
},
 is$_HTMLOptionsCollectionImpl: function() { return true; },
 is$HTMLOptionsCollection: function() { return true; },
 is$HTMLCollection: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HashChangeEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLHeadElement', [], {
 is$_HeadElementImpl: function() { return true; },
 is$HeadElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('History', ["length?", "state?"], {
 is$_HistoryImpl: function() { return true; },
 is$History: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLHtmlElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequest', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequestUpload', [], {
 is$_HttpRequestUploadImpl: function() { return true; },
 is$HttpRequestUpload: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBAny', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBCursor', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBCursorWithValue', [], {
 get$value: function() {
  return $._convertNativeToDart_IDBAny(this.get$_lib_value());
},
 get$_lib_value: function() {
return this.value;
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBDatabaseException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBDatabase', ["name?"], {
 close$0: function() {
  return this.close();
},
 is$_IDBDatabaseImpl: function() { return true; },
 is$IDBDatabase: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBFactory', [], {
 is$_IDBFactoryImpl: function() { return true; },
 is$IDBFactory: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBIndex', ["name?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBKey', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBKeyRange', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', ["name?"], {
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_SerializedScriptValue(value), key);
  return this._add_2$1($._convertDartToNative_SerializedScriptValue(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
},
 is$_IDBObjectStoreImpl: function() { return true; },
 is$IDBObjectStore: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBOpenDBRequest', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBRequest', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBTransaction', [], {
 is$_IDBTransactionImpl: function() { return true; },
 is$IDBTransaction: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBUpgradeNeededEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBVersionChangeEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('IDBVersionChangeRequest', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLIFrameElement', ["height?", "name?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('IceCandidate', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('ImageData', ["height?", "width?"], {
 is$_ImageDataImpl: function() { return true; },
 is$ImageData: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', ["height?", "name?", "width?"], {
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', ["height?", "name?", "value?", "width?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Int16Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int32Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Int8Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('JavaScriptAudioNode', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', [], {
 is$_JavaScriptCallFrameImpl: function() { return true; },
 is$JavaScriptCallFrame: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('KeyboardEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLKeygenElement', ["name?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', ["value?"], { set$value: function(v) { this.value = $.intTypeCheck(v, 'is$$int'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('LocalMediaStream', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; },
 is$MediaStream: function() { return true; }
});

$.$defineNativeClass('Location', [], {
 toString$0: function() {
  return this.toString();
},
 is$Location: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLMapElement', ["name?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', ["height?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('MediaController', ["duration?"], {
 is$_MediaControllerImpl: function() { return true; },
 is$MediaController: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaElementAudioSourceNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLMediaElement', ["duration?"], {
 is$_MediaElementImpl: function() { return true; },
 is$MediaElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('MediaError', [], {
 is$_MediaErrorImpl: function() { return true; },
 is$MediaError: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaKeyError', [], {
 is$_MediaKeyErrorImpl: function() { return true; },
 is$MediaKeyError: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaKeyEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'String');
},
 add$1: function(value) {
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.stringTypeCheck(value, 'is$String');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.stringTypeCheck(initialValue, 'is$String');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_MediaListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$MediaList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('MediaQueryList', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaSource', ["duration?"], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamAudioSourceNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStream', [], {
 is$_MediaStreamImpl: function() { return true; },
 is$MediaStream: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', ["length?"], {
 is$_MediaStreamListImpl: function() { return true; },
 is$MediaStreamList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrack', [], {
 is$_MediaStreamTrackImpl: function() { return true; },
 is$MediaStreamTrack: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MediaStreamTrackList', ["length?"], {
 add$1: function(track) {
  return this.add($.callTypeCheck(track, 'is$_MediaStreamTrackImpl'));
},
 remove$1: function(track) {
  return this.remove($.callTypeCheck(track, 'is$_MediaStreamTrackImpl'));
},
 is$_MediaStreamTrackListImpl: function() { return true; },
 is$MediaStreamTrackList: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MemoryInfo', [], {
 is$_MemoryInfoImpl: function() { return true; },
 is$MemoryInfo: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLMenuElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('MessageChannel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('MessageEvent', ["ports?"], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MessagePort', [], {
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
},
 is$_MessagePortImpl: function() { return true; },
 is$MessagePort: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLMetaElement', ["name?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Metadata', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLMeterElement', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('MouseEvent', ["button?", "shiftKey?"], {
 is$MouseEvent: function() { return true; },
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MutationEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('MutationObserver', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('MutationRecord', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('NamedNodeMap', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_NodeImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Node');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$Node');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_NamedNodeMapImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$NamedNodeMap: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Navigator', ["userAgent?"], {
 is$_NavigatorImpl: function() { return true; },
 is$Navigator: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('NavigatorUserMediaError', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('NodeFilter', [], {
 is$_NodeFilterImpl: function() { return true; },
 is$NodeFilter: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Node', [], {
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (!(this.get$parent() == null))
    $.callTypeCheck(this.get$parent(), 'is$_NodeImpl').$dom_removeChild$1(this);
  return this;
},
 replaceWith$1: function(otherNode) {
  $.callTypeCheck(otherNode, 'is$Node');
  try {
    var parent$ = $.callTypeCheck(this.get$parent(), 'is$_NodeImpl');
    parent$.$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_childNodes: function() {
return this.childNodes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  $.stringTypeCheck(value, 'is$String');
this.textContent = value;
},
 $dom_appendChild$1: function(newChild) {
  return this.appendChild($.callTypeCheck(newChild, 'is$_NodeImpl'));
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild($.callTypeCheck(oldChild, 'is$_NodeImpl'));
},
 $dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild($.callTypeCheck(newChild, 'is$_NodeImpl'),$.callTypeCheck(oldChild, 'is$_NodeImpl'));
},
 is$_NodeImpl: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('NodeIterator', [], {
 filter$1: function(arg0) { return this.filter.call$1(arg0); },
 is$Object: function() { return true; }
});

$.$defineNativeClass('NodeList', ["length?"], {
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._parent.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._parent.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  for (var t1 = $.iterator($.listSuperNativeTypeCheck(collection, 'is$Collection')), t2 = this._parent; $.boolConversionCheck(t1.hasNext$0(), 'is$bool');)
    t2.$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.last$0();
  if (!(result == null))
    this._parent.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_NodeImpl');
  this._parent.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 get$first: function() {
  return this.operator$index$1(0);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$Node');
  throw $.$$throw($.UnsupportedOperationException$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 is$_NodeListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$NodeList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('Notation', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('NotificationCenter', [], {
 is$_NotificationCenterImpl: function() { return true; },
 is$NotificationCenter: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Notification', [], {
 close$0: function() {
  return this.close();
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('OESStandardDerivatives', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('OESTextureFloat', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('OESVertexArrayObject', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLOListElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', ["height?", "name?", "width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('OfflineAudioCompletionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLOptGroupElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', ["value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Oscillator', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLOutputElement', ["name?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('OverflowEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('PagePopupController', [], {
 is$_PagePopupControllerImpl: function() { return true; },
 is$PagePopupController: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('PageTransitionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLParagraphElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', ["name?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', [], {
 close$0: function() {
  return this.close();
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Performance', [], {
 is$_PerformanceImpl: function() { return true; },
 is$Performance: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('PerformanceNavigation', [], {
 is$_PerformanceNavigationImpl: function() { return true; },
 is$PerformanceNavigation: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('PerformanceTiming', [], {
 is$_PerformanceTimingImpl: function() { return true; },
 is$PerformanceTiming: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitPoint', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('PopStateEvent', ["state?"], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('PositionError', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLPreElement', ["width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLProgressElement', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ProgressEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLQuoteElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('RGBColor', [], {
 is$_RGBColorImpl: function() { return true; },
 is$RGBColor: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RTCIceCandidateEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RTCIceCandidate', [], {
 is$_RTCIceCandidateImpl: function() { return true; },
 is$RTCIceCandidate: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RTCPeerConnection', [], {
 close$0: function() {
  return this.close();
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RTCSessionDescription', [], {
 is$_RTCSessionDescriptionImpl: function() { return true; },
 is$RTCSessionDescription: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RadioNodeList', ["value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$NodeList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('RangeException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('Range', [], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('RealtimeAnalyserNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('Rect', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLError', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLException', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLResultSet', ["rows?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLResultSetRowList', ["length?"], {
 is$_SQLResultSetRowListImpl: function() { return true; },
 is$SQLResultSetRowList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLTransaction', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SQLTransactionSync', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphDefElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAltGlyphItemElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAngle', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$_SVGAngleImpl: function() { return true; },
 is$SVGAngle: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimateColorElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAnimateElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAnimateMotionElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAnimateTransformElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedAngle', [], {
 is$_SVGAnimatedAngleImpl: function() { return true; },
 is$SVGAnimatedAngle: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedBoolean', [], {
 is$_SVGAnimatedBooleanImpl: function() { return true; },
 is$SVGAnimatedBoolean: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedEnumeration', [], {
 is$_SVGAnimatedEnumerationImpl: function() { return true; },
 is$SVGAnimatedEnumeration: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedInteger', [], {
 is$_SVGAnimatedIntegerImpl: function() { return true; },
 is$SVGAnimatedInteger: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedLength', [], {
 is$_SVGAnimatedLengthImpl: function() { return true; },
 is$SVGAnimatedLength: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedLengthList', [], {
 is$_SVGAnimatedLengthListImpl: function() { return true; },
 is$SVGAnimatedLengthList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', [], {
 is$_SVGAnimatedNumberImpl: function() { return true; },
 is$SVGAnimatedNumber: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumberList', [], {
 is$_SVGAnimatedNumberListImpl: function() { return true; },
 is$SVGAnimatedNumberList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', [], {
 is$_SVGAnimatedPreserveAspectRatioImpl: function() { return true; },
 is$SVGAnimatedPreserveAspectRatio: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedRect', [], {
 is$_SVGAnimatedRectImpl: function() { return true; },
 is$SVGAnimatedRect: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedString', [], {
 is$_SVGAnimatedStringImpl: function() { return true; },
 is$SVGAnimatedString: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedTransformList', [], {
 is$_SVGAnimatedTransformListImpl: function() { return true; },
 is$SVGAnimatedTransformList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGCircleElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGClipPathElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGColor', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGCursorElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGDefsElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGDescElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGDocument', [], {
 is$Document: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGElement', [], {
 get$elements: function() {
  return $.FilteredElementList$(this);
},
 set$elements: function(value) {
  $.listSuperNativeTypeCheck(value, 'is$Collection');
  var elements = this.get$elements();
  $.clear(elements);
  $.addAll(elements, value);
},
 set$innerHTML: function(svg) {
  $.stringTypeCheck(svg, 'is$String');
  var container = $._ElementFactoryProvider_Element$tag('div');
  container.set$innerHTML('<svg version="1.1">' + $.S(svg) + '</svg>');
  this.set$elements(container.get$elements().get$first().get$elements());
},
 get$id: function() {
return this.id;
},
 is$_SVGElementImpl: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGElementInstance', [], {
 is$_SVGElementInstanceImpl: function() { return true; },
 is$SVGElementInstance: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGElementInstanceList', ["length?"], {
 is$_SVGElementInstanceListImpl: function() { return true; },
 is$SVGElementInstanceList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGEllipseElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGFEBlendElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEColorMatrixElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEComponentTransferElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFECompositeElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEDisplacementMapElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEDistantLightElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEDropShadowElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEFloodElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncAElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncBElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncGElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEFuncRElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEGaussianBlurElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEImageElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEMergeNodeElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEMorphologyElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEOffsetElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFEPointLightElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFESpecularLightingElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFESpotLightElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFETileElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFETurbulenceElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFilterElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceFormatElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceNameElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceSrcElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGFontFaceUriElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGForeignObjectElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGGElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGGlyphElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGGlyphRefElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGGradientElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGHKernElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGImageElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGLength', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$_SVGLengthImpl: function() { return true; },
 is$SVGLength: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGLengthList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGLengthListImpl: function() { return true; },
 is$SVGLengthList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGLinearGradientElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGMPathElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGMarkerElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGMatrix', [], {
 is$_SVGMatrixImpl: function() { return true; },
 is$SVGMatrix: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGMetadataElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGMissingGlyphElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGNumber', ["value?"], { set$value: function(v) { this.value = $.numTypeCheck(v, 'is$num'); },

 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGNumberList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGNumberListImpl: function() { return true; },
 is$SVGNumberList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPaint', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcAbs', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcRel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegClosePath', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSeg', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoAbs', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoRel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGPathSegListImpl: function() { return true; },
 is$SVGPathSegList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoRel', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPatternElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGPoint', [], {
 is$_SVGPointImpl: function() { return true; },
 is$SVGPoint: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPointList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGPointListImpl: function() { return true; },
 is$SVGPointList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGPolygonElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGPolylineElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGPreserveAspectRatio', [], {
 is$_SVGPreserveAspectRatioImpl: function() { return true; },
 is$SVGPreserveAspectRatio: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGRadialGradientElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGRectElement', ["height?", "width?"], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGRect', ["height?", "width?"], {
 is$_SVGRectImpl: function() { return true; },
 is$SVGRect: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGRenderingIntent', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGSVGElement', ["height?", "width?"], {
 is$_SVGSVGElementImpl: function() { return true; },
 is$SVGSVGElement: function() { return true; },
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGScriptElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGSetElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGStopElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGStringList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGStringListImpl: function() { return true; },
 is$SVGStringList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGSwitchElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGSymbolElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTRefElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTSpanElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTextContentElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTextElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTextPathElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTextPositioningElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTitleElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGTransform', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGTransformList', [], {
 clear$0: function() {
  return this.clear();
},
 is$_SVGTransformListImpl: function() { return true; },
 is$SVGTransformList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGUnitTypes', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGUseElement', ["height?", "width?"], {
 is$_SVGUseElementImpl: function() { return true; },
 is$SVGUseElement: function() { return true; },
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGVKernElement', [], {
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGViewElement', [], {
 is$Object: function() { return true; },
 is$SVGElement: function() { return true; },
 is$Element: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SVGViewSpec', [], {
 is$_SVGViewSpecImpl: function() { return true; },
 is$SVGViewSpec: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SVGZoomEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Screen', ["height?", "width?"], {
 is$_ScreenImpl: function() { return true; },
 is$Screen: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLScriptElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ScriptProfile', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('ScriptProfileNode', [], {
 is$_ScriptProfileNodeImpl: function() { return true; },
 is$ScriptProfileNode: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLSelectElement', ["length?", "name?", "value?"], { set$length: function(v) { this.length = $.intTypeCheck(v, 'is$$int'); },
 set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SessionDescription', [], {
 is$_SessionDescriptionImpl: function() { return true; },
 is$SessionDescription: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLShadowElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', ["innerHTML"], { set$innerHTML: function(v) { this.innerHTML = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SharedWorkerContext', ["name?"], {
 is$WorkerContext: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SharedWorker', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SourceBuffer', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SourceBufferList', ["length?"], {
 is$_SourceBufferListImpl: function() { return true; },
 is$SourceBufferList: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechGrammarList', ["length?"], {
 is$_SpeechGrammarListImpl: function() { return true; },
 is$SpeechGrammarList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechInputResult', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', ["length?"], {
 is$_SpeechInputResultListImpl: function() { return true; },
 is$SpeechInputResultList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionAlternative', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionError', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognition', [], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResult', ["length?"], {
 is$_SpeechRecognitionResultImpl: function() { return true; },
 is$SpeechRecognitionResult: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', ["length?"], {
 is$_SpeechRecognitionResultListImpl: function() { return true; },
 is$SpeechRecognitionResultList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('StorageEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Storage', [], {
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1($.stringTypeCheck(key, 'is$String')) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1($.stringTypeCheck(key, 'is$String'));
},
 operator$indexSet$2: function(key, value) {
  return this.$dom_setItem$2($.stringTypeCheck(key, 'is$String'), $.stringTypeCheck(value, 'is$String'));
},
 remove$1: function(key) {
  $.stringTypeCheck(key, 'is$String');
  var value = this.operator$index$1(key);
  this.$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  for (var i = 0; true; ++i) {
    var key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 getKeys$0: function() {
  var keys = [];
  this.forEach$1(new $._StorageImpl_getKeys_anon(keys));
  return keys;
},
 getValues$0: function() {
  var values = [];
  this.forEach$1(new $._StorageImpl_getValues_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 isEmpty$0: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$_StorageImpl: function() { return true; },
 is$Storage: function() { return true; },
 is$Map: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('StorageInfo', [], {
 is$_StorageInfoImpl: function() { return true; },
 is$StorageInfo: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLStyleElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('StyleMedia', [], {
 is$_StyleMediaImpl: function() { return true; },
 is$StyleMedia: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('StyleSheet', [], {
 is$_StyleSheetImpl: function() { return true; },
 is$StyleSheet: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_StyleSheetImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'StyleSheet');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$StyleSheet');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$StyleSheet');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$StyleSheet');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_StyleSheetListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$StyleSheetList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLTableCaptionElement', [], {
 is$_TableCaptionElementImpl: function() { return true; },
 is$TableCaptionElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', ["height?", "width?"], {
 is$TableCellElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', ["width?"], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', ["rows?", "width?"], {
 insertRow$1: function(index) {
  return this.insertRow(index);
},
 is$TableElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', ["cells?"], {
 insertCell$1: function(index) {
  return this.insertCell(index);
},
 is$TableRowElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', ["rows?"], {
 insertRow$1: function(index) {
  return this.insertRow(index);
},
 is$_TableSectionElementImpl: function() { return true; },
 is$TableSectionElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', ["name?", "rows?", "value?"], { set$value: function(v) { this.value = $.stringTypeCheck(v, 'is$String'); },

 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('TextEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Text', [], {
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TextMetrics', ["width?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('TextTrackCue', ["id?", "text"], { set$text: function(v) { this.text = $.stringTypeCheck(v, 'is$String'); },

 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TextTrackCueList', ["length?"], {
 is$_TextTrackCueListImpl: function() { return true; },
 is$TextTrackCueList: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TextTrack', [], {
 is$_TextTrackImpl: function() { return true; },
 is$TextTrack: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TextTrackList', ["length?"], {
 is$_TextTrackListImpl: function() { return true; },
 is$TextTrackList: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TimeRanges', ["length?"], {
 is$_TimeRangesImpl: function() { return true; },
 is$TimeRanges: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLTitleElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('TouchEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Touch', [], {
 is$_TouchImpl: function() { return true; },
 is$Touch: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TouchList', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.callTypeCheck(value, 'is$_TouchImpl');
  throw $.$$throw($.UnsupportedOperationException$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Touch');
},
 add$1: function(value) {
  $.callTypeCheck(value, 'is$Touch');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.callTypeCheck(value, 'is$Touch');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.callTypeCheck(initialValue, 'is$Touch');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_TouchListImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$TouchList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('TrackEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitTransitionEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('TreeWalker', [], {
 filter$1: function(arg0) { return this.filter.call$1(arg0); },
 is$Object: function() { return true; }
});

$.$defineNativeClass('UIEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLUListElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('Uint16Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint32Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8Array', ["length?"], {
 operator$index$1: function(index) {
  $.intTypeCheck(index, 'is$$int');
return this[index];
},
 operator$indexSet$2: function(index, value) {
  $.intTypeCheck(index, 'is$$int');
  $.intTypeCheck(value, 'is$$int');
this[index] = value
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addLast$1: function(value) {
  $.intTypeCheck(value, 'is$$int');
  throw $.$$throw($.CTC2);
},
 addAll$1: function(collection) {
  $.listSuperNativeTypeCheck(collection, 'is$Collection');
  throw $.$$throw($.CTC2);
},
 forEach$1: function(f) {
  return $._Collections_forEach(this, $.functionTypeCheck(f, 'is$Function'));
},
 filter$1: function(f) {
  $.functionTypeCheck(f, 'is$Function');
  return $._Collections_filter(this, [], f);
},
 isEmpty$0: function() {
  return $.eq($.get$length(this), 0);
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.CTC12);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  $.intTypeCheck(rangeLength, 'is$$int');
  $.intTypeCheck(initialValue, 'is$$int');
  throw $.$$throw($.CTC21);
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_Uint8ArrayImpl: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$Object: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Uint8Array: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', [], {
 is$_Uint8ClampedArrayImpl: function() { return true; },
 is$Uint8ClampedArray: function() { return true; },
 is$Uint8Array: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$Object: function() { return true; },
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('HTMLUnknownElement', [], {
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('ValidityState', [], {
 is$_ValidityStateImpl: function() { return true; },
 is$ValidityState: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('HTMLVideoElement', ["height?", "width?"], {
 is$MediaElement: function() { return true; },
 is$Element: function() { return true; },
 is$Object: function() { return true; },
 is$Node: function() { return true; },
 is$EventTarget: function() { return true; }
});

$.$defineNativeClass('WaveShaperNode', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WaveTable', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLActiveInfo', ["name?"], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLBuffer', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLCompressedTextureS3TC', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLContextAttributes', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLContextEvent', [], {
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLDebugRendererInfo', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLDebugShaders', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLDepthTexture', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLFramebuffer', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLLoseContext', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLProgram', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLRenderbuffer', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLRenderingContext', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLShader', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLShaderPrecisionFormat', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLTexture', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLUniformLocation', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebGLVertexArrayObjectOES', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitCSSFilterValue', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebKitNamedFlow', ["name?"], {
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WebSocket', [], {
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WheelEvent', [], {
 is$MouseEvent: function() { return true; },
 is$Event: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMWindow', ["length?", "localStorage?", "name?", "navigator?"], {
 clearInterval$1: function(handle) {
  return this.clearInterval($.intTypeCheck(handle, 'is$$int'));
},
 close$0: function() {
  return this.close();
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$TimeoutHandler'), 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$TimeoutHandler'), 0),timeout);
},
 is$_WindowImpl: function() { return true; },
 is$Window: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WorkerContext', ["navigator?"], {
 clearInterval$1: function(handle) {
  return this.clearInterval($.intTypeCheck(handle, 'is$$int'));
},
 close$0: function() {
  return this.close();
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$TimeoutHandler'), 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$TimeoutHandler'), 0),timeout);
},
 is$_WorkerContextImpl: function() { return true; },
 is$WorkerContext: function() { return true; },
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('Worker', [], {
 postMessage$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 postMessage$1: function(message) {
  return this.postMessage(message);
},
 is$EventTarget: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WorkerLocation', [], {
 toString$0: function() {
  return this.toString();
},
 is$_WorkerLocationImpl: function() { return true; },
 is$WorkerLocation: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('WorkerNavigator', ["userAgent?"], {
 is$_WorkerNavigatorImpl: function() { return true; },
 is$WorkerNavigator: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('XMLSerializer', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('XPathEvaluator', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('XPathException', ["name?"], {
 toString$0: function() {
  return this.toString();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('XPathExpression', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('XPathNSResolver', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('XPathResult', [], {
 is$Object: function() { return true; }
});

$.$defineNativeClass('XSLTProcessor', [], {
 reset$0: function() {
  return this.reset();
},
 is$Object: function() { return true; }
});

$.$defineNativeClass('Worker', [], {
 get$id: function() {
return this.id;
},
 postMessage$1: function(msg) {
return this.postMessage(msg);
},
 is$_ManagerStub: function() { return true; },
 is$Object: function() { return true; }
});

$.$defineNativeClass('DOMWindow', [], {
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$_TimeoutHandler'), 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS($.functionTypeCheck(handler, 'is$_TimeoutHandler'), 0),timeout);
},
 clearInterval$1: function(handle) {
  return this.clearInterval($.intTypeCheck(handle, 'is$$int'));
}
});

// 521 dynamic classes.
// 522 classes
// 41 !leaf
(function(){
  var v0/*class(_SVGTextPositioningElementImpl)*/ = 'SVGTextPositioningElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement';
  var v1/*class(_Uint8ArrayImpl)*/ = 'Uint8Array|Uint8ClampedArray|Uint8ClampedArray';
  var v2/*class(_MouseEventImpl)*/ = 'MouseEvent|WheelEvent|WheelEvent';
  var v3/*class(_AudioSourceNodeImpl)*/ = 'AudioSourceNode|Oscillator|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode|Oscillator|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode';
  var v4/*class(_SVGColorImpl)*/ = 'SVGColor|SVGPaint|SVGPaint';
  var v5/*class(_CSSValueListImpl)*/ = 'CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSTransformValue';
  var v6/*class(_TextImpl)*/ = 'Text|CDATASection|CDATASection';
  var v7/*class(_SVGTextContentElementImpl)*/ = [v0/*class(_SVGTextPositioningElementImpl)*/,v0/*class(_SVGTextPositioningElementImpl)*/,'SVGTextContentElement|SVGTextPathElement|SVGTextPathElement'].join('|');
  var v8/*class(_SVGGradientElementImpl)*/ = 'SVGGradientElement|SVGRadialGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGLinearGradientElement';
  var v9/*class(_SVGComponentTransferFunctionElementImpl)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement';
  var v10/*class(_SVGAnimationElementImpl)*/ = 'SVGAnimationElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement';
  var v11/*class(_SVGElementImpl)*/ = [v7/*class(_SVGTextContentElementImpl)*/,v8/*class(_SVGGradientElementImpl)*/,v9/*class(_SVGComponentTransferFunctionElementImpl)*/,v10/*class(_SVGAnimationElementImpl)*/,v7/*class(_SVGTextContentElementImpl)*/,v8/*class(_SVGGradientElementImpl)*/,v9/*class(_SVGComponentTransferFunctionElementImpl)*/,v10/*class(_SVGAnimationElementImpl)*/,'SVGElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement'].join('|');
  var v12/*class(_MediaElementImpl)*/ = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLVideoElement|HTMLAudioElement';
  var v13/*class(_UIEventImpl)*/ = [v2/*class(_MouseEventImpl)*/,v2/*class(_MouseEventImpl)*/,'UIEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent'].join('|');
  var v14/*class(_ProgressEventImpl)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent|XMLHttpRequestProgressEvent';
  var v15/*class(_ElementImpl)*/ = [v11/*class(_SVGElementImpl)*/,v12/*class(_MediaElementImpl)*/,v11/*class(_SVGElementImpl)*/,v12/*class(_MediaElementImpl)*/,'Element|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement'].join('|');
  var v16/*class(_DocumentImpl)*/ = 'HTMLDocument|SVGDocument|SVGDocument';
  var v17/*class(_DocumentFragmentImpl)*/ = 'DocumentFragment|ShadowRoot|ShadowRoot';
  var v18/*class(_CharacterDataImpl)*/ = [v6/*class(_TextImpl)*/,v6/*class(_TextImpl)*/,'CharacterData|Comment|Comment'].join('|');
  var v19/*class(_WorkerContextImpl)*/ = 'WorkerContext|SharedWorkerContext|DedicatedWorkerContext|SharedWorkerContext|DedicatedWorkerContext';
  var v20/*class(_NodeImpl)*/ = [v15/*class(_ElementImpl)*/,v16/*class(_DocumentImpl)*/,v17/*class(_DocumentFragmentImpl)*/,v18/*class(_CharacterDataImpl)*/,v15/*class(_ElementImpl)*/,v16/*class(_DocumentImpl)*/,v17/*class(_DocumentFragmentImpl)*/,v18/*class(_CharacterDataImpl)*/,'Node|ProcessingInstruction|Notation|EntityReference|Entity|DocumentType|Attr|ProcessingInstruction|Notation|EntityReference|Entity|DocumentType|Attr'].join('|');
  var v21/*class(_MediaStreamImpl)*/ = 'MediaStream|LocalMediaStream|LocalMediaStream';
  var v22/*class(_IDBRequestImpl)*/ = 'IDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest';
  var v23/*class(_AbstractWorkerImpl)*/ = 'AbstractWorker|Worker|SharedWorker|Worker|SharedWorker';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['SVGTextPositioningElement', v0/*class(_SVGTextPositioningElementImpl)*/],
    ['SVGTextContentElement', v7/*class(_SVGTextContentElementImpl)*/],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet|CSSStyleSheet'],
    ['Text', v6/*class(_TextImpl)*/],
    ['AbstractWorker', v23/*class(_AbstractWorkerImpl)*/],
    ['Uint8Array', v1/*class(_Uint8ArrayImpl)*/],
    ['ArrayBufferView', [v1/*class(_Uint8ArrayImpl)*/,v1/*class(_Uint8ArrayImpl)*/,'ArrayBufferView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView'].join('|')],
    ['MouseEvent', v2/*class(_MouseEventImpl)*/],
    ['UIEvent', v13/*class(_UIEventImpl)*/],
    ['AudioSourceNode', v3/*class(_AudioSourceNodeImpl)*/],
    ['AudioNode', [v3/*class(_AudioSourceNodeImpl)*/,v3/*class(_AudioSourceNodeImpl)*/,'AudioNode|WaveShaperNode|RealtimeAnalyserNode|JavaScriptAudioNode|DynamicsCompressorNode|DelayNode|ConvolverNode|BiquadFilterNode|AudioPannerNode|AudioGainNode|AudioDestinationNode|AudioChannelSplitter|AudioChannelMerger|WaveShaperNode|RealtimeAnalyserNode|JavaScriptAudioNode|DynamicsCompressorNode|DelayNode|ConvolverNode|BiquadFilterNode|AudioPannerNode|AudioGainNode|AudioDestinationNode|AudioChannelSplitter|AudioChannelMerger'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain|AudioGain'],
    ['Blob', 'Blob|File|File'],
    ['CSSRule', 'CSSRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule'],
    ['WorkerContext', v19/*class(_WorkerContextImpl)*/],
    ['SVGColor', v4/*class(_SVGColorImpl)*/],
    ['CSSValueList', v5/*class(_CSSValueListImpl)*/],
    ['CSSValue', [v4/*class(_SVGColorImpl)*/,v5/*class(_CSSValueListImpl)*/,v4/*class(_SVGColorImpl)*/,v5/*class(_CSSValueListImpl)*/,'CSSValue|CSSPrimitiveValue|CSSPrimitiveValue'].join('|')],
    ['CanvasRenderingContext', 'CanvasRenderingContext|WebGLRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext|CanvasRenderingContext2D'],
    ['CharacterData', v18/*class(_CharacterDataImpl)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList|DOMSettableTokenList'],
    ['DocumentFragment', v17/*class(_DocumentFragmentImpl)*/],
    ['HTMLDocument', v16/*class(_DocumentImpl)*/],
    ['SVGGradientElement', v8/*class(_SVGGradientElementImpl)*/],
    ['SVGComponentTransferFunctionElement', v9/*class(_SVGComponentTransferFunctionElementImpl)*/],
    ['SVGAnimationElement', v10/*class(_SVGAnimationElementImpl)*/],
    ['SVGElement', v11/*class(_SVGElementImpl)*/],
    ['HTMLMediaElement', v12/*class(_MediaElementImpl)*/],
    ['Element', v15/*class(_ElementImpl)*/],
    ['Entry', 'Entry|FileEntry|DirectoryEntry|FileEntry|DirectoryEntry'],
    ['EntrySync', 'EntrySync|FileEntrySync|DirectoryEntrySync|FileEntrySync|DirectoryEntrySync'],
    ['ProgressEvent', v14/*class(_ProgressEventImpl)*/],
    ['Event', [v13/*class(_UIEventImpl)*/,v14/*class(_ProgressEventImpl)*/,v13/*class(_UIEventImpl)*/,v14/*class(_ProgressEventImpl)*/,'Event|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBUpgradeNeededEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBUpgradeNeededEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent'].join('|')],
    ['Node', v20/*class(_NodeImpl)*/],
    ['MediaStream', v21/*class(_MediaStreamImpl)*/],
    ['IDBRequest', v22/*class(_IDBRequestImpl)*/],
    ['EventTarget', [v19/*class(_WorkerContextImpl)*/,v20/*class(_NodeImpl)*/,v21/*class(_MediaStreamImpl)*/,v22/*class(_IDBRequestImpl)*/,v23/*class(_AbstractWorkerImpl)*/,v19/*class(_WorkerContextImpl)*/,v20/*class(_NodeImpl)*/,v21/*class(_MediaStreamImpl)*/,v22/*class(_IDBRequestImpl)*/,v23/*class(_AbstractWorkerImpl)*/,'EventTarget|DOMWindow|WebSocket|WebKitNamedFlow|TextTrackList|TextTrack|TextTrackCue|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext|DOMWindow|WebSocket|WebKitNamedFlow|TextTrackList|TextTrack|TextTrackCue|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue|IDBCursorWithValue'],
    ['NodeList', 'NodeList|RadioNodeList|RadioNodeList'],
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  for (var cls in collectedClasses) {
    if (Object.prototype.hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    if (finishedClasses[cls]) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=sweeper_dom.dart.js.map